{"ast":null,"code":"import Dom from './Dom.js';\nimport { globals } from '../utils/window.js';\nimport { register, create } from '../utils/adopter.js';\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node);\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML;\n      outerXML = xmlOrFn;\n      xmlOrFn = null;\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns));\n      wrapper.add(this.node.cloneNode(true));\n      return wrapper.xml(false, ns);\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns);\n  }\n}\nregister(Fragment, 'Fragment');\nexport default Fragment;","map":{"version":3,"names":["Dom","globals","register","create","Fragment","constructor","node","document","createDocumentFragment","xml","xmlOrFn","outerXML","ns","wrapper","add","cloneNode"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/elements/Fragment.js"],"sourcesContent":["import Dom from './Dom.js'\nimport { globals } from '../utils/window.js'\nimport { register, create } from '../utils/adopter.js'\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node)\n  }\n\n  // Import / Export raw xml\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML\n      outerXML = xmlOrFn\n      xmlOrFn = null\n    }\n\n    // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns))\n      wrapper.add(this.node.cloneNode(true))\n\n      return wrapper.xml(false, ns)\n    }\n\n    // Act as setter if we got a string\n    return super.xml(xmlOrFn, false, ns)\n  }\n}\n\nregister(Fragment, 'Fragment')\n\nexport default Fragment\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,UAAU;AAC1B,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,EAAEC,MAAM,QAAQ,qBAAqB;AAEtD,MAAMC,QAAQ,SAASJ,GAAG,CAAC;EACzBK,WAAWA,CAACC,IAAI,GAAGL,OAAO,CAACM,QAAQ,CAACC,sBAAsB,CAAC,CAAC,EAAE;IAC5D,KAAK,CAACF,IAAI,CAAC;EACb;;EAEA;EACAG,GAAGA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IACzB,IAAI,OAAOF,OAAO,KAAK,SAAS,EAAE;MAChCE,EAAE,GAAGD,QAAQ;MACbA,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,IAAI;IAChB;;IAEA;IACA;IACA,IAAIA,OAAO,IAAI,IAAI,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;MACpD,MAAMG,OAAO,GAAG,IAAIb,GAAG,CAACG,MAAM,CAAC,SAAS,EAAES,EAAE,CAAC,CAAC;MAC9CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAACS,SAAS,CAAC,IAAI,CAAC,CAAC;MAEtC,OAAOF,OAAO,CAACJ,GAAG,CAAC,KAAK,EAAEG,EAAE,CAAC;IAC/B;;IAEA;IACA,OAAO,KAAK,CAACH,GAAG,CAACC,OAAO,EAAE,KAAK,EAAEE,EAAE,CAAC;EACtC;AACF;AAEAV,QAAQ,CAACE,QAAQ,EAAE,UAAU,CAAC;AAE9B,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}