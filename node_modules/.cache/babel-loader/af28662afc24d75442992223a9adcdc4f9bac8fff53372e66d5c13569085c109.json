{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Base from './Base';\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils';\n\n//  目录组织图\nclass CatalogOrganization extends Base {\n  //  构造函数\n  constructor(opt = {}) {\n    super(opt);\n  }\n\n  //  布局\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedLeftTopValue();\n    }, () => {\n      this.adjustLeftTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n\n  //  遍历数据计算节点的left、width、height\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex) => {\n      let newNode = this.createNode(cur, parent, isRoot, layerIndex);\n      // 根节点定位在画布中心位置\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        if (parent._node.isRoot) {\n          newNode.top = parent._node.top + parent._node.height + this.getMarginX(layerIndex);\n        }\n      }\n      if (!cur.data.expand) {\n        return true;\n      }\n    }, (cur, parent, isRoot, layerIndex) => {\n      if (isRoot) {\n        let len = cur.data.expand === false ? 0 : cur._node.children.length;\n        cur._node.childrenAreaWidth = len ? cur._node.children.reduce((h, item) => {\n          return h + item.width;\n        }, 0) + (len + 1) * this.getMarginX(layerIndex + 1) : 0;\n      }\n    }, true, 0);\n  }\n\n  //  遍历节点树计算节点的left、top\n  computedLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (node.getData('expand') && node.children && node.children.length) {\n        let marginX = this.getMarginX(layerIndex + 1);\n        let marginY = this.getMarginY(layerIndex + 1);\n        if (isRoot) {\n          let left = node.left + node.width / 2 - node.childrenAreaWidth / 2;\n          let totalLeft = left + marginX;\n          node.children.forEach(cur => {\n            cur.left = totalLeft;\n            totalLeft += cur.width + marginX;\n          });\n        } else {\n          let totalTop = node.top + this.getNodeHeightWithGeneralization(node) + marginY + (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0);\n          node.children.forEach(cur => {\n            cur.left = node.left + node.width * 0.5;\n            cur.top = totalTop;\n            totalTop += this.getNodeHeightWithGeneralization(cur) + marginY + (this.getNodeActChildrenLength(cur) > 0 ? cur.expandBtnSize : 0);\n          });\n        }\n      }\n    }, null, true);\n  }\n\n  //  调整节点left、top\n  adjustLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.getData('expand')) {\n        return;\n      }\n      // 调整left\n      if (parent && parent.isRoot) {\n        let areaWidth = this.getNodeAreaWidth(node, true);\n        let difference = areaWidth - node.width;\n        if (difference > 0) {\n          this.updateBrothersLeft(node, difference);\n        }\n      }\n      // 调整top\n      let len = node.children.length;\n      if (parent && !parent.isRoot && len > 0) {\n        let marginY = this.getMarginY(layerIndex + 1);\n        let totalHeight = node.children.reduce((h, item) => {\n          return h + this.getNodeHeightWithGeneralization(item) + (this.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0);\n        }, 0) + len * marginY;\n        this.updateBrothersTop(node, totalHeight);\n      }\n    }, (node, parent, isRoot) => {\n      if (isRoot) {\n        let {\n          right,\n          left\n        } = this.getNodeBoundaries(node, 'h');\n        let childrenWidth = right - left;\n        let offset = node.left - left - (childrenWidth - node.width) / 2;\n        this.updateChildren(node.children, 'left', offset);\n      }\n    }, true);\n  }\n\n  //  调整兄弟节点的left\n  updateBrothersLeft(node, addWidth) {\n    if (node.parent) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition() || _index <= index) {\n          // 适配自定义位置\n          return;\n        }\n        item.left += addWidth;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'left', addWidth);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothersLeft(node.parent, addWidth);\n    }\n  }\n\n  //  调整兄弟节点的top\n  updateBrothersTop(node, addHeight) {\n    if (node.parent && !node.parent.isRoot) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n        let _offset = 0;\n        // 下面的节点往下移\n        if (_index > index) {\n          _offset = addHeight;\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothersTop(node.parent, addHeight);\n    }\n  }\n\n  //  绘制连线，连接该节点到其子节点\n  renderLine(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    let len = node.children.length;\n    let marginX = this.getMarginX(node.layerIndex + 1);\n    if (node.isRoot) {\n      // 根节点\n      let x1 = left + width / 2;\n      let y1 = top + height;\n      let s1 = marginX * 0.7;\n      let minx = Infinity;\n      let maxx = -Infinity;\n      node.children.forEach((item, index) => {\n        let x2 = item.left + item.width / 2;\n        let y2 = item.top;\n        if (x2 < minx) {\n          minx = x2;\n        }\n        if (x2 > maxx) {\n          maxx = x2;\n        }\n        // 节点使用横线风格，需要额外渲染横线\n        let nodeUseLineStylePath = this.mindMap.themeConfig.nodeUseLineStyle ? ` L ${item.left},${y2} L ${item.left + item.width},${y2}` : '';\n        let path = `M ${x2},${y1 + s1} L ${x2},${y1 + s1 > y2 ? y2 + item.height : y2}` + nodeUseLineStylePath;\n        // 竖线\n        this.setLineStyle(style, lines[index], path, item);\n      });\n      minx = Math.min(minx, x1);\n      maxx = Math.max(maxx, x1);\n      // 父节点的竖线\n      let line1 = this.lineDraw.path();\n      node.style.line(line1);\n      line1.plot(this.transformPath(`M ${x1},${y1} L ${x1},${y1 + s1}`));\n      node._lines.push(line1);\n      style && style(line1, node);\n      // 水平线\n      if (len > 0) {\n        let lin2 = this.lineDraw.path();\n        node.style.line(lin2);\n        lin2.plot(this.transformPath(`M ${minx},${y1 + s1} L ${maxx},${y1 + s1}`));\n        node._lines.push(lin2);\n        style && style(lin2, node);\n      }\n    } else {\n      // 非根节点\n      let y1 = top + height;\n      let maxy = -Infinity;\n      let x2 = node.left + node.width * 0.3;\n      node.children.forEach((item, index) => {\n        // 为了适配自定义位置，下面做了各种位置的兼容\n        let y2 = item.top + item.height / 2;\n        if (y2 > maxy) {\n          maxy = y2;\n        }\n        // 水平线\n        let path = '';\n        let _left = item.left;\n        let _isLeft = item.left + item.width < x2;\n        let _isXCenter = false;\n        if (_isLeft) {\n          // 水平位置在父节点左边\n          _left = item.left + item.width;\n        } else if (item.left < x2 && item.left + item.width > x2) {\n          // 水平位置在父节点之间\n          _isXCenter = true;\n          y2 = item.top;\n          maxy = y2;\n        }\n        if (y2 > top && y2 < y1) {\n          // 自定义位置的情况：垂直位置节点在父节点之间\n          path = `M ${_isLeft ? node.left : node.left + node.width},${y2} L ${_left},${y2}`;\n        } else if (y2 < y1) {\n          // 自定义位置的情况：垂直位置节点在父节点上面\n          if (_isXCenter) {\n            y2 = item.top + item.height;\n            _left = x2;\n          }\n          path = `M ${x2},${top} L ${x2},${y2} L ${_left},${y2}`;\n        } else {\n          if (_isXCenter) {\n            _left = x2;\n          }\n          path = `M ${x2},${y2} L ${_left},${y2}`;\n        }\n        // 节点使用横线风格，需要额外渲染横线\n        let nodeUseLineStylePath = this.mindMap.themeConfig.nodeUseLineStyle ? ` L ${_left},${y2 - item.height / 2} L ${_left},${y2 + item.height / 2}` : '';\n        path += nodeUseLineStylePath;\n        this.setLineStyle(style, lines[index], path, item);\n      });\n      // 竖线\n      if (len > 0) {\n        let lin2 = this.lineDraw.path();\n        expandBtnSize = len > 0 ? expandBtnSize : 0;\n        node.style.line(lin2);\n        if (maxy < y1 + expandBtnSize) {\n          lin2.hide();\n        } else {\n          lin2.plot(this.transformPath(`M ${x2},${y1 + expandBtnSize} L ${x2},${maxy}`));\n          lin2.show();\n        }\n        node._lines.push(lin2);\n        style && style(lin2, node);\n      }\n    }\n  }\n\n  //  渲染按钮\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height,\n      expandBtnSize,\n      isRoot\n    } = node;\n    if (!isRoot) {\n      let {\n        translateX,\n        translateY\n      } = btn.transform();\n      btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY);\n    }\n  }\n\n  //  创建概要节点\n  renderGeneralization(list) {\n    list.forEach(item => {\n      let {\n        top,\n        bottom,\n        right,\n        generalizationLineMargin,\n        generalizationNodeMargin\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h');\n      let x1 = right + generalizationLineMargin;\n      let y1 = top;\n      let x2 = right + generalizationLineMargin;\n      let y2 = bottom;\n      let cx = x1 + 20;\n      let cy = y1 + (y2 - y1) / 2;\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n      item.generalizationLine.plot(this.transformPath(path));\n      item.generalizationNode.left = right + generalizationNodeMargin;\n      item.generalizationNode.top = top + (bottom - top - item.generalizationNode.height) / 2;\n    });\n  }\n\n  // 渲染展开收起按钮的隐藏占位元素\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\n    rect.size(width, expandBtnSize).x(0).y(height);\n  }\n}\nexport default CatalogOrganization;","map":{"version":3,"names":["Base","walk","asyncRun","getNodeIndexInNodeList","CatalogOrganization","constructor","opt","doLayout","callback","task","computedBaseValue","computedLeftTopValue","adjustLeftTopValue","root","renderer","renderTree","cur","parent","isRoot","layerIndex","newNode","createNode","setNodeCenter","_node","top","height","getMarginX","data","expand","len","children","length","childrenAreaWidth","reduce","h","item","width","node","getData","marginX","marginY","getMarginY","left","totalLeft","forEach","totalTop","getNodeHeightWithGeneralization","getNodeActChildrenLength","expandBtnSize","areaWidth","getNodeAreaWidth","difference","updateBrothersLeft","totalHeight","updateBrothersTop","right","getNodeBoundaries","childrenWidth","offset","updateChildren","addWidth","childrenList","index","_index","hasCustomPosition","addHeight","_offset","renderLine","lines","style","mindMap","alwaysShowExpandBtn","x1","y1","s1","minx","Infinity","maxx","x2","y2","nodeUseLineStylePath","themeConfig","nodeUseLineStyle","path","setLineStyle","Math","min","max","line1","lineDraw","line","plot","transformPath","_lines","push","lin2","maxy","_left","_isLeft","_isXCenter","hide","show","renderExpandBtn","btn","translateX","translateY","transform","translate","renderGeneralization","list","bottom","generalizationLineMargin","generalizationNodeMargin","getNodeGeneralizationRenderBoundaries","cx","cy","generalizationLine","generalizationNode","renderExpandBtnRect","rect","size","x","y"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/CatalogOrganization.js"],"sourcesContent":["import Base from './Base'\r\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils'\r\n\r\n//  目录组织图\r\nclass CatalogOrganization extends Base {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    super(opt)\r\n  }\r\n\r\n  //  布局\r\n  doLayout(callback) {\r\n    let task = [\r\n      () => {\r\n        this.computedBaseValue()\r\n      },\r\n      () => {\r\n        this.computedLeftTopValue()\r\n      },\r\n      () => {\r\n        this.adjustLeftTopValue()\r\n      },\r\n      () => {\r\n        callback(this.root)\r\n      }\r\n    ]\r\n    asyncRun(task)\r\n  }\r\n\r\n  //  遍历数据计算节点的left、width、height\r\n  computedBaseValue() {\r\n    walk(\r\n      this.renderer.renderTree,\r\n      null,\r\n      (cur, parent, isRoot, layerIndex) => {\r\n        let newNode = this.createNode(cur, parent, isRoot, layerIndex)\r\n        // 根节点定位在画布中心位置\r\n        if (isRoot) {\r\n          this.setNodeCenter(newNode)\r\n        } else {\r\n          // 非根节点\r\n          if (parent._node.isRoot) {\r\n            newNode.top =\r\n              parent._node.top +\r\n              parent._node.height +\r\n              this.getMarginX(layerIndex)\r\n          }\r\n        }\r\n        if (!cur.data.expand) {\r\n          return true\r\n        }\r\n      },\r\n      (cur, parent, isRoot, layerIndex) => {\r\n        if (isRoot) {\r\n          let len = cur.data.expand === false ? 0 : cur._node.children.length\r\n          cur._node.childrenAreaWidth = len\r\n            ? cur._node.children.reduce((h, item) => {\r\n                return h + item.width\r\n              }, 0) +\r\n              (len + 1) * this.getMarginX(layerIndex + 1)\r\n            : 0\r\n        }\r\n      },\r\n      true,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  遍历节点树计算节点的left、top\r\n  computedLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (node.getData('expand') && node.children && node.children.length) {\r\n          let marginX = this.getMarginX(layerIndex + 1)\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          if (isRoot) {\r\n            let left = node.left + node.width / 2 - node.childrenAreaWidth / 2\r\n            let totalLeft = left + marginX\r\n            node.children.forEach(cur => {\r\n              cur.left = totalLeft\r\n              totalLeft += cur.width + marginX\r\n            })\r\n          } else {\r\n            let totalTop =\r\n              node.top +\r\n              this.getNodeHeightWithGeneralization(node) +\r\n              marginY +\r\n              (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0)\r\n            node.children.forEach(cur => {\r\n              cur.left = node.left + node.width * 0.5\r\n              cur.top = totalTop\r\n              totalTop +=\r\n                this.getNodeHeightWithGeneralization(cur) +\r\n                marginY +\r\n                (this.getNodeActChildrenLength(cur) > 0 ? cur.expandBtnSize : 0)\r\n            })\r\n          }\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整节点left、top\r\n  adjustLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (!node.getData('expand')) {\r\n          return\r\n        }\r\n        // 调整left\r\n        if (parent && parent.isRoot) {\r\n          let areaWidth = this.getNodeAreaWidth(node, true)\r\n          let difference = areaWidth - node.width\r\n          if (difference > 0) {\r\n            this.updateBrothersLeft(node, difference)\r\n          }\r\n        }\r\n        // 调整top\r\n        let len = node.children.length\r\n        if (parent && !parent.isRoot && len > 0) {\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          let totalHeight =\r\n            node.children.reduce((h, item) => {\r\n              return (\r\n                h +\r\n                this.getNodeHeightWithGeneralization(item) +\r\n                (this.getNodeActChildrenLength(item) > 0\r\n                  ? item.expandBtnSize\r\n                  : 0)\r\n              )\r\n            }, 0) +\r\n            len * marginY\r\n          this.updateBrothersTop(node, totalHeight)\r\n        }\r\n      },\r\n      (node, parent, isRoot) => {\r\n        if (isRoot) {\r\n          let { right, left } = this.getNodeBoundaries(node, 'h')\r\n          let childrenWidth = right - left\r\n          let offset = node.left - left - (childrenWidth - node.width) / 2\r\n          this.updateChildren(node.children, 'left', offset)\r\n        }\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整兄弟节点的left\r\n  updateBrothersLeft(node, addWidth) {\r\n    if (node.parent) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.hasCustomPosition() || _index <= index) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        item.left += addWidth\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'left', addWidth)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothersLeft(node.parent, addWidth)\r\n    }\r\n  }\r\n\r\n  //  调整兄弟节点的top\r\n  updateBrothersTop(node, addHeight) {\r\n    if (node.parent && !node.parent.isRoot) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.hasCustomPosition()) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        let _offset = 0\r\n        // 下面的节点往下移\r\n        if (_index > index) {\r\n          _offset = addHeight\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothersTop(node.parent, addHeight)\r\n    }\r\n  }\r\n\r\n  //  绘制连线，连接该节点到其子节点\r\n  renderLine(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    let len = node.children.length\r\n    let marginX = this.getMarginX(node.layerIndex + 1)\r\n    if (node.isRoot) {\r\n      // 根节点\r\n      let x1 = left + width / 2\r\n      let y1 = top + height\r\n      let s1 = marginX * 0.7\r\n      let minx = Infinity\r\n      let maxx = -Infinity\r\n      node.children.forEach((item, index) => {\r\n        let x2 = item.left + item.width / 2\r\n        let y2 = item.top\r\n        if (x2 < minx) {\r\n          minx = x2\r\n        }\r\n        if (x2 > maxx) {\r\n          maxx = x2\r\n        }\r\n        // 节点使用横线风格，需要额外渲染横线\r\n        let nodeUseLineStylePath = this.mindMap.themeConfig.nodeUseLineStyle\r\n          ? ` L ${item.left},${y2} L ${item.left + item.width},${y2}`\r\n          : ''\r\n        let path =\r\n          `M ${x2},${y1 + s1} L ${x2},${y1 + s1 > y2 ? y2 + item.height : y2}` +\r\n          nodeUseLineStylePath\r\n        // 竖线\r\n        this.setLineStyle(style, lines[index], path, item)\r\n      })\r\n      minx = Math.min(minx, x1)\r\n      maxx = Math.max(maxx, x1)\r\n      // 父节点的竖线\r\n      let line1 = this.lineDraw.path()\r\n      node.style.line(line1)\r\n      line1.plot(this.transformPath(`M ${x1},${y1} L ${x1},${y1 + s1}`))\r\n      node._lines.push(line1)\r\n      style && style(line1, node)\r\n      // 水平线\r\n      if (len > 0) {\r\n        let lin2 = this.lineDraw.path()\r\n        node.style.line(lin2)\r\n        lin2.plot(this.transformPath(`M ${minx},${y1 + s1} L ${maxx},${y1 + s1}`))\r\n        node._lines.push(lin2)\r\n        style && style(lin2, node)\r\n      }\r\n    } else {\r\n      // 非根节点\r\n      let y1 = top + height\r\n      let maxy = -Infinity\r\n      let x2 = node.left + node.width * 0.3\r\n      node.children.forEach((item, index) => {\r\n        // 为了适配自定义位置，下面做了各种位置的兼容\r\n        let y2 = item.top + item.height / 2\r\n        if (y2 > maxy) {\r\n          maxy = y2\r\n        }\r\n        // 水平线\r\n        let path = ''\r\n        let _left = item.left\r\n        let _isLeft = item.left + item.width < x2\r\n        let _isXCenter = false\r\n        if (_isLeft) {\r\n          // 水平位置在父节点左边\r\n          _left = item.left + item.width\r\n        } else if (item.left < x2 && item.left + item.width > x2) {\r\n          // 水平位置在父节点之间\r\n          _isXCenter = true\r\n          y2 = item.top\r\n          maxy = y2\r\n        }\r\n        if (y2 > top && y2 < y1) {\r\n          // 自定义位置的情况：垂直位置节点在父节点之间\r\n          path = `M ${\r\n            _isLeft ? node.left : node.left + node.width\r\n          },${y2} L ${_left},${y2}`\r\n        } else if (y2 < y1) {\r\n          // 自定义位置的情况：垂直位置节点在父节点上面\r\n          if (_isXCenter) {\r\n            y2 = item.top + item.height\r\n            _left = x2\r\n          }\r\n          path = `M ${x2},${top} L ${x2},${y2} L ${_left},${y2}`\r\n        } else {\r\n          if (_isXCenter) {\r\n            _left = x2\r\n          }\r\n          path = `M ${x2},${y2} L ${_left},${y2}`\r\n        }\r\n        // 节点使用横线风格，需要额外渲染横线\r\n        let nodeUseLineStylePath = this.mindMap.themeConfig.nodeUseLineStyle\r\n          ? ` L ${_left},${y2 - item.height / 2} L ${_left},${\r\n              y2 + item.height / 2\r\n            }`\r\n          : ''\r\n        path += nodeUseLineStylePath\r\n        this.setLineStyle(style, lines[index], path, item)\r\n      })\r\n      // 竖线\r\n      if (len > 0) {\r\n        let lin2 = this.lineDraw.path()\r\n        expandBtnSize = len > 0 ? expandBtnSize : 0\r\n        node.style.line(lin2)\r\n        if (maxy < y1 + expandBtnSize) {\r\n          lin2.hide()\r\n        } else {\r\n          lin2.plot(\r\n            this.transformPath(`M ${x2},${y1 + expandBtnSize} L ${x2},${maxy}`)\r\n          )\r\n          lin2.show()\r\n        }\r\n        node._lines.push(lin2)\r\n        style && style(lin2, node)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  渲染按钮\r\n  renderExpandBtn(node, btn) {\r\n    let { width, height, expandBtnSize, isRoot } = node\r\n    if (!isRoot) {\r\n      let { translateX, translateY } = btn.transform()\r\n      btn.translate(\r\n        width * 0.3 - expandBtnSize / 2 - translateX,\r\n        height + expandBtnSize / 2 - translateY\r\n      )\r\n    }\r\n  }\r\n\r\n  //  创建概要节点\r\n  renderGeneralization(list) {\r\n    list.forEach(item => {\r\n      let {\r\n        top,\r\n        bottom,\r\n        right,\r\n        generalizationLineMargin,\r\n        generalizationNodeMargin\r\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h')\r\n      let x1 = right + generalizationLineMargin\r\n      let y1 = top\r\n      let x2 = right + generalizationLineMargin\r\n      let y2 = bottom\r\n      let cx = x1 + 20\r\n      let cy = y1 + (y2 - y1) / 2\r\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\r\n      item.generalizationLine.plot(this.transformPath(path))\r\n      item.generalizationNode.left = right + generalizationNodeMargin\r\n      item.generalizationNode.top =\r\n        top + (bottom - top - item.generalizationNode.height) / 2\r\n    })\r\n  }\r\n\r\n  // 渲染展开收起按钮的隐藏占位元素\r\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\r\n    rect.size(width, expandBtnSize).x(0).y(height)\r\n  }\r\n}\r\n\r\nexport default CatalogOrganization\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}