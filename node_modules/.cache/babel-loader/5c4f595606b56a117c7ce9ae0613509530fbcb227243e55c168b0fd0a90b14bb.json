{"ast":null,"code":"import { nodeOrNew, register } from '../utils/adopter.js';\nimport { registerMethods } from '../utils/methods.js';\nimport { unCamelCase } from '../utils/utils.js';\nimport Element from './Element.js';\nfunction cssRule(selector, rule) {\n  if (!selector) return '';\n  if (!rule) return selector;\n  let ret = selector + '{';\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';';\n  }\n  ret += '}';\n  return ret;\n}\nexport default class Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs);\n  }\n  addText(w = '') {\n    this.node.textContent += w;\n    return this;\n  }\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    });\n  }\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj));\n  }\n}\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj);\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params);\n  }\n});\nregister(Style, 'Style');","map":{"version":3,"names":["nodeOrNew","register","registerMethods","unCamelCase","Element","cssRule","selector","rule","ret","i","Style","constructor","node","attrs","addText","w","textContent","font","name","src","params","fontFamily","obj","style","put","fontface"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/elements/Style.js"],"sourcesContent":["import { nodeOrNew, register } from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport { unCamelCase } from '../utils/utils.js'\nimport Element from './Element.js'\n\nfunction cssRule(selector, rule) {\n  if (!selector) return ''\n  if (!rule) return selector\n\n  let ret = selector + '{'\n\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';'\n  }\n\n  ret += '}'\n\n  return ret\n}\n\nexport default class Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs)\n  }\n\n  addText(w = '') {\n    this.node.textContent += w\n    return this\n  }\n\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    })\n  }\n\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj))\n  }\n}\n\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj)\n  },\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params)\n  }\n})\n\nregister(Style, 'Style')\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,qBAAqB;AACzD,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,OAAOC,OAAO,MAAM,cAAc;AAElC,SAASC,OAAOA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC/B,IAAI,CAACD,QAAQ,EAAE,OAAO,EAAE;EACxB,IAAI,CAACC,IAAI,EAAE,OAAOD,QAAQ;EAE1B,IAAIE,GAAG,GAAGF,QAAQ,GAAG,GAAG;EAExB,KAAK,MAAMG,CAAC,IAAIF,IAAI,EAAE;IACpBC,GAAG,IAAIL,WAAW,CAACM,CAAC,CAAC,GAAG,GAAG,GAAGF,IAAI,CAACE,CAAC,CAAC,GAAG,GAAG;EAC7C;EAEAD,GAAG,IAAI,GAAG;EAEV,OAAOA,GAAG;AACZ;AAEA,eAAe,MAAME,KAAK,SAASN,OAAO,CAAC;EACzCO,WAAWA,CAACC,IAAI,EAAEC,KAAK,GAAGD,IAAI,EAAE;IAC9B,KAAK,CAACZ,SAAS,CAAC,OAAO,EAAEY,IAAI,CAAC,EAAEC,KAAK,CAAC;EACxC;EAEAC,OAAOA,CAACC,CAAC,GAAG,EAAE,EAAE;IACd,IAAI,CAACH,IAAI,CAACI,WAAW,IAAID,CAAC;IAC1B,OAAO,IAAI;EACb;EAEAE,IAAIA,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC3B,OAAO,IAAI,CAACb,IAAI,CAAC,YAAY,EAAE;MAC7Bc,UAAU,EAAEH,IAAI;MAChBC,GAAG,EAAEA,GAAG;MACR,GAAGC;IACL,CAAC,CAAC;EACJ;EAEAb,IAAIA,CAACD,QAAQ,EAAEgB,GAAG,EAAE;IAClB,OAAO,IAAI,CAACR,OAAO,CAACT,OAAO,CAACC,QAAQ,EAAEgB,GAAG,CAAC,CAAC;EAC7C;AACF;AAEApB,eAAe,CAAC,KAAK,EAAE;EACrBqB,KAAKA,CAACjB,QAAQ,EAAEgB,GAAG,EAAE;IACnB,OAAO,IAAI,CAACE,GAAG,CAAC,IAAId,KAAK,CAAC,CAAC,CAAC,CAACH,IAAI,CAACD,QAAQ,EAAEgB,GAAG,CAAC;EAClD,CAAC;EACDG,QAAQA,CAACP,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAE;IAC1B,OAAO,IAAI,CAACI,GAAG,CAAC,IAAId,KAAK,CAAC,CAAC,CAAC,CAACO,IAAI,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;EACtD;AACF,CAAC,CAAC;AAEFnB,QAAQ,CAACS,KAAK,EAAE,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}