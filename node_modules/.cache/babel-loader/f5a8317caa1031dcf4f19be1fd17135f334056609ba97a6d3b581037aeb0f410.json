{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Style from './Style';\nimport Shape from './Shape';\nimport { G, Rect } from '@svgdotjs/svg.js';\nimport nodeGeneralizationMethods from './nodeGeneralization';\nimport nodeExpandBtnMethods from './nodeExpandBtn';\nimport nodeCommandWrapsMethods from './nodeCommandWraps';\nimport nodeCreateContentsMethods from './nodeCreateContents';\nimport nodeExpandBtnPlaceholderRectMethods from './nodeExpandBtnPlaceholderRect';\nimport nodeCooperateMethods from './nodeCooperate';\nimport { CONSTANTS } from '../../../constants/constant';\nimport { copyNodeTree, createForeignObjectNode } from '../../../utils/index';\n\n//  节点类\nclass Node {\n  //  构造函数\n  constructor(opt = {}) {\n    // 节点数据\n    this.nodeData = this.handleData(opt.data || {});\n    // uid\n    this.uid = opt.uid;\n    // 控制实例\n    this.mindMap = opt.mindMap;\n    // 渲染实例\n    this.renderer = opt.renderer;\n    // 渲染器\n    this.draw = this.mindMap.draw;\n    this.nodeDraw = this.mindMap.nodeDraw;\n    this.lineDraw = this.mindMap.lineDraw;\n    // 样式实例\n    this.style = new Style(this);\n    // 形状实例\n    this.shapeInstance = new Shape(this);\n    this.shapePadding = {\n      paddingX: 0,\n      paddingY: 0\n    };\n    // 是否是根节点\n    this.isRoot = opt.isRoot === undefined ? false : opt.isRoot;\n    // 是否是概要节点\n    this.isGeneralization = opt.isGeneralization === undefined ? false : opt.isGeneralization;\n    this.generalizationBelongNode = null;\n    // 节点层级\n    this.layerIndex = opt.layerIndex === undefined ? 0 : opt.layerIndex;\n    // 节点宽\n    this.width = opt.width || 0;\n    // 节点高\n    this.height = opt.height || 0;\n    // left\n    this._left = opt.left || 0;\n    // top\n    this._top = opt.top || 0;\n    // 自定义位置\n    this.customLeft = opt.data.data.customLeft || undefined;\n    this.customTop = opt.data.data.customTop || undefined;\n    // 是否正在拖拽中\n    this.isDrag = false;\n    // 父节点\n    this.parent = opt.parent || null;\n    // 子节点\n    this.children = opt.children || [];\n    // 当前同时操作该节点的用户列表\n    this.userList = [];\n    // 节点内容的容器\n    this.group = null;\n    this.shapeNode = null; // 节点形状节点\n    this.hoverNode = null; // 节点hover和激活的节点\n    // 节点内容对象\n    this._customNodeContent = null;\n    this._imgData = null;\n    this._iconData = null;\n    this._textData = null;\n    this._hyperlinkData = null;\n    this._tagData = null;\n    this._noteData = null;\n    this.noteEl = null;\n    this.noteContentIsShow = false;\n    this._attachmentData = null;\n    this._prefixData = null;\n    this._postfixData = null;\n    this._expandBtn = null;\n    this._lastExpandBtnType = null;\n    this._showExpandBtn = false;\n    this._openExpandNode = null;\n    this._closeExpandNode = null;\n    this._fillExpandNode = null;\n    this._userListGroup = null;\n    this._lines = [];\n    this._generalizationList = [];\n    this._unVisibleRectRegionNode = null;\n    this._isMouseenter = false;\n    // 尺寸信息\n    this._rectInfo = {\n      imgContentWidth: 0,\n      imgContentHeight: 0,\n      textContentWidth: 0,\n      textContentHeight: 0\n    };\n    // 概要节点的宽高\n    this._generalizationNodeWidth = 0;\n    this._generalizationNodeHeight = 0;\n    // 各种文字信息的间距\n    this.textContentItemMargin = this.mindMap.opt.textContentMargin;\n    // 图片和文字节点的间距\n    this.blockContentMargin = this.mindMap.opt.imgTextMargin;\n    // 展开收缩按钮尺寸\n    this.expandBtnSize = this.mindMap.opt.expandBtnSize;\n    // 是否是多选节点\n    this.isMultipleChoice = false;\n    // 是否需要重新layout\n    this.needLayout = false;\n    // 当前是否是隐藏状态\n    this.isHide = false;\n    // 概要相关方法\n    Object.keys(nodeGeneralizationMethods).forEach(item => {\n      this[item] = nodeGeneralizationMethods[item].bind(this);\n    });\n    // 展开收起按钮相关方法\n    Object.keys(nodeExpandBtnMethods).forEach(item => {\n      this[item] = nodeExpandBtnMethods[item].bind(this);\n    });\n    // 展开收起按钮占位元素相关方法\n    Object.keys(nodeExpandBtnPlaceholderRectMethods).forEach(item => {\n      this[item] = nodeExpandBtnPlaceholderRectMethods[item].bind(this);\n    });\n    // 命令的相关方法\n    Object.keys(nodeCommandWrapsMethods).forEach(item => {\n      this[item] = nodeCommandWrapsMethods[item].bind(this);\n    });\n    // 创建节点内容的相关方法\n    Object.keys(nodeCreateContentsMethods).forEach(item => {\n      this[item] = nodeCreateContentsMethods[item].bind(this);\n    });\n    // 协同相关\n    if (this.mindMap.cooperate) {\n      Object.keys(nodeCooperateMethods).forEach(item => {\n        this[item] = nodeCooperateMethods[item].bind(this);\n      });\n    }\n    // 初始化\n    this.getSize();\n  }\n\n  // 支持自定义位置\n  get left() {\n    return this.customLeft || this._left;\n  }\n  set left(val) {\n    this._left = val;\n  }\n  get top() {\n    return this.customTop || this._top;\n  }\n  set top(val) {\n    this._top = val;\n  }\n\n  //  复位部分布局时会重新设置的数据\n  reset() {\n    this.children = [];\n    this.parent = null;\n    this.isRoot = false;\n    this.layerIndex = 0;\n    this.left = 0;\n    this.top = 0;\n  }\n\n  // 节点被删除时需要复位的数据\n  resetWhenDelete() {\n    this._isMouseenter = false;\n  }\n\n  //  处理数据\n  handleData(data) {\n    data.data.expand = data.data.expand === false ? false : true;\n    data.data.isActive = data.data.isActive === true ? true : false;\n    data.children = data.children || [];\n    return data;\n  }\n\n  //  创建节点的各个内容对象数据\n  createNodeData() {\n    // 自定义节点内容\n    let {\n      isUseCustomNodeContent,\n      customCreateNodeContent,\n      createNodePrefixContent,\n      createNodePostfixContent\n    } = this.mindMap.opt;\n    if (isUseCustomNodeContent && customCreateNodeContent) {\n      this._customNodeContent = customCreateNodeContent(this);\n    }\n    // 如果没有返回内容，那么还是使用内置的节点内容\n    if (this._customNodeContent) {\n      this._customNodeContent.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n      return;\n    }\n    this._imgData = this.createImgNode();\n    this._iconData = this.createIconNode();\n    this._textData = this.createTextNode();\n    this._hyperlinkData = this.createHyperlinkNode();\n    this._tagData = this.createTagNode();\n    this._noteData = this.createNoteNode();\n    this._attachmentData = this.createAttachmentNode();\n    this._prefixData = createNodePrefixContent ? createNodePrefixContent(this) : null;\n    this._postfixData = createNodePostfixContent ? createNodePostfixContent(this) : null;\n  }\n\n  //  计算节点的宽高\n  getSize() {\n    this.customLeft = this.getData('customLeft') || undefined;\n    this.customTop = this.getData('customTop') || undefined;\n    this.updateGeneralization();\n    this.createNodeData();\n    let {\n      width,\n      height\n    } = this.getNodeRect();\n    // 判断节点尺寸是否有变化\n    let changed = this.width !== width || this.height !== height;\n    this.width = width;\n    this.height = height;\n    return changed;\n  }\n\n  //  计算节点尺寸信息\n  getNodeRect() {\n    // 自定义节点内容\n    if (this.isUseCustomNodeContent()) {\n      let rect = this.measureCustomNodeContentSize(this._customNodeContent);\n      return {\n        width: rect.width,\n        height: rect.height\n      };\n    }\n    // 宽高\n    let imgContentWidth = 0;\n    let imgContentHeight = 0;\n    let textContentWidth = 0;\n    let textContentHeight = 0;\n    // 存在图片\n    if (this._imgData) {\n      this._rectInfo.imgContentWidth = imgContentWidth = this._imgData.width;\n      this._rectInfo.imgContentHeight = imgContentHeight = this._imgData.height;\n    }\n    // 自定义前置内容\n    if (this._prefixData) {\n      textContentWidth += this._prefixData.width;\n      textContentHeight = Math.max(textContentHeight, this._prefixData.height);\n    }\n    // 图标\n    if (this._iconData.length > 0) {\n      textContentWidth += this._iconData.reduce((sum, cur) => {\n        textContentHeight = Math.max(textContentHeight, cur.height);\n        return sum += cur.width + this.textContentItemMargin;\n      }, 0);\n    }\n    // 文字\n    if (this._textData) {\n      textContentWidth += this._textData.width;\n      textContentHeight = Math.max(textContentHeight, this._textData.height);\n    }\n    // 超链接\n    if (this._hyperlinkData) {\n      textContentWidth += this._hyperlinkData.width;\n      textContentHeight = Math.max(textContentHeight, this._hyperlinkData.height);\n    }\n    // 标签\n    if (this._tagData.length > 0) {\n      textContentWidth += this._tagData.reduce((sum, cur) => {\n        textContentHeight = Math.max(textContentHeight, cur.height);\n        return sum += cur.width + this.textContentItemMargin;\n      }, 0);\n    }\n    // 备注\n    if (this._noteData) {\n      textContentWidth += this._noteData.width;\n      textContentHeight = Math.max(textContentHeight, this._noteData.height);\n    }\n    // 附件\n    if (this._attachmentData) {\n      textContentWidth += this._attachmentData.width;\n      textContentHeight = Math.max(textContentHeight, this._attachmentData.height);\n    }\n    // 自定义后置内容\n    if (this._postfixData) {\n      textContentWidth += this._postfixData.width;\n      textContentHeight = Math.max(textContentHeight, this._postfixData.height);\n    }\n    // 文字内容部分的尺寸\n    this._rectInfo.textContentWidth = textContentWidth;\n    this._rectInfo.textContentHeight = textContentHeight;\n    // 间距\n    let margin = imgContentHeight > 0 && textContentHeight > 0 ? this.blockContentMargin : 0;\n    let {\n      paddingX,\n      paddingY\n    } = this.getPaddingVale();\n    // 纯内容宽高\n    let _width = Math.max(imgContentWidth, textContentWidth);\n    let _height = imgContentHeight + textContentHeight;\n    // 计算节点形状需要的附加内边距\n    let {\n      paddingX: shapePaddingX,\n      paddingY: shapePaddingY\n    } = this.shapeInstance.getShapePadding(_width, _height, paddingX, paddingY);\n    this.shapePadding.paddingX = shapePaddingX;\n    this.shapePadding.paddingY = shapePaddingY;\n    // 边框宽度，因为边框是以中线向两端发散，所以边框会超出节点\n    const borderWidth = this.getBorderWidth();\n    return {\n      width: _width + paddingX * 2 + shapePaddingX * 2 + borderWidth,\n      height: _height + paddingY * 2 + margin + shapePaddingY * 2 + borderWidth\n    };\n  }\n\n  //  定位节点内容\n  layout() {\n    // 清除之前的内容\n    this.group.clear();\n    const {\n      hoverRectPadding\n    } = this.mindMap.opt;\n    let {\n      width,\n      height,\n      textContentItemMargin\n    } = this;\n    let {\n      paddingY\n    } = this.getPaddingVale();\n    const halfBorderWidth = this.getBorderWidth() / 2;\n    paddingY += this.shapePadding.paddingY + halfBorderWidth;\n    // 节点形状\n    this.shapeNode = this.shapeInstance.createShape();\n    this.shapeNode.addClass('smm-node-shape');\n    this.shapeNode.translate(halfBorderWidth, halfBorderWidth);\n    this.style.shape(this.shapeNode);\n    this.group.add(this.shapeNode);\n    // 渲染一个隐藏的矩形区域，用来触发展开收起按钮的显示\n    this.renderExpandBtnPlaceholderRect();\n    // 创建协同头像节点\n    if (this.createUserListNode) this.createUserListNode();\n    // 概要节点添加一个带所属节点id的类名\n    if (this.isGeneralization && this.generalizationBelongNode) {\n      this.group.addClass('generalization_' + this.generalizationBelongNode.uid);\n    }\n    // 激活hover和激活边框\n    const addHoverNode = () => {\n      this.hoverNode = new Rect().size(width + hoverRectPadding * 2, height + hoverRectPadding * 2).x(-hoverRectPadding).y(-hoverRectPadding);\n      this.hoverNode.addClass('smm-hover-node');\n      this.style.hoverNode(this.hoverNode, width, height);\n      this.group.add(this.hoverNode);\n    };\n    // 如果存在自定义节点内容，那么使用自定义节点内容\n    if (this.isUseCustomNodeContent()) {\n      const foreignObject = createForeignObjectNode({\n        el: this._customNodeContent,\n        width,\n        height\n      });\n      this.group.add(foreignObject);\n      addHoverNode();\n      return;\n    }\n    // 图片节点\n    let imgHeight = 0;\n    if (this._imgData) {\n      imgHeight = this._imgData.height;\n      this.group.add(this._imgData.node);\n      this._imgData.node.cx(width / 2).y(paddingY);\n    }\n    // 内容节点\n    let textContentNested = new G();\n    let textContentOffsetX = 0;\n    // 自定义前置内容\n    if (this._prefixData) {\n      const foreignObject = createForeignObjectNode({\n        el: this._prefixData.el,\n        width: this._prefixData.width,\n        height: this._prefixData.height\n      });\n      foreignObject.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._prefixData.height) / 2);\n      textContentNested.add(foreignObject);\n      textContentOffsetX += this._prefixData.width + textContentItemMargin;\n    }\n    // icon\n    let iconNested = new G();\n    if (this._iconData && this._iconData.length > 0) {\n      let iconLeft = 0;\n      this._iconData.forEach(item => {\n        item.node.x(textContentOffsetX + iconLeft).y((this._rectInfo.textContentHeight - item.height) / 2);\n        iconNested.add(item.node);\n        iconLeft += item.width + textContentItemMargin;\n      });\n      textContentNested.add(iconNested);\n      textContentOffsetX += iconLeft;\n    }\n    // 文字\n    if (this._textData) {\n      const oldX = this._textData.node.attr('data-offsetx') || 0;\n      this._textData.node.attr('data-offsetx', textContentOffsetX)\n      // 修复safari浏览器节点存在图标时文字位置不正确的问题\n      ;\n      (this._textData.nodeContent || this._textData.node).x(-oldX) // 修复非富文本模式下同时存在图标和换行的文本时，被收起和展开时图标与文字距离会逐渐拉大的问题\n      .x(textContentOffsetX).y(0);\n      textContentNested.add(this._textData.node);\n      textContentOffsetX += this._textData.width + textContentItemMargin;\n    }\n    // 超链接\n    if (this._hyperlinkData) {\n      this._hyperlinkData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._hyperlinkData.height) / 2);\n      textContentNested.add(this._hyperlinkData.node);\n      textContentOffsetX += this._hyperlinkData.width + textContentItemMargin;\n    }\n    // 标签\n    let tagNested = new G();\n    if (this._tagData && this._tagData.length > 0) {\n      let tagLeft = 0;\n      this._tagData.forEach(item => {\n        item.node.x(textContentOffsetX + tagLeft).y((this._rectInfo.textContentHeight - item.height) / 2);\n        tagNested.add(item.node);\n        tagLeft += item.width + textContentItemMargin;\n      });\n      textContentNested.add(tagNested);\n      textContentOffsetX += tagLeft;\n    }\n    // 备注\n    if (this._noteData) {\n      this._noteData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._noteData.height) / 2);\n      textContentNested.add(this._noteData.node);\n      textContentOffsetX += this._noteData.width;\n    }\n    // 附件\n    if (this._attachmentData) {\n      this._attachmentData.node.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._attachmentData.height) / 2);\n      textContentNested.add(this._attachmentData.node);\n      textContentOffsetX += this._attachmentData.width;\n    }\n    // 自定义后置内容\n    if (this._postfixData) {\n      const foreignObject = createForeignObjectNode({\n        el: this._postfixData.el,\n        width: this._postfixData.width,\n        height: this._postfixData.height\n      });\n      foreignObject.x(textContentOffsetX).y((this._rectInfo.textContentHeight - this._postfixData.height) / 2);\n      textContentNested.add(foreignObject);\n      textContentOffsetX += this._postfixData.width;\n    }\n    // 文字内容整体\n    textContentNested.translate(width / 2 - textContentNested.bbox().width / 2, imgHeight + paddingY + (imgHeight > 0 && this._rectInfo.textContentHeight > 0 ? this.blockContentMargin : 0));\n    this.group.add(textContentNested);\n    addHoverNode();\n  }\n\n  // 给节点绑定事件\n  bindGroupEvent() {\n    // 单击事件，选中节点\n    this.group.on('click', e => {\n      this.mindMap.emit('node_click', this, e);\n      if (this.isMultipleChoice) {\n        e.stopPropagation();\n        this.isMultipleChoice = false;\n        return;\n      }\n      if (this.mindMap.opt.onlyOneEnableActiveNodeOnCooperate && this.userList.length > 0) {\n        return;\n      }\n      this.active(e);\n    });\n    this.group.on('mousedown', e => {\n      const {\n        readonly,\n        enableCtrlKeyNodeSelection,\n        useLeftKeySelectionRightKeyDrag\n      } = this.mindMap.opt;\n      // 只读模式不需要阻止冒泡\n      if (!readonly) {\n        if (this.isRoot) {\n          // 根节点，右键拖拽画布模式下不需要阻止冒泡\n          if (e.which === 3 && !useLeftKeySelectionRightKeyDrag) {\n            e.stopPropagation();\n          }\n        } else {\n          // 非根节点，且按下的是非鼠标中键，需要阻止事件冒泡\n          if (e.which !== 2) {\n            e.stopPropagation();\n          }\n        }\n      }\n      // 多选和取消多选\n      if ((e.ctrlKey || e.metaKey) && enableCtrlKeyNodeSelection) {\n        this.isMultipleChoice = true;\n        let isActive = this.getData('isActive');\n        if (!isActive) this.mindMap.emit('before_node_active', this, this.renderer.activeNodeList);\n        this.mindMap.renderer[isActive ? 'removeNodeFromActiveList' : 'addNodeToActiveList'](this, true);\n        this.renderer.emitNodeActiveEvent(isActive ? null : this);\n      }\n      this.mindMap.emit('node_mousedown', this, e);\n    });\n    this.group.on('mouseup', e => {\n      if (!this.isRoot && e.which !== 2 && !this.mindMap.opt.readonly) {\n        e.stopPropagation();\n      }\n      this.mindMap.emit('node_mouseup', this, e);\n    });\n    this.group.on('mouseenter', e => {\n      if (this.isDrag) return;\n      this._isMouseenter = true;\n      // 显示展开收起按钮\n      this.showExpandBtn();\n      if (this.isGeneralization) {\n        this.handleGeneralizationMouseenter();\n      }\n      this.mindMap.emit('node_mouseenter', this, e);\n    });\n    this.group.on('mouseleave', e => {\n      if (!this._isMouseenter) return;\n      this._isMouseenter = false;\n      this.hideExpandBtn();\n      if (this.isGeneralization) {\n        this.handleGeneralizationMouseleave();\n      }\n      this.mindMap.emit('node_mouseleave', this, e);\n    });\n    // 双击事件\n    this.group.on('dblclick', e => {\n      const {\n        readonly,\n        onlyOneEnableActiveNodeOnCooperate\n      } = this.mindMap.opt;\n      if (readonly || e.ctrlKey || e.metaKey) {\n        return;\n      }\n      e.stopPropagation();\n      if (onlyOneEnableActiveNodeOnCooperate && this.userList.length > 0) {\n        return;\n      }\n      this.mindMap.emit('node_dblclick', this, e);\n    });\n    // 右键菜单事件\n    this.group.on('contextmenu', e => {\n      const {\n        readonly,\n        useLeftKeySelectionRightKeyDrag\n      } = this.mindMap.opt;\n      // Mac上按住ctrl键点击鼠标左键不知为何触发的是contextmenu事件\n      if (readonly || e.ctrlKey) {\n        return;\n      }\n      e.stopPropagation();\n      e.preventDefault();\n      // 如果是多选节点结束，那么不要触发右键菜单事件\n      if (this.mindMap.select && !useLeftKeySelectionRightKeyDrag && this.mindMap.select.hasSelectRange()) {\n        return;\n      }\n      // 如果有且只有当前节点激活了，那么不需要重新激活\n      if (!(this.getData('isActive') && this.renderer.activeNodeList.length === 1)) {\n        this.renderer.clearActiveNodeList();\n        this.active(e);\n      }\n      this.mindMap.emit('node_contextmenu', e, this);\n    });\n  }\n\n  //  激活节点\n  active(e) {\n    if (this.mindMap.opt.readonly) {\n      return;\n    }\n    e && e.stopPropagation();\n    if (this.getData('isActive')) {\n      return;\n    }\n    this.mindMap.emit('before_node_active', this, this.renderer.activeNodeList);\n    this.renderer.clearActiveNodeList();\n    this.renderer.addNodeToActiveList(this, true);\n    this.renderer.emitNodeActiveEvent(this);\n  }\n\n  // 取消激活该节点\n  deactivate() {\n    this.mindMap.renderer.removeNodeFromActiveList(this);\n    this.mindMap.renderer.emitNodeActiveEvent();\n  }\n\n  //  更新节点\n  update() {\n    if (!this.group) {\n      return;\n    }\n    this.updateNodeActiveClass();\n    let {\n      alwaysShowExpandBtn\n    } = this.mindMap.opt;\n    const childrenLength = this.nodeData.children.length;\n    if (alwaysShowExpandBtn) {\n      // 需要移除展开收缩按钮\n      if (this._expandBtn && childrenLength <= 0) {\n        this.removeExpandBtn();\n      } else {\n        // 更新展开收起按钮\n        this.renderExpandBtn();\n      }\n    } else {\n      let {\n        isActive,\n        expand\n      } = this.getData();\n      // 展开状态且非激活状态，且当前鼠标不在它上面，才隐藏\n      if (childrenLength <= 0) {\n        this.removeExpandBtn();\n      } else if (expand && !isActive && !this._isMouseenter) {\n        this.hideExpandBtn();\n      } else {\n        this.showExpandBtn();\n      }\n    }\n    // 更新概要\n    this.renderGeneralization();\n    // 更新协同头像\n    if (this.updateUserListNode) this.updateUserListNode();\n    // 更新节点位置\n    let t = this.group.transform();\n    // // 如果上次不在可视区内，且本次也不在，那么直接返回\n    // let { left: ox, top: oy } = this.getNodePosInClient(\n    //   t.translateX,\n    //   t.translateY\n    // )\n    // let oldIsInClient =\n    //   ox > 0 && oy > 0 && ox < this.mindMap.width && oy < this.mindMap.height\n    // let { left: nx, top: ny } = this.getNodePosInClient(this.left, this.top)\n    // let newIsNotInClient =\n    //   nx + this.width < 0 ||\n    //   ny + this.height < 0 ||\n    //   nx > this.mindMap.width ||\n    //   ny > this.mindMap.height\n    // if (!oldIsInClient && newIsNotInClient) {\n    //   if (!this.isHide) {\n    //     this.isHide = true\n    //     this.group.hide()\n    //   }\n    //   return\n    // }\n    // // 如果当前是隐藏状态，那么先显示\n    // if (this.isHide) {\n    //   this.isHide = false\n    //   this.group.show()\n    // }\n    // 如果节点位置没有变化，则返回\n    if (this.left === t.translateX && this.top === t.translateY) return;\n    this.group.translate(this.left - t.translateX, this.top - t.translateY);\n  }\n\n  // 获取节点相当于画布的位置\n  getNodePosInClient(_left, _top) {\n    let drawTransform = this.mindMap.draw.transform();\n    let {\n      scaleX,\n      scaleY,\n      translateX,\n      translateY\n    } = drawTransform;\n    let left = _left * scaleX + translateX;\n    let top = _top * scaleY + translateY;\n    return {\n      left,\n      top\n    };\n  }\n\n  // 重新渲染节点，即重新创建节点内容、计算节点大小、计算节点内容布局、更新展开收起按钮，概要及位置\n  reRender() {\n    let sizeChange = this.getSize();\n    this.layout();\n    this.update();\n    return sizeChange;\n  }\n\n  // 更新节点激活状态\n  updateNodeActiveClass() {\n    if (!this.group) return;\n    const isActive = this.getData('isActive');\n    this.group[isActive ? 'addClass' : 'removeClass']('active');\n  }\n\n  // 根据是否激活更新节点\n  updateNodeByActive(active) {\n    if (this.group) {\n      // 切换激活状态，需要切换展开收起按钮的显隐\n      if (active) {\n        this.showExpandBtn();\n      } else {\n        this.hideExpandBtn();\n      }\n      this.updateNodeActiveClass();\n    }\n  }\n\n  //  递归渲染\n  render(callback = () => {}) {\n    // 节点\n    // 重新渲染连线\n    this.renderLine();\n    if (!this.group) {\n      // 创建组\n      this.group = new G();\n      this.group.addClass('smm-node');\n      this.group.css({\n        cursor: 'default'\n      });\n      this.bindGroupEvent();\n      this.nodeDraw.add(this.group);\n      this.layout();\n      this.update();\n    } else {\n      this.nodeDraw.add(this.group);\n      if (this.needLayout) {\n        this.needLayout = false;\n        this.layout();\n      }\n      this.updateExpandBtnPlaceholderRect();\n      this.update();\n    }\n    // 子节点\n    if (this.children && this.children.length && this.getData('expand') !== false) {\n      let index = 0;\n      this.children.forEach(item => {\n        item.render(() => {\n          index++;\n          if (index >= this.children.length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n    // 手动插入的节点立即获得焦点并且开启编辑模式\n    if (this.nodeData.inserting) {\n      delete this.nodeData.inserting;\n      this.active();\n      setTimeout(() => {\n        this.mindMap.emit('node_dblclick', this, null, true);\n      }, 0);\n    }\n  }\n\n  //  递归删除，只是从画布删除，节点容器还在，后续还可以重新插回画布\n  remove() {\n    if (!this.group) return;\n    this.group.remove();\n    this.removeGeneralization();\n    this.removeLine();\n    // 子节点\n    if (this.children && this.children.length) {\n      this.children.forEach(item => {\n        item.remove();\n      });\n    }\n  }\n\n  // 销毁节点，不但会从画布删除，而且原节点直接置空，后续无法再插回画布\n  destroy() {\n    if (!this.group) return;\n    if (this.emptyUser) {\n      this.emptyUser();\n    }\n    this.resetWhenDelete();\n    this.group.remove();\n    this.removeGeneralization();\n    this.removeLine();\n    this.group = null;\n    if (this.parent) {\n      this.parent.removeLine();\n    }\n    this.style.onRemove();\n  }\n\n  //  隐藏节点\n  hide() {\n    this.group.hide();\n    this.hideGeneralization();\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      this.parent._lines[index] && this.parent._lines[index].hide();\n      this._lines.forEach(item => {\n        item.hide();\n      });\n    }\n    // 子节点\n    if (this.children && this.children.length) {\n      this.children.forEach(item => {\n        item.hide();\n      });\n    }\n  }\n\n  //  显示节点\n  show() {\n    if (!this.group) {\n      return;\n    }\n    this.group.show();\n    this.showGeneralization();\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      this.parent._lines[index] && this.parent._lines[index].show();\n      this._lines.forEach(item => {\n        item.show();\n      });\n    }\n    // 子节点\n    if (this.children && this.children.length) {\n      this.children.forEach(item => {\n        item.show();\n      });\n    }\n  }\n\n  // 设置节点透明度\n  // 包括连接线和下级节点\n  setOpacity(val) {\n    // 自身及连线\n    this.group.opacity(val);\n    this._lines.forEach(line => {\n      line.opacity(val);\n    });\n    // 子节点\n    this.children.forEach(item => {\n      item.setOpacity(val);\n    });\n    // 概要节点\n    this.setGeneralizationOpacity(val);\n  }\n\n  // 隐藏子节点\n  hideChildren() {\n    this._lines.forEach(item => {\n      item.hide();\n    });\n    if (this.children && this.children.length) {\n      this.children.forEach(item => {\n        item.hide();\n      });\n    }\n  }\n\n  // 显示子节点\n  showChildren() {\n    this._lines.forEach(item => {\n      item.show();\n    });\n    if (this.children && this.children.length) {\n      this.children.forEach(item => {\n        item.show();\n      });\n    }\n  }\n\n  // 被拖拽中\n  startDrag() {\n    this.isDrag = true;\n    this.group.addClass('smm-node-dragging');\n  }\n\n  // 拖拽结束\n  endDrag() {\n    this.isDrag = false;\n    this.group.removeClass('smm-node-dragging');\n  }\n\n  //  连线\n  renderLine(deep = false) {\n    if (this.getData('expand') === false) {\n      return;\n    }\n    let childrenLen = this.nodeData.children.length;\n    // 切换为鱼骨结构时，清空根节点和二级节点的连线\n    if (this.mindMap.opt.layout === CONSTANTS.LAYOUT.FISHBONE && (this.isRoot || this.layerIndex === 1)) {\n      childrenLen = 0;\n    }\n    if (childrenLen > this._lines.length) {\n      // 创建缺少的线\n      new Array(childrenLen - this._lines.length).fill(0).forEach(() => {\n        this._lines.push(this.lineDraw.path());\n      });\n    } else if (childrenLen < this._lines.length) {\n      // 删除多余的线\n      this._lines.slice(childrenLen).forEach(line => {\n        line.remove();\n      });\n      this._lines = this._lines.slice(0, childrenLen);\n    }\n    // 画线\n    this.renderer.layout.renderLine(this, this._lines, (...args) => {\n      // 添加样式\n      this.styleLine(...args);\n    }, this.style.getStyle('lineStyle', true));\n    // 子级的连线也需要更新\n    if (deep && this.children && this.children.length > 0) {\n      this.children.forEach(item => {\n        item.renderLine(deep);\n      });\n    }\n  }\n\n  //  获取节点形状\n  getShape() {\n    // 节点使用功能横线风格的话不支持设置形状，直接使用默认的矩形\n    return this.mindMap.themeConfig.nodeUseLineStyle ? CONSTANTS.SHAPE.RECTANGLE : this.style.getStyle('shape', false, false);\n  }\n\n  //  检查节点是否存在自定义数据\n  hasCustomPosition() {\n    return this.customLeft !== undefined && this.customTop !== undefined;\n  }\n\n  //  检查节点是否存在自定义位置的祖先节点，包含自身\n  ancestorHasCustomPosition() {\n    let node = this;\n    while (node) {\n      if (node.hasCustomPosition()) {\n        return true;\n      }\n      node = node.parent;\n    }\n    return false;\n  }\n\n  //  检查是否存在有概要的祖先节点\n  ancestorHasGeneralization() {\n    let node = this.parent;\n    while (node) {\n      if (node.checkHasGeneralization()) {\n        return true;\n      }\n      node = node.parent;\n    }\n    return false;\n  }\n\n  //  添加子节点\n  addChildren(node) {\n    this.children.push(node);\n  }\n\n  //  设置连线样式\n  styleLine(line, childNode, enableMarker) {\n    const width = childNode.getSelfInhertStyle('lineWidth') || childNode.getStyle('lineWidth', true);\n    const color = childNode.getSelfInhertStyle('lineColor') || this.getRainbowLineColor(childNode) || childNode.getStyle('lineColor', true);\n    const dasharray = childNode.getSelfInhertStyle('lineDasharray') || childNode.getStyle('lineDasharray', true);\n    this.style.line(line, {\n      width,\n      color,\n      dasharray\n    }, enableMarker, childNode);\n  }\n\n  // 获取彩虹线条颜色\n  getRainbowLineColor(node) {\n    return this.mindMap.rainbowLines ? this.mindMap.rainbowLines.getNodeColor(node) : '';\n  }\n\n  //  移除连线\n  removeLine() {\n    this._lines.forEach(line => {\n      line.remove();\n    });\n    this._lines = [];\n  }\n\n  //  检测当前节点是否是某个节点的祖先节点\n  isAncestor(node) {\n    if (this.uid === node.uid) {\n      return false;\n    }\n    let parent = node.parent;\n    while (parent) {\n      if (this.uid === parent.uid) {\n        return true;\n      }\n      parent = parent.parent;\n    }\n    return false;\n  }\n\n  // 检查当前节点是否是某个节点的父节点\n  isParent(node) {\n    if (this.uid === node.uid) {\n      return false;\n    }\n    const parent = node.parent;\n    if (parent && this.uid === parent.uid) {\n      return true;\n    }\n    return false;\n  }\n\n  //  检测当前节点是否是某个节点的兄弟节点\n  isBrother(node) {\n    if (!this.parent || this.uid === node.uid) {\n      return false;\n    }\n    return this.parent.children.find(item => {\n      return item.uid === node.uid;\n    });\n  }\n\n  // 获取该节点在兄弟节点列表中的索引\n  getIndexInBrothers() {\n    return this.parent && this.parent.children ? this.parent.children.findIndex(item => {\n      return item.uid === this.uid;\n    }) : -1;\n  }\n\n  //  获取padding值\n  getPaddingVale() {\n    let {\n      isActive\n    } = this.getData();\n    return {\n      paddingX: this.getStyle('paddingX', true, isActive),\n      paddingY: this.getStyle('paddingY', true, isActive)\n    };\n  }\n\n  //  获取某个样式\n  getStyle(prop, root) {\n    let v = this.style.merge(prop, root);\n    return v === undefined ? '' : v;\n  }\n\n  //  获取自定义样式\n  getSelfStyle(prop) {\n    return this.style.getSelfStyle(prop);\n  }\n\n  //   获取最近一个存在自身自定义样式的祖先节点的自定义样式\n  getParentSelfStyle(prop) {\n    if (this.parent) {\n      return this.parent.getSelfStyle(prop) || this.parent.getParentSelfStyle(prop);\n    }\n    return null;\n  }\n\n  //  获取自身可继承的自定义样式\n  getSelfInhertStyle(prop) {\n    return this.getSelfStyle(prop) ||\n    // 自身\n    this.getParentSelfStyle(prop); // 父级\n  }\n\n  // 获取节点非节点状态的边框大小\n  getBorderWidth() {\n    return this.style.merge('borderWidth', false) || 0;\n  }\n\n  //  获取数据\n  getData(key) {\n    return key ? this.nodeData.data[key] : this.nodeData.data;\n  }\n\n  // 获取该节点的纯数据，即不包含对节点实例的引用\n  getPureData(removeActiveState = true, removeId = false) {\n    return copyNodeTree({}, this, removeActiveState, removeId);\n  }\n\n  // 获取祖先节点列表\n  getAncestorNodes() {\n    const list = [];\n    let parent = this.parent;\n    while (parent) {\n      list.unshift(parent);\n      parent = parent.parent;\n    }\n    return list;\n  }\n\n  // 是否存在自定义样式\n  hasCustomStyle() {\n    return this.style.hasCustomStyle();\n  }\n\n  // 获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置是相对于浏览器窗口左上角的位置\n  getRect() {\n    return this.group.rbox();\n  }\n\n  // 获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置信息相对于画布\n  getRectInSvg() {\n    let {\n      scaleX,\n      scaleY,\n      translateX,\n      translateY\n    } = this.mindMap.draw.transform();\n    let {\n      left,\n      top,\n      width,\n      height\n    } = this;\n    let right = (left + width) * scaleX + translateX;\n    let bottom = (top + height) * scaleY + translateY;\n    left = left * scaleX + translateX;\n    top = top * scaleY + translateY;\n    return {\n      left,\n      right,\n      top,\n      bottom,\n      width: width * scaleX,\n      height: height * scaleY\n    };\n  }\n\n  // 高亮节点\n  highlight() {\n    if (this.group) this.group.addClass('smm-node-highlight');\n  }\n\n  // 取消高亮节点\n  closeHighlight() {\n    if (this.group) this.group.removeClass('smm-node-highlight');\n  }\n}\nexport default Node;","map":{"version":3,"names":["Style","Shape","G","Rect","nodeGeneralizationMethods","nodeExpandBtnMethods","nodeCommandWrapsMethods","nodeCreateContentsMethods","nodeExpandBtnPlaceholderRectMethods","nodeCooperateMethods","CONSTANTS","copyNodeTree","createForeignObjectNode","Node","constructor","opt","nodeData","handleData","data","uid","mindMap","renderer","draw","nodeDraw","lineDraw","style","shapeInstance","shapePadding","paddingX","paddingY","isRoot","undefined","isGeneralization","generalizationBelongNode","layerIndex","width","height","_left","left","_top","top","customLeft","customTop","isDrag","parent","children","userList","group","shapeNode","hoverNode","_customNodeContent","_imgData","_iconData","_textData","_hyperlinkData","_tagData","_noteData","noteEl","noteContentIsShow","_attachmentData","_prefixData","_postfixData","_expandBtn","_lastExpandBtnType","_showExpandBtn","_openExpandNode","_closeExpandNode","_fillExpandNode","_userListGroup","_lines","_generalizationList","_unVisibleRectRegionNode","_isMouseenter","_rectInfo","imgContentWidth","imgContentHeight","textContentWidth","textContentHeight","_generalizationNodeWidth","_generalizationNodeHeight","textContentItemMargin","textContentMargin","blockContentMargin","imgTextMargin","expandBtnSize","isMultipleChoice","needLayout","isHide","Object","keys","forEach","item","bind","cooperate","getSize","val","reset","resetWhenDelete","expand","isActive","createNodeData","isUseCustomNodeContent","customCreateNodeContent","createNodePrefixContent","createNodePostfixContent","setAttribute","createImgNode","createIconNode","createTextNode","createHyperlinkNode","createTagNode","createNoteNode","createAttachmentNode","getData","updateGeneralization","getNodeRect","changed","rect","measureCustomNodeContentSize","Math","max","length","reduce","sum","cur","margin","getPaddingVale","_width","_height","shapePaddingX","shapePaddingY","getShapePadding","borderWidth","getBorderWidth","layout","clear","hoverRectPadding","halfBorderWidth","createShape","addClass","translate","shape","add","renderExpandBtnPlaceholderRect","createUserListNode","addHoverNode","size","x","y","foreignObject","el","imgHeight","node","cx","textContentNested","textContentOffsetX","iconNested","iconLeft","oldX","attr","nodeContent","tagNested","tagLeft","bbox","bindGroupEvent","on","e","emit","stopPropagation","onlyOneEnableActiveNodeOnCooperate","active","readonly","enableCtrlKeyNodeSelection","useLeftKeySelectionRightKeyDrag","which","ctrlKey","metaKey","activeNodeList","emitNodeActiveEvent","showExpandBtn","handleGeneralizationMouseenter","hideExpandBtn","handleGeneralizationMouseleave","preventDefault","select","hasSelectRange","clearActiveNodeList","addNodeToActiveList","deactivate","removeNodeFromActiveList","update","updateNodeActiveClass","alwaysShowExpandBtn","childrenLength","removeExpandBtn","renderExpandBtn","renderGeneralization","updateUserListNode","t","transform","translateX","translateY","getNodePosInClient","drawTransform","scaleX","scaleY","reRender","sizeChange","updateNodeByActive","render","callback","renderLine","css","cursor","updateExpandBtnPlaceholderRect","index","inserting","setTimeout","remove","removeGeneralization","removeLine","destroy","emptyUser","onRemove","hide","hideGeneralization","indexOf","show","showGeneralization","setOpacity","opacity","line","setGeneralizationOpacity","hideChildren","showChildren","startDrag","endDrag","removeClass","deep","childrenLen","LAYOUT","FISHBONE","Array","fill","push","path","slice","args","styleLine","getStyle","getShape","themeConfig","nodeUseLineStyle","SHAPE","RECTANGLE","hasCustomPosition","ancestorHasCustomPosition","ancestorHasGeneralization","checkHasGeneralization","addChildren","childNode","enableMarker","getSelfInhertStyle","color","getRainbowLineColor","dasharray","rainbowLines","getNodeColor","isAncestor","isParent","isBrother","find","getIndexInBrothers","findIndex","prop","root","v","merge","getSelfStyle","getParentSelfStyle","key","getPureData","removeActiveState","removeId","getAncestorNodes","list","unshift","hasCustomStyle","getRect","rbox","getRectInSvg","right","bottom","highlight","closeHighlight"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/node/Node.js"],"sourcesContent":["import Style from './Style'\r\nimport Shape from './Shape'\r\nimport { G, Rect } from '@svgdotjs/svg.js'\r\nimport nodeGeneralizationMethods from './nodeGeneralization'\r\nimport nodeExpandBtnMethods from './nodeExpandBtn'\r\nimport nodeCommandWrapsMethods from './nodeCommandWraps'\r\nimport nodeCreateContentsMethods from './nodeCreateContents'\r\nimport nodeExpandBtnPlaceholderRectMethods from './nodeExpandBtnPlaceholderRect'\r\nimport nodeCooperateMethods from './nodeCooperate'\r\nimport { CONSTANTS } from '../../../constants/constant'\r\nimport { copyNodeTree, createForeignObjectNode } from '../../../utils/index'\r\n\r\n//  节点类\r\nclass Node {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    // 节点数据\r\n    this.nodeData = this.handleData(opt.data || {})\r\n    // uid\r\n    this.uid = opt.uid\r\n    // 控制实例\r\n    this.mindMap = opt.mindMap\r\n    // 渲染实例\r\n    this.renderer = opt.renderer\r\n    // 渲染器\r\n    this.draw = this.mindMap.draw\r\n    this.nodeDraw = this.mindMap.nodeDraw\r\n    this.lineDraw = this.mindMap.lineDraw\r\n    // 样式实例\r\n    this.style = new Style(this)\r\n    // 形状实例\r\n    this.shapeInstance = new Shape(this)\r\n    this.shapePadding = {\r\n      paddingX: 0,\r\n      paddingY: 0\r\n    }\r\n    // 是否是根节点\r\n    this.isRoot = opt.isRoot === undefined ? false : opt.isRoot\r\n    // 是否是概要节点\r\n    this.isGeneralization =\r\n      opt.isGeneralization === undefined ? false : opt.isGeneralization\r\n    this.generalizationBelongNode = null\r\n    // 节点层级\r\n    this.layerIndex = opt.layerIndex === undefined ? 0 : opt.layerIndex\r\n    // 节点宽\r\n    this.width = opt.width || 0\r\n    // 节点高\r\n    this.height = opt.height || 0\r\n    // left\r\n    this._left = opt.left || 0\r\n    // top\r\n    this._top = opt.top || 0\r\n    // 自定义位置\r\n    this.customLeft = opt.data.data.customLeft || undefined\r\n    this.customTop = opt.data.data.customTop || undefined\r\n    // 是否正在拖拽中\r\n    this.isDrag = false\r\n    // 父节点\r\n    this.parent = opt.parent || null\r\n    // 子节点\r\n    this.children = opt.children || []\r\n    // 当前同时操作该节点的用户列表\r\n    this.userList = []\r\n    // 节点内容的容器\r\n    this.group = null\r\n    this.shapeNode = null // 节点形状节点\r\n    this.hoverNode = null // 节点hover和激活的节点\r\n    // 节点内容对象\r\n    this._customNodeContent = null\r\n    this._imgData = null\r\n    this._iconData = null\r\n    this._textData = null\r\n    this._hyperlinkData = null\r\n    this._tagData = null\r\n    this._noteData = null\r\n    this.noteEl = null\r\n    this.noteContentIsShow = false\r\n    this._attachmentData = null\r\n    this._prefixData = null\r\n    this._postfixData = null\r\n    this._expandBtn = null\r\n    this._lastExpandBtnType = null\r\n    this._showExpandBtn = false\r\n    this._openExpandNode = null\r\n    this._closeExpandNode = null\r\n    this._fillExpandNode = null\r\n    this._userListGroup = null\r\n    this._lines = []\r\n    this._generalizationList = []\r\n    this._unVisibleRectRegionNode = null\r\n    this._isMouseenter = false\r\n    // 尺寸信息\r\n    this._rectInfo = {\r\n      imgContentWidth: 0,\r\n      imgContentHeight: 0,\r\n      textContentWidth: 0,\r\n      textContentHeight: 0\r\n    }\r\n    // 概要节点的宽高\r\n    this._generalizationNodeWidth = 0\r\n    this._generalizationNodeHeight = 0\r\n    // 各种文字信息的间距\r\n    this.textContentItemMargin = this.mindMap.opt.textContentMargin\r\n    // 图片和文字节点的间距\r\n    this.blockContentMargin = this.mindMap.opt.imgTextMargin\r\n    // 展开收缩按钮尺寸\r\n    this.expandBtnSize = this.mindMap.opt.expandBtnSize\r\n    // 是否是多选节点\r\n    this.isMultipleChoice = false\r\n    // 是否需要重新layout\r\n    this.needLayout = false\r\n    // 当前是否是隐藏状态\r\n    this.isHide = false\r\n    // 概要相关方法\r\n    Object.keys(nodeGeneralizationMethods).forEach(item => {\r\n      this[item] = nodeGeneralizationMethods[item].bind(this)\r\n    })\r\n    // 展开收起按钮相关方法\r\n    Object.keys(nodeExpandBtnMethods).forEach(item => {\r\n      this[item] = nodeExpandBtnMethods[item].bind(this)\r\n    })\r\n    // 展开收起按钮占位元素相关方法\r\n    Object.keys(nodeExpandBtnPlaceholderRectMethods).forEach(item => {\r\n      this[item] = nodeExpandBtnPlaceholderRectMethods[item].bind(this)\r\n    })\r\n    // 命令的相关方法\r\n    Object.keys(nodeCommandWrapsMethods).forEach(item => {\r\n      this[item] = nodeCommandWrapsMethods[item].bind(this)\r\n    })\r\n    // 创建节点内容的相关方法\r\n    Object.keys(nodeCreateContentsMethods).forEach(item => {\r\n      this[item] = nodeCreateContentsMethods[item].bind(this)\r\n    })\r\n    // 协同相关\r\n    if (this.mindMap.cooperate) {\r\n      Object.keys(nodeCooperateMethods).forEach(item => {\r\n        this[item] = nodeCooperateMethods[item].bind(this)\r\n      })\r\n    }\r\n    // 初始化\r\n    this.getSize()\r\n  }\r\n\r\n  // 支持自定义位置\r\n  get left() {\r\n    return this.customLeft || this._left\r\n  }\r\n\r\n  set left(val) {\r\n    this._left = val\r\n  }\r\n\r\n  get top() {\r\n    return this.customTop || this._top\r\n  }\r\n\r\n  set top(val) {\r\n    this._top = val\r\n  }\r\n\r\n  //  复位部分布局时会重新设置的数据\r\n  reset() {\r\n    this.children = []\r\n    this.parent = null\r\n    this.isRoot = false\r\n    this.layerIndex = 0\r\n    this.left = 0\r\n    this.top = 0\r\n  }\r\n\r\n  // 节点被删除时需要复位的数据\r\n  resetWhenDelete() {\r\n    this._isMouseenter = false\r\n  }\r\n\r\n  //  处理数据\r\n  handleData(data) {\r\n    data.data.expand = data.data.expand === false ? false : true\r\n    data.data.isActive = data.data.isActive === true ? true : false\r\n    data.children = data.children || []\r\n    return data\r\n  }\r\n\r\n  //  创建节点的各个内容对象数据\r\n  createNodeData() {\r\n    // 自定义节点内容\r\n    let {\r\n      isUseCustomNodeContent,\r\n      customCreateNodeContent,\r\n      createNodePrefixContent,\r\n      createNodePostfixContent\r\n    } = this.mindMap.opt\r\n    if (isUseCustomNodeContent && customCreateNodeContent) {\r\n      this._customNodeContent = customCreateNodeContent(this)\r\n    }\r\n    // 如果没有返回内容，那么还是使用内置的节点内容\r\n    if (this._customNodeContent) {\r\n      this._customNodeContent.setAttribute(\r\n        'xmlns',\r\n        'http://www.w3.org/1999/xhtml'\r\n      )\r\n      return\r\n    }\r\n    this._imgData = this.createImgNode()\r\n    this._iconData = this.createIconNode()\r\n    this._textData = this.createTextNode()\r\n    this._hyperlinkData = this.createHyperlinkNode()\r\n    this._tagData = this.createTagNode()\r\n    this._noteData = this.createNoteNode()\r\n    this._attachmentData = this.createAttachmentNode()\r\n    this._prefixData = createNodePrefixContent\r\n      ? createNodePrefixContent(this)\r\n      : null\r\n    this._postfixData = createNodePostfixContent\r\n      ? createNodePostfixContent(this)\r\n      : null\r\n  }\r\n\r\n  //  计算节点的宽高\r\n  getSize() {\r\n    this.customLeft = this.getData('customLeft') || undefined\r\n    this.customTop = this.getData('customTop') || undefined\r\n    this.updateGeneralization()\r\n    this.createNodeData()\r\n    let { width, height } = this.getNodeRect()\r\n    // 判断节点尺寸是否有变化\r\n    let changed = this.width !== width || this.height !== height\r\n    this.width = width\r\n    this.height = height\r\n    return changed\r\n  }\r\n\r\n  //  计算节点尺寸信息\r\n  getNodeRect() {\r\n    // 自定义节点内容\r\n    if (this.isUseCustomNodeContent()) {\r\n      let rect = this.measureCustomNodeContentSize(this._customNodeContent)\r\n      return {\r\n        width: rect.width,\r\n        height: rect.height\r\n      }\r\n    }\r\n    // 宽高\r\n    let imgContentWidth = 0\r\n    let imgContentHeight = 0\r\n    let textContentWidth = 0\r\n    let textContentHeight = 0\r\n    // 存在图片\r\n    if (this._imgData) {\r\n      this._rectInfo.imgContentWidth = imgContentWidth = this._imgData.width\r\n      this._rectInfo.imgContentHeight = imgContentHeight = this._imgData.height\r\n    }\r\n    // 自定义前置内容\r\n    if (this._prefixData) {\r\n      textContentWidth += this._prefixData.width\r\n      textContentHeight = Math.max(textContentHeight, this._prefixData.height)\r\n    }\r\n    // 图标\r\n    if (this._iconData.length > 0) {\r\n      textContentWidth += this._iconData.reduce((sum, cur) => {\r\n        textContentHeight = Math.max(textContentHeight, cur.height)\r\n        return (sum += cur.width + this.textContentItemMargin)\r\n      }, 0)\r\n    }\r\n    // 文字\r\n    if (this._textData) {\r\n      textContentWidth += this._textData.width\r\n      textContentHeight = Math.max(textContentHeight, this._textData.height)\r\n    }\r\n    // 超链接\r\n    if (this._hyperlinkData) {\r\n      textContentWidth += this._hyperlinkData.width\r\n      textContentHeight = Math.max(\r\n        textContentHeight,\r\n        this._hyperlinkData.height\r\n      )\r\n    }\r\n    // 标签\r\n    if (this._tagData.length > 0) {\r\n      textContentWidth += this._tagData.reduce((sum, cur) => {\r\n        textContentHeight = Math.max(textContentHeight, cur.height)\r\n        return (sum += cur.width + this.textContentItemMargin)\r\n      }, 0)\r\n    }\r\n    // 备注\r\n    if (this._noteData) {\r\n      textContentWidth += this._noteData.width\r\n      textContentHeight = Math.max(textContentHeight, this._noteData.height)\r\n    }\r\n    // 附件\r\n    if (this._attachmentData) {\r\n      textContentWidth += this._attachmentData.width\r\n      textContentHeight = Math.max(\r\n        textContentHeight,\r\n        this._attachmentData.height\r\n      )\r\n    }\r\n    // 自定义后置内容\r\n    if (this._postfixData) {\r\n      textContentWidth += this._postfixData.width\r\n      textContentHeight = Math.max(textContentHeight, this._postfixData.height)\r\n    }\r\n    // 文字内容部分的尺寸\r\n    this._rectInfo.textContentWidth = textContentWidth\r\n    this._rectInfo.textContentHeight = textContentHeight\r\n    // 间距\r\n    let margin =\r\n      imgContentHeight > 0 && textContentHeight > 0\r\n        ? this.blockContentMargin\r\n        : 0\r\n    let { paddingX, paddingY } = this.getPaddingVale()\r\n    // 纯内容宽高\r\n    let _width = Math.max(imgContentWidth, textContentWidth)\r\n    let _height = imgContentHeight + textContentHeight\r\n    // 计算节点形状需要的附加内边距\r\n    let { paddingX: shapePaddingX, paddingY: shapePaddingY } =\r\n      this.shapeInstance.getShapePadding(_width, _height, paddingX, paddingY)\r\n    this.shapePadding.paddingX = shapePaddingX\r\n    this.shapePadding.paddingY = shapePaddingY\r\n    // 边框宽度，因为边框是以中线向两端发散，所以边框会超出节点\r\n    const borderWidth = this.getBorderWidth()\r\n    return {\r\n      width: _width + paddingX * 2 + shapePaddingX * 2 + borderWidth,\r\n      height: _height + paddingY * 2 + margin + shapePaddingY * 2 + borderWidth\r\n    }\r\n  }\r\n\r\n  //  定位节点内容\r\n  layout() {\r\n    // 清除之前的内容\r\n    this.group.clear()\r\n    const { hoverRectPadding } = this.mindMap.opt\r\n    let { width, height, textContentItemMargin } = this\r\n    let { paddingY } = this.getPaddingVale()\r\n    const halfBorderWidth = this.getBorderWidth() / 2\r\n    paddingY += this.shapePadding.paddingY + halfBorderWidth\r\n    // 节点形状\r\n    this.shapeNode = this.shapeInstance.createShape()\r\n    this.shapeNode.addClass('smm-node-shape')\r\n    this.shapeNode.translate(halfBorderWidth, halfBorderWidth)\r\n    this.style.shape(this.shapeNode)\r\n    this.group.add(this.shapeNode)\r\n    // 渲染一个隐藏的矩形区域，用来触发展开收起按钮的显示\r\n    this.renderExpandBtnPlaceholderRect()\r\n    // 创建协同头像节点\r\n    if (this.createUserListNode) this.createUserListNode()\r\n    // 概要节点添加一个带所属节点id的类名\r\n    if (this.isGeneralization && this.generalizationBelongNode) {\r\n      this.group.addClass('generalization_' + this.generalizationBelongNode.uid)\r\n    }\r\n    // 激活hover和激活边框\r\n    const addHoverNode = () => {\r\n      this.hoverNode = new Rect()\r\n        .size(width + hoverRectPadding * 2, height + hoverRectPadding * 2)\r\n        .x(-hoverRectPadding)\r\n        .y(-hoverRectPadding)\r\n      this.hoverNode.addClass('smm-hover-node')\r\n      this.style.hoverNode(this.hoverNode, width, height)\r\n      this.group.add(this.hoverNode)\r\n    }\r\n    // 如果存在自定义节点内容，那么使用自定义节点内容\r\n    if (this.isUseCustomNodeContent()) {\r\n      const foreignObject = createForeignObjectNode({\r\n        el: this._customNodeContent,\r\n        width,\r\n        height\r\n      })\r\n      this.group.add(foreignObject)\r\n      addHoverNode()\r\n      return\r\n    }\r\n    // 图片节点\r\n    let imgHeight = 0\r\n    if (this._imgData) {\r\n      imgHeight = this._imgData.height\r\n      this.group.add(this._imgData.node)\r\n      this._imgData.node.cx(width / 2).y(paddingY)\r\n    }\r\n    // 内容节点\r\n    let textContentNested = new G()\r\n    let textContentOffsetX = 0\r\n    // 自定义前置内容\r\n    if (this._prefixData) {\r\n      const foreignObject = createForeignObjectNode({\r\n        el: this._prefixData.el,\r\n        width: this._prefixData.width,\r\n        height: this._prefixData.height\r\n      })\r\n      foreignObject\r\n        .x(textContentOffsetX)\r\n        .y((this._rectInfo.textContentHeight - this._prefixData.height) / 2)\r\n      textContentNested.add(foreignObject)\r\n      textContentOffsetX += this._prefixData.width + textContentItemMargin\r\n    }\r\n    // icon\r\n    let iconNested = new G()\r\n    if (this._iconData && this._iconData.length > 0) {\r\n      let iconLeft = 0\r\n      this._iconData.forEach(item => {\r\n        item.node\r\n          .x(textContentOffsetX + iconLeft)\r\n          .y((this._rectInfo.textContentHeight - item.height) / 2)\r\n        iconNested.add(item.node)\r\n        iconLeft += item.width + textContentItemMargin\r\n      })\r\n      textContentNested.add(iconNested)\r\n      textContentOffsetX += iconLeft\r\n    }\r\n    // 文字\r\n    if (this._textData) {\r\n      const oldX = this._textData.node.attr('data-offsetx') || 0\r\n      this._textData.node.attr('data-offsetx', textContentOffsetX)\r\n      // 修复safari浏览器节点存在图标时文字位置不正确的问题\r\n      ;(this._textData.nodeContent || this._textData.node)\r\n        .x(-oldX) // 修复非富文本模式下同时存在图标和换行的文本时，被收起和展开时图标与文字距离会逐渐拉大的问题\r\n        .x(textContentOffsetX)\r\n        .y(0)\r\n      textContentNested.add(this._textData.node)\r\n      textContentOffsetX += this._textData.width + textContentItemMargin\r\n    }\r\n    // 超链接\r\n    if (this._hyperlinkData) {\r\n      this._hyperlinkData.node\r\n        .x(textContentOffsetX)\r\n        .y((this._rectInfo.textContentHeight - this._hyperlinkData.height) / 2)\r\n      textContentNested.add(this._hyperlinkData.node)\r\n      textContentOffsetX += this._hyperlinkData.width + textContentItemMargin\r\n    }\r\n    // 标签\r\n    let tagNested = new G()\r\n    if (this._tagData && this._tagData.length > 0) {\r\n      let tagLeft = 0\r\n      this._tagData.forEach(item => {\r\n        item.node\r\n          .x(textContentOffsetX + tagLeft)\r\n          .y((this._rectInfo.textContentHeight - item.height) / 2)\r\n        tagNested.add(item.node)\r\n        tagLeft += item.width + textContentItemMargin\r\n      })\r\n      textContentNested.add(tagNested)\r\n      textContentOffsetX += tagLeft\r\n    }\r\n    // 备注\r\n    if (this._noteData) {\r\n      this._noteData.node\r\n        .x(textContentOffsetX)\r\n        .y((this._rectInfo.textContentHeight - this._noteData.height) / 2)\r\n      textContentNested.add(this._noteData.node)\r\n      textContentOffsetX += this._noteData.width\r\n    }\r\n    // 附件\r\n    if (this._attachmentData) {\r\n      this._attachmentData.node\r\n        .x(textContentOffsetX)\r\n        .y((this._rectInfo.textContentHeight - this._attachmentData.height) / 2)\r\n      textContentNested.add(this._attachmentData.node)\r\n      textContentOffsetX += this._attachmentData.width\r\n    }\r\n    // 自定义后置内容\r\n    if (this._postfixData) {\r\n      const foreignObject = createForeignObjectNode({\r\n        el: this._postfixData.el,\r\n        width: this._postfixData.width,\r\n        height: this._postfixData.height\r\n      })\r\n      foreignObject\r\n        .x(textContentOffsetX)\r\n        .y((this._rectInfo.textContentHeight - this._postfixData.height) / 2)\r\n      textContentNested.add(foreignObject)\r\n      textContentOffsetX += this._postfixData.width\r\n    }\r\n    // 文字内容整体\r\n    textContentNested.translate(\r\n      width / 2 - textContentNested.bbox().width / 2,\r\n      imgHeight +\r\n        paddingY +\r\n        (imgHeight > 0 && this._rectInfo.textContentHeight > 0\r\n          ? this.blockContentMargin\r\n          : 0)\r\n    )\r\n    this.group.add(textContentNested)\r\n    addHoverNode()\r\n  }\r\n\r\n  // 给节点绑定事件\r\n  bindGroupEvent() {\r\n    // 单击事件，选中节点\r\n    this.group.on('click', e => {\r\n      this.mindMap.emit('node_click', this, e)\r\n      if (this.isMultipleChoice) {\r\n        e.stopPropagation()\r\n        this.isMultipleChoice = false\r\n        return\r\n      }\r\n      if (\r\n        this.mindMap.opt.onlyOneEnableActiveNodeOnCooperate &&\r\n        this.userList.length > 0\r\n      ) {\r\n        return\r\n      }\r\n      this.active(e)\r\n    })\r\n    this.group.on('mousedown', e => {\r\n      const {\r\n        readonly,\r\n        enableCtrlKeyNodeSelection,\r\n        useLeftKeySelectionRightKeyDrag\r\n      } = this.mindMap.opt\r\n      // 只读模式不需要阻止冒泡\r\n      if (!readonly) {\r\n        if (this.isRoot) {\r\n          // 根节点，右键拖拽画布模式下不需要阻止冒泡\r\n          if (e.which === 3 && !useLeftKeySelectionRightKeyDrag) {\r\n            e.stopPropagation()\r\n          }\r\n        } else {\r\n          // 非根节点，且按下的是非鼠标中键，需要阻止事件冒泡\r\n          if (e.which !== 2) {\r\n            e.stopPropagation()\r\n          }\r\n        }\r\n      }\r\n      // 多选和取消多选\r\n      if ((e.ctrlKey || e.metaKey) && enableCtrlKeyNodeSelection) {\r\n        this.isMultipleChoice = true\r\n        let isActive = this.getData('isActive')\r\n        if (!isActive)\r\n          this.mindMap.emit(\r\n            'before_node_active',\r\n            this,\r\n            this.renderer.activeNodeList\r\n          )\r\n        this.mindMap.renderer[\r\n          isActive ? 'removeNodeFromActiveList' : 'addNodeToActiveList'\r\n        ](this, true)\r\n        this.renderer.emitNodeActiveEvent(isActive ? null : this)\r\n      }\r\n      this.mindMap.emit('node_mousedown', this, e)\r\n    })\r\n    this.group.on('mouseup', e => {\r\n      if (!this.isRoot && e.which !== 2 && !this.mindMap.opt.readonly) {\r\n        e.stopPropagation()\r\n      }\r\n      this.mindMap.emit('node_mouseup', this, e)\r\n    })\r\n    this.group.on('mouseenter', e => {\r\n      if (this.isDrag) return\r\n      this._isMouseenter = true\r\n      // 显示展开收起按钮\r\n      this.showExpandBtn()\r\n      if (this.isGeneralization) {\r\n        this.handleGeneralizationMouseenter()\r\n      }\r\n      this.mindMap.emit('node_mouseenter', this, e)\r\n    })\r\n    this.group.on('mouseleave', e => {\r\n      if (!this._isMouseenter) return\r\n      this._isMouseenter = false\r\n      this.hideExpandBtn()\r\n      if (this.isGeneralization) {\r\n        this.handleGeneralizationMouseleave()\r\n      }\r\n      this.mindMap.emit('node_mouseleave', this, e)\r\n    })\r\n    // 双击事件\r\n    this.group.on('dblclick', e => {\r\n      const { readonly, onlyOneEnableActiveNodeOnCooperate } = this.mindMap.opt\r\n      if (readonly || e.ctrlKey || e.metaKey) {\r\n        return\r\n      }\r\n      e.stopPropagation()\r\n      if (onlyOneEnableActiveNodeOnCooperate && this.userList.length > 0) {\r\n        return\r\n      }\r\n      this.mindMap.emit('node_dblclick', this, e)\r\n    })\r\n    // 右键菜单事件\r\n    this.group.on('contextmenu', e => {\r\n      const { readonly, useLeftKeySelectionRightKeyDrag } = this.mindMap.opt\r\n      // Mac上按住ctrl键点击鼠标左键不知为何触发的是contextmenu事件\r\n      if (readonly || e.ctrlKey) {\r\n        return\r\n      }\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      // 如果是多选节点结束，那么不要触发右键菜单事件\r\n      if (\r\n        this.mindMap.select &&\r\n        !useLeftKeySelectionRightKeyDrag &&\r\n        this.mindMap.select.hasSelectRange()\r\n      ) {\r\n        return\r\n      }\r\n      // 如果有且只有当前节点激活了，那么不需要重新激活\r\n      if (\r\n        !(this.getData('isActive') && this.renderer.activeNodeList.length === 1)\r\n      ) {\r\n        this.renderer.clearActiveNodeList()\r\n        this.active(e)\r\n      }\r\n      this.mindMap.emit('node_contextmenu', e, this)\r\n    })\r\n  }\r\n\r\n  //  激活节点\r\n  active(e) {\r\n    if (this.mindMap.opt.readonly) {\r\n      return\r\n    }\r\n    e && e.stopPropagation()\r\n    if (this.getData('isActive')) {\r\n      return\r\n    }\r\n    this.mindMap.emit('before_node_active', this, this.renderer.activeNodeList)\r\n    this.renderer.clearActiveNodeList()\r\n    this.renderer.addNodeToActiveList(this, true)\r\n    this.renderer.emitNodeActiveEvent(this)\r\n  }\r\n\r\n  // 取消激活该节点\r\n  deactivate() {\r\n    this.mindMap.renderer.removeNodeFromActiveList(this)\r\n    this.mindMap.renderer.emitNodeActiveEvent()\r\n  }\r\n\r\n  //  更新节点\r\n  update() {\r\n    if (!this.group) {\r\n      return\r\n    }\r\n    this.updateNodeActiveClass()\r\n    let { alwaysShowExpandBtn } = this.mindMap.opt\r\n    const childrenLength = this.nodeData.children.length\r\n    if (alwaysShowExpandBtn) {\r\n      // 需要移除展开收缩按钮\r\n      if (this._expandBtn && childrenLength <= 0) {\r\n        this.removeExpandBtn()\r\n      } else {\r\n        // 更新展开收起按钮\r\n        this.renderExpandBtn()\r\n      }\r\n    } else {\r\n      let { isActive, expand } = this.getData()\r\n      // 展开状态且非激活状态，且当前鼠标不在它上面，才隐藏\r\n      if (childrenLength <= 0) {\r\n        this.removeExpandBtn()\r\n      } else if (expand && !isActive && !this._isMouseenter) {\r\n        this.hideExpandBtn()\r\n      } else {\r\n        this.showExpandBtn()\r\n      }\r\n    }\r\n    // 更新概要\r\n    this.renderGeneralization()\r\n    // 更新协同头像\r\n    if (this.updateUserListNode) this.updateUserListNode()\r\n    // 更新节点位置\r\n    let t = this.group.transform()\r\n    // // 如果上次不在可视区内，且本次也不在，那么直接返回\r\n    // let { left: ox, top: oy } = this.getNodePosInClient(\r\n    //   t.translateX,\r\n    //   t.translateY\r\n    // )\r\n    // let oldIsInClient =\r\n    //   ox > 0 && oy > 0 && ox < this.mindMap.width && oy < this.mindMap.height\r\n    // let { left: nx, top: ny } = this.getNodePosInClient(this.left, this.top)\r\n    // let newIsNotInClient =\r\n    //   nx + this.width < 0 ||\r\n    //   ny + this.height < 0 ||\r\n    //   nx > this.mindMap.width ||\r\n    //   ny > this.mindMap.height\r\n    // if (!oldIsInClient && newIsNotInClient) {\r\n    //   if (!this.isHide) {\r\n    //     this.isHide = true\r\n    //     this.group.hide()\r\n    //   }\r\n    //   return\r\n    // }\r\n    // // 如果当前是隐藏状态，那么先显示\r\n    // if (this.isHide) {\r\n    //   this.isHide = false\r\n    //   this.group.show()\r\n    // }\r\n    // 如果节点位置没有变化，则返回\r\n    if (this.left === t.translateX && this.top === t.translateY) return\r\n    this.group.translate(this.left - t.translateX, this.top - t.translateY)\r\n  }\r\n\r\n  // 获取节点相当于画布的位置\r\n  getNodePosInClient(_left, _top) {\r\n    let drawTransform = this.mindMap.draw.transform()\r\n    let { scaleX, scaleY, translateX, translateY } = drawTransform\r\n    let left = _left * scaleX + translateX\r\n    let top = _top * scaleY + translateY\r\n    return {\r\n      left,\r\n      top\r\n    }\r\n  }\r\n\r\n  // 重新渲染节点，即重新创建节点内容、计算节点大小、计算节点内容布局、更新展开收起按钮，概要及位置\r\n  reRender() {\r\n    let sizeChange = this.getSize()\r\n    this.layout()\r\n    this.update()\r\n    return sizeChange\r\n  }\r\n\r\n  // 更新节点激活状态\r\n  updateNodeActiveClass() {\r\n    if (!this.group) return\r\n    const isActive = this.getData('isActive')\r\n    this.group[isActive ? 'addClass' : 'removeClass']('active')\r\n  }\r\n\r\n  // 根据是否激活更新节点\r\n  updateNodeByActive(active) {\r\n    if (this.group) {\r\n      // 切换激活状态，需要切换展开收起按钮的显隐\r\n      if (active) {\r\n        this.showExpandBtn()\r\n      } else {\r\n        this.hideExpandBtn()\r\n      }\r\n      this.updateNodeActiveClass()\r\n    }\r\n  }\r\n\r\n  //  递归渲染\r\n  render(callback = () => {}) {\r\n    // 节点\r\n    // 重新渲染连线\r\n    this.renderLine()\r\n    if (!this.group) {\r\n      // 创建组\r\n      this.group = new G()\r\n      this.group.addClass('smm-node')\r\n      this.group.css({\r\n        cursor: 'default'\r\n      })\r\n      this.bindGroupEvent()\r\n      this.nodeDraw.add(this.group)\r\n      this.layout()\r\n      this.update()\r\n    } else {\r\n      this.nodeDraw.add(this.group)\r\n      if (this.needLayout) {\r\n        this.needLayout = false\r\n        this.layout()\r\n      }\r\n      this.updateExpandBtnPlaceholderRect()\r\n      this.update()\r\n    }\r\n    // 子节点\r\n    if (\r\n      this.children &&\r\n      this.children.length &&\r\n      this.getData('expand') !== false\r\n    ) {\r\n      let index = 0\r\n      this.children.forEach(item => {\r\n        item.render(() => {\r\n          index++\r\n          if (index >= this.children.length) {\r\n            callback()\r\n          }\r\n        })\r\n      })\r\n    } else {\r\n      callback()\r\n    }\r\n    // 手动插入的节点立即获得焦点并且开启编辑模式\r\n    if (this.nodeData.inserting) {\r\n      delete this.nodeData.inserting\r\n      this.active()\r\n      setTimeout(() => {\r\n        this.mindMap.emit('node_dblclick', this, null, true)\r\n      }, 0)\r\n    }\r\n  }\r\n\r\n  //  递归删除，只是从画布删除，节点容器还在，后续还可以重新插回画布\r\n  remove() {\r\n    if (!this.group) return\r\n    this.group.remove()\r\n    this.removeGeneralization()\r\n    this.removeLine()\r\n    // 子节点\r\n    if (this.children && this.children.length) {\r\n      this.children.forEach(item => {\r\n        item.remove()\r\n      })\r\n    }\r\n  }\r\n\r\n  // 销毁节点，不但会从画布删除，而且原节点直接置空，后续无法再插回画布\r\n  destroy() {\r\n    if (!this.group) return\r\n    if (this.emptyUser) {\r\n      this.emptyUser()\r\n    }\r\n    this.resetWhenDelete()\r\n    this.group.remove()\r\n    this.removeGeneralization()\r\n    this.removeLine()\r\n    this.group = null\r\n    if (this.parent) {\r\n      this.parent.removeLine()\r\n    }\r\n    this.style.onRemove()\r\n  }\r\n\r\n  //  隐藏节点\r\n  hide() {\r\n    this.group.hide()\r\n    this.hideGeneralization()\r\n    if (this.parent) {\r\n      let index = this.parent.children.indexOf(this)\r\n      this.parent._lines[index] && this.parent._lines[index].hide()\r\n      this._lines.forEach(item => {\r\n        item.hide()\r\n      })\r\n    }\r\n    // 子节点\r\n    if (this.children && this.children.length) {\r\n      this.children.forEach(item => {\r\n        item.hide()\r\n      })\r\n    }\r\n  }\r\n\r\n  //  显示节点\r\n  show() {\r\n    if (!this.group) {\r\n      return\r\n    }\r\n    this.group.show()\r\n    this.showGeneralization()\r\n    if (this.parent) {\r\n      let index = this.parent.children.indexOf(this)\r\n      this.parent._lines[index] && this.parent._lines[index].show()\r\n      this._lines.forEach(item => {\r\n        item.show()\r\n      })\r\n    }\r\n    // 子节点\r\n    if (this.children && this.children.length) {\r\n      this.children.forEach(item => {\r\n        item.show()\r\n      })\r\n    }\r\n  }\r\n\r\n  // 设置节点透明度\r\n  // 包括连接线和下级节点\r\n  setOpacity(val) {\r\n    // 自身及连线\r\n    this.group.opacity(val)\r\n    this._lines.forEach(line => {\r\n      line.opacity(val)\r\n    })\r\n    // 子节点\r\n    this.children.forEach(item => {\r\n      item.setOpacity(val)\r\n    })\r\n    // 概要节点\r\n    this.setGeneralizationOpacity(val)\r\n  }\r\n\r\n  // 隐藏子节点\r\n  hideChildren() {\r\n    this._lines.forEach(item => {\r\n      item.hide()\r\n    })\r\n    if (this.children && this.children.length) {\r\n      this.children.forEach(item => {\r\n        item.hide()\r\n      })\r\n    }\r\n  }\r\n\r\n  // 显示子节点\r\n  showChildren() {\r\n    this._lines.forEach(item => {\r\n      item.show()\r\n    })\r\n    if (this.children && this.children.length) {\r\n      this.children.forEach(item => {\r\n        item.show()\r\n      })\r\n    }\r\n  }\r\n\r\n  // 被拖拽中\r\n  startDrag() {\r\n    this.isDrag = true\r\n    this.group.addClass('smm-node-dragging')\r\n  }\r\n\r\n  // 拖拽结束\r\n  endDrag() {\r\n    this.isDrag = false\r\n    this.group.removeClass('smm-node-dragging')\r\n  }\r\n\r\n  //  连线\r\n  renderLine(deep = false) {\r\n    if (this.getData('expand') === false) {\r\n      return\r\n    }\r\n    let childrenLen = this.nodeData.children.length\r\n    // 切换为鱼骨结构时，清空根节点和二级节点的连线\r\n    if (\r\n      this.mindMap.opt.layout === CONSTANTS.LAYOUT.FISHBONE &&\r\n      (this.isRoot || this.layerIndex === 1)\r\n    ) {\r\n      childrenLen = 0\r\n    }\r\n    if (childrenLen > this._lines.length) {\r\n      // 创建缺少的线\r\n      new Array(childrenLen - this._lines.length).fill(0).forEach(() => {\r\n        this._lines.push(this.lineDraw.path())\r\n      })\r\n    } else if (childrenLen < this._lines.length) {\r\n      // 删除多余的线\r\n      this._lines.slice(childrenLen).forEach(line => {\r\n        line.remove()\r\n      })\r\n      this._lines = this._lines.slice(0, childrenLen)\r\n    }\r\n    // 画线\r\n    this.renderer.layout.renderLine(\r\n      this,\r\n      this._lines,\r\n      (...args) => {\r\n        // 添加样式\r\n        this.styleLine(...args)\r\n      },\r\n      this.style.getStyle('lineStyle', true)\r\n    )\r\n    // 子级的连线也需要更新\r\n    if (deep && this.children && this.children.length > 0) {\r\n      this.children.forEach(item => {\r\n        item.renderLine(deep)\r\n      })\r\n    }\r\n  }\r\n\r\n  //  获取节点形状\r\n  getShape() {\r\n    // 节点使用功能横线风格的话不支持设置形状，直接使用默认的矩形\r\n    return this.mindMap.themeConfig.nodeUseLineStyle\r\n      ? CONSTANTS.SHAPE.RECTANGLE\r\n      : this.style.getStyle('shape', false, false)\r\n  }\r\n\r\n  //  检查节点是否存在自定义数据\r\n  hasCustomPosition() {\r\n    return this.customLeft !== undefined && this.customTop !== undefined\r\n  }\r\n\r\n  //  检查节点是否存在自定义位置的祖先节点，包含自身\r\n  ancestorHasCustomPosition() {\r\n    let node = this\r\n    while (node) {\r\n      if (node.hasCustomPosition()) {\r\n        return true\r\n      }\r\n      node = node.parent\r\n    }\r\n    return false\r\n  }\r\n\r\n  //  检查是否存在有概要的祖先节点\r\n  ancestorHasGeneralization() {\r\n    let node = this.parent\r\n    while (node) {\r\n      if (node.checkHasGeneralization()) {\r\n        return true\r\n      }\r\n      node = node.parent\r\n    }\r\n    return false\r\n  }\r\n\r\n  //  添加子节点\r\n  addChildren(node) {\r\n    this.children.push(node)\r\n  }\r\n\r\n  //  设置连线样式\r\n  styleLine(line, childNode, enableMarker) {\r\n    const width =\r\n      childNode.getSelfInhertStyle('lineWidth') ||\r\n      childNode.getStyle('lineWidth', true)\r\n    const color =\r\n      childNode.getSelfInhertStyle('lineColor') ||\r\n      this.getRainbowLineColor(childNode) ||\r\n      childNode.getStyle('lineColor', true)\r\n    const dasharray =\r\n      childNode.getSelfInhertStyle('lineDasharray') ||\r\n      childNode.getStyle('lineDasharray', true)\r\n    this.style.line(\r\n      line,\r\n      {\r\n        width,\r\n        color,\r\n        dasharray\r\n      },\r\n      enableMarker,\r\n      childNode\r\n    )\r\n  }\r\n\r\n  // 获取彩虹线条颜色\r\n  getRainbowLineColor(node) {\r\n    return this.mindMap.rainbowLines\r\n      ? this.mindMap.rainbowLines.getNodeColor(node)\r\n      : ''\r\n  }\r\n\r\n  //  移除连线\r\n  removeLine() {\r\n    this._lines.forEach(line => {\r\n      line.remove()\r\n    })\r\n    this._lines = []\r\n  }\r\n\r\n  //  检测当前节点是否是某个节点的祖先节点\r\n  isAncestor(node) {\r\n    if (this.uid === node.uid) {\r\n      return false\r\n    }\r\n    let parent = node.parent\r\n    while (parent) {\r\n      if (this.uid === parent.uid) {\r\n        return true\r\n      }\r\n      parent = parent.parent\r\n    }\r\n    return false\r\n  }\r\n\r\n  // 检查当前节点是否是某个节点的父节点\r\n  isParent(node) {\r\n    if (this.uid === node.uid) {\r\n      return false\r\n    }\r\n    const parent = node.parent\r\n    if (parent && this.uid === parent.uid) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  //  检测当前节点是否是某个节点的兄弟节点\r\n  isBrother(node) {\r\n    if (!this.parent || this.uid === node.uid) {\r\n      return false\r\n    }\r\n    return this.parent.children.find(item => {\r\n      return item.uid === node.uid\r\n    })\r\n  }\r\n\r\n  // 获取该节点在兄弟节点列表中的索引\r\n  getIndexInBrothers() {\r\n    return this.parent && this.parent.children\r\n      ? this.parent.children.findIndex(item => {\r\n          return item.uid === this.uid\r\n        })\r\n      : -1\r\n  }\r\n\r\n  //  获取padding值\r\n  getPaddingVale() {\r\n    let { isActive } = this.getData()\r\n    return {\r\n      paddingX: this.getStyle('paddingX', true, isActive),\r\n      paddingY: this.getStyle('paddingY', true, isActive)\r\n    }\r\n  }\r\n\r\n  //  获取某个样式\r\n  getStyle(prop, root) {\r\n    let v = this.style.merge(prop, root)\r\n    return v === undefined ? '' : v\r\n  }\r\n\r\n  //  获取自定义样式\r\n  getSelfStyle(prop) {\r\n    return this.style.getSelfStyle(prop)\r\n  }\r\n\r\n  //   获取最近一个存在自身自定义样式的祖先节点的自定义样式\r\n  getParentSelfStyle(prop) {\r\n    if (this.parent) {\r\n      return (\r\n        this.parent.getSelfStyle(prop) || this.parent.getParentSelfStyle(prop)\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  //  获取自身可继承的自定义样式\r\n  getSelfInhertStyle(prop) {\r\n    return (\r\n      this.getSelfStyle(prop) || // 自身\r\n      this.getParentSelfStyle(prop)\r\n    ) // 父级\r\n  }\r\n\r\n  // 获取节点非节点状态的边框大小\r\n  getBorderWidth() {\r\n    return this.style.merge('borderWidth', false) || 0\r\n  }\r\n\r\n  //  获取数据\r\n  getData(key) {\r\n    return key ? this.nodeData.data[key] : this.nodeData.data\r\n  }\r\n\r\n  // 获取该节点的纯数据，即不包含对节点实例的引用\r\n  getPureData(removeActiveState = true, removeId = false) {\r\n    return copyNodeTree({}, this, removeActiveState, removeId)\r\n  }\r\n\r\n  // 获取祖先节点列表\r\n  getAncestorNodes() {\r\n    const list = []\r\n    let parent = this.parent\r\n    while (parent) {\r\n      list.unshift(parent)\r\n      parent = parent.parent\r\n    }\r\n    return list\r\n  }\r\n\r\n  // 是否存在自定义样式\r\n  hasCustomStyle() {\r\n    return this.style.hasCustomStyle()\r\n  }\r\n\r\n  // 获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置是相对于浏览器窗口左上角的位置\r\n  getRect() {\r\n    return this.group.rbox()\r\n  }\r\n\r\n  // 获取节点的尺寸和位置信息，宽高是应用了缩放效果后的实际宽高，位置信息相对于画布\r\n  getRectInSvg() {\r\n    let { scaleX, scaleY, translateX, translateY } =\r\n      this.mindMap.draw.transform()\r\n    let { left, top, width, height } = this\r\n    let right = (left + width) * scaleX + translateX\r\n    let bottom = (top + height) * scaleY + translateY\r\n    left = left * scaleX + translateX\r\n    top = top * scaleY + translateY\r\n    return {\r\n      left,\r\n      right,\r\n      top,\r\n      bottom,\r\n      width: width * scaleX,\r\n      height: height * scaleY\r\n    }\r\n  }\r\n\r\n  // 高亮节点\r\n  highlight() {\r\n    if (this.group) this.group.addClass('smm-node-highlight')\r\n  }\r\n\r\n  // 取消高亮节点\r\n  closeHighlight() {\r\n    if (this.group) this.group.removeClass('smm-node-highlight')\r\n  }\r\n}\r\n\r\nexport default Node\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}