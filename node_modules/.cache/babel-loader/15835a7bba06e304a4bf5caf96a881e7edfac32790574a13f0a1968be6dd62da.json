{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport View from './src/core/view/View';\nimport Event from './src/core/event/Event';\nimport Render from './src/core/render/Render';\nimport merge from 'deepmerge';\nimport theme from './src/themes';\nimport Style from './src/core/render/node/Style';\nimport KeyCommand from './src/core/command/KeyCommand';\nimport Command from './src/core/command/Command';\nimport BatchExecution from './src/utils/BatchExecution';\nimport { layoutValueList, CONSTANTS, ERROR_TYPES, cssContent } from './src/constants/constant';\nimport { SVG } from '@svgdotjs/svg.js';\nimport { simpleDeepClone, getObjectChangedProps, isUndef, handleGetSvgDataExtraContent, getNodeTreeBoundingRect } from './src/utils';\nimport defaultTheme, { checkIsNodeSizeIndependenceConfig } from './src/themes/default';\nimport { defaultOpt } from './src/constants/defaultOptions';\n\n//  思维导图\nclass MindMap {\n  //  构造函数\n  /**\r\n   *\r\n   * @param {defaultOpt} opt\r\n   */\n  constructor(opt = {}) {\n    // 合并选项\n    this.opt = this.handleOpt(merge(defaultOpt, opt));\n    // 预处理节点数据\n    this.opt.data = this.handleData(this.opt.data);\n\n    // 容器元素\n    this.el = this.opt.el;\n    if (!this.el) throw new Error('缺少容器元素el');\n\n    // 获取容器尺寸位置信息\n    this.getElRectInfo();\n\n    // 画布初始大小\n    this.initWidth = this.width;\n    this.initHeight = this.height;\n\n    // 添加css\n    this.cssEl = null;\n    this.addCss();\n\n    // 画布\n    this.initContainer();\n\n    // 初始化主题\n    this.initTheme();\n\n    // 初始化缓存数据\n    this.initCache();\n\n    // 事件类\n    this.event = new Event({\n      mindMap: this\n    });\n\n    // 按键类\n    this.keyCommand = new KeyCommand({\n      mindMap: this\n    });\n\n    // 命令类\n    this.command = new Command({\n      mindMap: this\n    });\n\n    // 渲染类\n    this.renderer = new Render({\n      mindMap: this\n    });\n\n    // 视图操作类\n    this.view = new View({\n      mindMap: this\n    });\n\n    // 批量执行类\n    this.batchExecution = new BatchExecution();\n\n    // 注册插件\n    MindMap.pluginList.forEach(plugin => {\n      this.initPlugin(plugin);\n    });\n\n    // 初始渲染\n    this.render(this.opt.fit ? () => this.view.fit() : () => {});\n    setTimeout(() => {\n      if (this.opt.data) this.command.addHistory();\n    }, 0);\n  }\n\n  //  配置参数处理\n  handleOpt(opt) {\n    // 检查布局配置\n    if (!layoutValueList.includes(opt.layout)) {\n      opt.layout = CONSTANTS.LAYOUT.LOGICAL_STRUCTURE;\n    }\n    // 检查主题配置\n    opt.theme = opt.theme && theme[opt.theme] ? opt.theme : 'default';\n    return opt;\n  }\n\n  // 预处理节点数据\n  handleData(data) {\n    if (isUndef(data) || Object.keys(data).length <= 0) return null;\n    data = simpleDeepClone(data || {});\n    // 根节点不能收起\n    if (data.data && !data.data.expand) {\n      data.data.expand = true;\n    }\n    return data;\n  }\n\n  // 创建容器元素\n  initContainer() {\n    const {\n      associativeLineIsAlwaysAboveNode\n    } = this.opt;\n    // 给容器元素添加一个类名\n    this.el.classList.add('smm-mind-map-container');\n    // 节点关联线容器\n    const createAssociativeLineDraw = () => {\n      this.associativeLineDraw = this.draw.group();\n      this.associativeLineDraw.addClass('smm-associative-line-container');\n    };\n    // 画布\n    this.svg = SVG().addTo(this.el).size(this.width, this.height);\n\n    // 容器\n    this.draw = this.svg.group();\n    this.draw.addClass('smm-container');\n    // 节点连线容器\n    this.lineDraw = this.draw.group();\n    this.lineDraw.addClass('smm-line-container');\n    // 默认处于节点下方\n    if (!associativeLineIsAlwaysAboveNode) {\n      createAssociativeLineDraw();\n    }\n    // 节点容器\n    this.nodeDraw = this.draw.group();\n    this.nodeDraw.addClass('smm-node-container');\n    // 关联线始终处于节点上方\n    if (associativeLineIsAlwaysAboveNode) {\n      createAssociativeLineDraw();\n    }\n    // 其他内容的容器\n    this.otherDraw = this.draw.group();\n    this.otherDraw.addClass('smm-other-container');\n  }\n\n  // 清空各容器\n  clearDraw() {\n    this.lineDraw.clear();\n    this.associativeLineDraw.clear();\n    this.nodeDraw.clear();\n    this.otherDraw.clear();\n  }\n\n  // 添加必要的css样式到页面\n  addCss() {\n    this.cssEl = document.createElement('style');\n    this.cssEl.type = 'text/css';\n    this.cssEl.innerHTML = cssContent;\n    document.head.appendChild(this.cssEl);\n  }\n\n  // 移除css\n  removeCss() {\n    document.head.removeChild(this.cssEl);\n  }\n\n  //  渲染，部分渲染\n  render(callback, source = '') {\n    this.batchExecution.push('render', () => {\n      this.initTheme();\n      this.renderer.render(callback, source);\n    });\n  }\n\n  //  重新渲染\n  reRender(callback, source = '') {\n    this.renderer.reRender = true; // 标记为重新渲染\n    this.renderer.clearCache(); // 清空节点缓存池\n    this.clearDraw(); // 清空画布\n    this.render(callback, source = '');\n  }\n\n  // 获取或更新容器尺寸位置信息\n  getElRectInfo() {\n    this.elRect = this.el.getBoundingClientRect();\n    this.width = this.elRect.width;\n    this.height = this.elRect.height;\n    if (this.width <= 0 || this.height <= 0) throw new Error('容器元素el的宽高不能为0');\n  }\n\n  //  容器尺寸变化，调整尺寸\n  resize() {\n    this.getElRectInfo();\n    this.svg.size(this.width, this.height);\n    this.emit('resize');\n  }\n\n  //  监听事件\n  on(event, fn) {\n    this.event.on(event, fn);\n  }\n\n  //  触发事件\n  emit(event, ...args) {\n    this.event.emit(event, ...args);\n  }\n\n  //  解绑事件\n  off(event, fn) {\n    this.event.off(event, fn);\n  }\n\n  // 初始化缓存数据\n  initCache() {\n    this.commonCaches = {\n      measureCustomNodeContentSizeEl: null,\n      measureRichtextNodeTextSizeEl: null\n    };\n  }\n\n  //  设置主题\n  initTheme() {\n    // 合并主题配置\n    this.themeConfig = merge(theme[this.opt.theme], this.opt.themeConfig);\n    // 设置背景样式\n    Style.setBackgroundStyle(this.el, this.themeConfig);\n  }\n\n  //  设置主题\n  setTheme(theme, notRender = false) {\n    this.execCommand('CLEAR_ACTIVE_NODE');\n    this.opt.theme = theme;\n    if (!notRender) {\n      this.render(null, CONSTANTS.CHANGE_THEME);\n    }\n    this.emit('view_theme_change', theme);\n  }\n\n  //  获取当前主题\n  getTheme() {\n    return this.opt.theme;\n  }\n\n  //  设置主题配置\n  setThemeConfig(config, notRender = false) {\n    // 计算改变了的配置\n    const changedConfig = getObjectChangedProps(this.themeConfig, config);\n    this.opt.themeConfig = config;\n    if (!notRender) {\n      // 检查改变的是否是节点大小无关的主题属性\n      let res = checkIsNodeSizeIndependenceConfig(changedConfig);\n      this.render(null, res ? '' : CONSTANTS.CHANGE_THEME);\n    }\n  }\n\n  //  获取自定义主题配置\n  getCustomThemeConfig() {\n    return this.opt.themeConfig;\n  }\n\n  //  获取某个主题配置值\n  getThemeConfig(prop) {\n    return prop === undefined ? this.themeConfig : this.themeConfig[prop];\n  }\n\n  // 获取配置\n  getConfig(prop) {\n    return prop === undefined ? this.opt : this.opt[prop];\n  }\n\n  // 更新配置\n  updateConfig(opt = {}) {\n    this.opt = this.handleOpt(merge.all([defaultOpt, this.opt, opt]));\n  }\n\n  //  获取当前布局结构\n  getLayout() {\n    return this.opt.layout;\n  }\n\n  //  设置布局结构\n  setLayout(layout, notRender = false) {\n    // 检查布局配置\n    if (!layoutValueList.includes(layout)) {\n      layout = CONSTANTS.LAYOUT.LOGICAL_STRUCTURE;\n    }\n    this.opt.layout = layout;\n    this.view.reset();\n    this.renderer.setLayout();\n    if (!notRender) {\n      this.render(null, CONSTANTS.CHANGE_LAYOUT);\n    }\n    this.emit('layout_change', layout);\n  }\n\n  //  执行命令\n  execCommand(...args) {\n    this.command.exec(...args);\n  }\n\n  // 更新画布数据，如果新的数据是在当前画布节点数据基础上增删改查后形成的，那么可以使用该方法来更新画布数据\n  updateData(data) {\n    this.renderer.setData(data);\n    this.render();\n    this.command.addHistory();\n  }\n\n  //  动态设置思维导图数据，纯节点数据\n  setData(data) {\n    data = this.handleData(data);\n    this.opt.data = data;\n    this.execCommand('CLEAR_ACTIVE_NODE');\n    this.command.clearHistory();\n    this.command.addHistory();\n    this.renderer.setData(data);\n    this.reRender(() => {}, CONSTANTS.SET_DATA);\n    this.emit('set_data', data);\n  }\n\n  //  动态设置思维导图数据，包括节点数据、布局、主题、视图\n  setFullData(data) {\n    if (data.root) {\n      this.setData(data.root);\n    }\n    if (data.layout) {\n      this.setLayout(data.layout);\n    }\n    if (data.theme) {\n      if (data.theme.template) {\n        this.setTheme(data.theme.template);\n      }\n      if (data.theme.config) {\n        this.setThemeConfig(data.theme.config);\n      }\n    }\n    if (data.view) {\n      this.view.setTransformData(data.view);\n    }\n  }\n\n  //  获取思维导图数据，节点树、主题、布局等\n  getData(withConfig) {\n    let nodeData = this.command.getCopyData();\n    let data = {};\n    if (withConfig) {\n      data = {\n        layout: this.getLayout(),\n        root: nodeData,\n        theme: {\n          template: this.getTheme(),\n          config: this.getCustomThemeConfig()\n        },\n        view: this.view.getTransformData()\n      };\n    } else {\n      data = nodeData;\n    }\n    return simpleDeepClone(data);\n  }\n\n  //  导出\n  async export(...args) {\n    try {\n      let result = await this.doExport.export(...args);\n      return result;\n    } catch (error) {\n      this.opt.errorHandler(ERROR_TYPES.EXPORT_ERROR, error);\n    }\n  }\n\n  //  转换位置\n  toPos(x, y) {\n    return {\n      x: x - this.elRect.left,\n      y: y - this.elRect.top\n    };\n  }\n\n  //  设置只读模式、编辑模式\n  setMode(mode) {\n    if (![CONSTANTS.MODE.READONLY, CONSTANTS.MODE.EDIT].includes(mode)) {\n      return;\n    }\n    this.opt.readonly = mode === CONSTANTS.MODE.READONLY;\n    if (this.opt.readonly) {\n      // 取消当前激活的元素\n      this.execCommand('CLEAR_ACTIVE_NODE');\n    }\n    this.emit('mode_change', mode);\n  }\n\n  // 获取svg数据\n  getSvgData({\n    paddingX = 0,\n    paddingY = 0,\n    ignoreWatermark = false,\n    addContentToHeader,\n    addContentToFooter,\n    node\n  } = {}) {\n    const {\n      cssTextList,\n      header,\n      headerHeight,\n      footer,\n      footerHeight\n    } = handleGetSvgDataExtraContent({\n      addContentToHeader,\n      addContentToFooter\n    });\n    const svg = this.svg;\n    const draw = this.draw;\n    // 保存原始信息\n    const origWidth = svg.width();\n    const origHeight = svg.height();\n    const origTransform = draw.transform();\n    const elRect = this.elRect;\n    // 去除放大缩小的变换效果\n    draw.scale(1 / origTransform.scaleX, 1 / origTransform.scaleY);\n    // 获取变换后的位置尺寸信息，其实是getBoundingClientRect方法的包装方法\n    const rect = draw.rbox();\n    // 需要裁减的区域\n    let clipData = null;\n    if (node) {\n      clipData = getNodeTreeBoundingRect(node, rect.x, rect.y, paddingX, paddingY);\n    }\n    // 内边距\n    const fixHeight = 0;\n    rect.width += paddingX * 2;\n    rect.height += paddingY * 2 + fixHeight + headerHeight + footerHeight;\n    draw.translate(paddingX, paddingY);\n    // 将svg设置为实际内容的宽高\n    svg.size(rect.width, rect.height);\n    // 把实际内容变换\n    draw.translate(-rect.x + elRect.left, -rect.y + elRect.top);\n    // 克隆一份数据\n    let clone = svg.clone();\n    // 是否存在水印\n    const hasWatermark = this.watermark && this.watermark.hasWatermark();\n    if (!ignoreWatermark && hasWatermark) {\n      this.watermark.isInExport = true;\n      // 是否是仅导出时需要水印\n      const {\n        onlyExport\n      } = this.opt.watermarkConfig;\n      // 是否需要重新绘制水印\n      const needReDrawWatermark = rect.width > origWidth || rect.height > origHeight;\n      // 如果实际图形宽高超出了屏幕宽高，且存在水印的话需要重新绘制水印，否则会出现超出部分没有水印的问题\n      if (needReDrawWatermark) {\n        this.width = rect.width;\n        this.height = rect.height;\n        this.watermark.onResize();\n        clone = svg.clone();\n        this.width = origWidth;\n        this.height = origHeight;\n        this.watermark.onResize();\n      } else if (onlyExport) {\n        // 如果是仅导出时需要水印，那么需要进行绘制\n        this.watermark.onResize();\n        clone = svg.clone();\n      }\n      // 如果是仅导出时需要水印，需要清除\n      if (onlyExport) {\n        this.watermark.clear();\n      }\n      this.watermark.isInExport = false;\n    }\n    // 添加必要的样式\n    ;\n    [cssContent, ...cssTextList].forEach(s => {\n      clone.add(SVG(`<style>${s}</style>`));\n    });\n    // 附加内容\n    if (header && headerHeight > 0) {\n      clone.findOne('.smm-container').translate(0, headerHeight);\n      header.width(rect.width);\n      header.y(paddingY);\n      clone.add(header, 0);\n    }\n    if (footer && footerHeight > 0) {\n      footer.width(rect.width);\n      footer.y(rect.height - paddingY - footerHeight);\n      clone.add(footer);\n    }\n    // 修正defs里定义的元素的id，因为clone时defs里的元素的id会继续递增，导致和内容中引用的id对不上\n    const defs = svg.find('defs');\n    const defs2 = clone.find('defs');\n    defs.forEach((def, defIndex) => {\n      const def2 = defs2[defIndex];\n      if (!def2) return;\n      const children = def.children();\n      const children2 = def2.children();\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        const child2 = children2[i];\n        if (child && child2) {\n          child2.attr('id', child.attr('id'));\n        }\n      }\n    });\n    // 恢复原先的大小和变换信息\n    svg.size(origWidth, origHeight);\n    draw.transform(origTransform);\n    return {\n      svg: clone,\n      // 思维导图图形的整体svg元素，包括：svg（画布容器）、g（实际的思维导图组）\n      svgHTML: clone.svg(),\n      // svg字符串\n      clipData,\n      rect: {\n        ...rect,\n        // 思维导图图形未缩放时的位置尺寸等信息\n        ratio: rect.width / rect.height // 思维导图图形的宽高比\n      },\n      origWidth,\n      // 画布宽度\n      origHeight,\n      // 画布高度\n      scaleX: origTransform.scaleX,\n      // 思维导图图形的水平缩放值\n      scaleY: origTransform.scaleY // 思维导图图形的垂直缩放值\n    };\n  }\n\n  // 添加插件\n  addPlugin(plugin, opt) {\n    let index = MindMap.hasPlugin(plugin);\n    if (index === -1) {\n      MindMap.usePlugin(plugin, opt);\n      this.initPlugin(plugin);\n    }\n  }\n\n  // 移除插件\n  removePlugin(plugin) {\n    let index = MindMap.hasPlugin(plugin);\n    if (index !== -1) {\n      MindMap.pluginList.splice(index, 1);\n      if (this[plugin.instanceName]) {\n        if (this[plugin.instanceName].beforePluginRemove) {\n          this[plugin.instanceName].beforePluginRemove();\n        }\n        delete this[plugin.instanceName];\n      }\n    }\n  }\n\n  // 实例化插件\n  initPlugin(plugin) {\n    this[plugin.instanceName] = new plugin({\n      mindMap: this,\n      pluginOpt: plugin.pluginOpt\n    });\n  }\n\n  // 销毁\n  destroy() {\n    this.emit('beforeDestroy');\n    // 清除节点编辑框\n    this.renderer.textEdit.hideEditTextBox();\n    // 清除关联线文字编辑框\n    if (this.associativeLine) {\n      this.associativeLine.hideEditTextBox();\n    }\n    // 移除插件\n    ;\n    [...MindMap.pluginList].forEach(plugin => {\n      if (this[plugin.instanceName] && this[plugin.instanceName].beforePluginDestroy) {\n        this[plugin.instanceName].beforePluginDestroy();\n      }\n      this[plugin.instanceName] = null;\n    });\n    // 解绑事件\n    this.event.unbind();\n    // 移除画布节点\n    this.svg.remove();\n    // 去除给容器元素设置的背景样式\n    Style.removeBackgroundStyle(this.el);\n    // 移除给容器元素添加的类名\n    this.el.classList.remove('smm-mind-map-container');\n    this.el.innerHTML = '';\n    this.el = null;\n    this.removeCss();\n  }\n}\n\n// 插件列表\nMindMap.pluginList = [];\nMindMap.usePlugin = (plugin, opt = {}) => {\n  if (MindMap.hasPlugin(plugin) !== -1) return MindMap;\n  plugin.pluginOpt = opt;\n  MindMap.pluginList.push(plugin);\n  return MindMap;\n};\nMindMap.hasPlugin = plugin => {\n  return MindMap.pluginList.findIndex(item => {\n    return item === plugin;\n  });\n};\n\n// 定义新主题\nMindMap.defineTheme = (name, config = {}) => {\n  if (theme[name]) {\n    return new Error('该主题名称已存在');\n  }\n  theme[name] = merge(defaultTheme, config);\n};\nexport default MindMap;","map":{"version":3,"names":["View","Event","Render","merge","theme","Style","KeyCommand","Command","BatchExecution","layoutValueList","CONSTANTS","ERROR_TYPES","cssContent","SVG","simpleDeepClone","getObjectChangedProps","isUndef","handleGetSvgDataExtraContent","getNodeTreeBoundingRect","defaultTheme","checkIsNodeSizeIndependenceConfig","defaultOpt","MindMap","constructor","opt","handleOpt","data","handleData","el","Error","getElRectInfo","initWidth","width","initHeight","height","cssEl","addCss","initContainer","initTheme","initCache","event","mindMap","keyCommand","command","renderer","view","batchExecution","pluginList","forEach","plugin","initPlugin","render","fit","setTimeout","addHistory","includes","layout","LAYOUT","LOGICAL_STRUCTURE","Object","keys","length","expand","associativeLineIsAlwaysAboveNode","classList","add","createAssociativeLineDraw","associativeLineDraw","draw","group","addClass","svg","addTo","size","lineDraw","nodeDraw","otherDraw","clearDraw","clear","document","createElement","type","innerHTML","head","appendChild","removeCss","removeChild","callback","source","push","reRender","clearCache","elRect","getBoundingClientRect","resize","emit","on","fn","args","off","commonCaches","measureCustomNodeContentSizeEl","measureRichtextNodeTextSizeEl","themeConfig","setBackgroundStyle","setTheme","notRender","execCommand","CHANGE_THEME","getTheme","setThemeConfig","config","changedConfig","res","getCustomThemeConfig","getThemeConfig","prop","undefined","getConfig","updateConfig","all","getLayout","setLayout","reset","CHANGE_LAYOUT","exec","updateData","setData","clearHistory","SET_DATA","setFullData","root","template","setTransformData","getData","withConfig","nodeData","getCopyData","getTransformData","export","result","doExport","error","errorHandler","EXPORT_ERROR","toPos","x","y","left","top","setMode","mode","MODE","READONLY","EDIT","readonly","getSvgData","paddingX","paddingY","ignoreWatermark","addContentToHeader","addContentToFooter","node","cssTextList","header","headerHeight","footer","footerHeight","origWidth","origHeight","origTransform","transform","scale","scaleX","scaleY","rect","rbox","clipData","fixHeight","translate","clone","hasWatermark","watermark","isInExport","onlyExport","watermarkConfig","needReDrawWatermark","onResize","s","findOne","defs","find","defs2","def","defIndex","def2","children","children2","i","child","child2","attr","svgHTML","ratio","addPlugin","index","hasPlugin","usePlugin","removePlugin","splice","instanceName","beforePluginRemove","pluginOpt","destroy","textEdit","hideEditTextBox","associativeLine","beforePluginDestroy","unbind","remove","removeBackgroundStyle","findIndex","item","defineTheme","name"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/index.js"],"sourcesContent":["import View from './src/core/view/View'\r\nimport Event from './src/core/event/Event'\r\nimport Render from './src/core/render/Render'\r\nimport merge from 'deepmerge'\r\nimport theme from './src/themes'\r\nimport Style from './src/core/render/node/Style'\r\nimport KeyCommand from './src/core/command/KeyCommand'\r\nimport Command from './src/core/command/Command'\r\nimport BatchExecution from './src/utils/BatchExecution'\r\nimport {\r\n  layoutValueList,\r\n  CONSTANTS,\r\n  ERROR_TYPES,\r\n  cssContent\r\n} from './src/constants/constant'\r\nimport { SVG } from '@svgdotjs/svg.js'\r\nimport {\r\n  simpleDeepClone,\r\n  getObjectChangedProps,\r\n  isUndef,\r\n  handleGetSvgDataExtraContent,\r\n  getNodeTreeBoundingRect\r\n} from './src/utils'\r\nimport defaultTheme, {\r\n  checkIsNodeSizeIndependenceConfig\r\n} from './src/themes/default'\r\nimport { defaultOpt } from './src/constants/defaultOptions'\r\n\r\n//  思维导图\r\nclass MindMap {\r\n  //  构造函数\r\n  /**\r\n   *\r\n   * @param {defaultOpt} opt\r\n   */\r\n  constructor(opt = {}) {\r\n    // 合并选项\r\n    this.opt = this.handleOpt(merge(defaultOpt, opt))\r\n    // 预处理节点数据\r\n    this.opt.data = this.handleData(this.opt.data)\r\n\r\n    // 容器元素\r\n    this.el = this.opt.el\r\n    if (!this.el) throw new Error('缺少容器元素el')\r\n\r\n    // 获取容器尺寸位置信息\r\n    this.getElRectInfo()\r\n\r\n    // 画布初始大小\r\n    this.initWidth = this.width\r\n    this.initHeight = this.height\r\n\r\n    // 添加css\r\n    this.cssEl = null\r\n    this.addCss()\r\n\r\n    // 画布\r\n    this.initContainer()\r\n\r\n    // 初始化主题\r\n    this.initTheme()\r\n\r\n    // 初始化缓存数据\r\n    this.initCache()\r\n\r\n    // 事件类\r\n    this.event = new Event({\r\n      mindMap: this\r\n    })\r\n\r\n    // 按键类\r\n    this.keyCommand = new KeyCommand({\r\n      mindMap: this\r\n    })\r\n\r\n    // 命令类\r\n    this.command = new Command({\r\n      mindMap: this\r\n    })\r\n\r\n    // 渲染类\r\n    this.renderer = new Render({\r\n      mindMap: this\r\n    })\r\n\r\n    // 视图操作类\r\n    this.view = new View({\r\n      mindMap: this\r\n    })\r\n\r\n    // 批量执行类\r\n    this.batchExecution = new BatchExecution()\r\n\r\n    // 注册插件\r\n    MindMap.pluginList.forEach(plugin => {\r\n      this.initPlugin(plugin)\r\n    })\r\n\r\n    // 初始渲染\r\n    this.render(this.opt.fit ? () => this.view.fit() : () => {})\r\n    setTimeout(() => {\r\n      if (this.opt.data) this.command.addHistory()\r\n    }, 0)\r\n  }\r\n\r\n  //  配置参数处理\r\n  handleOpt(opt) {\r\n    // 检查布局配置\r\n    if (!layoutValueList.includes(opt.layout)) {\r\n      opt.layout = CONSTANTS.LAYOUT.LOGICAL_STRUCTURE\r\n    }\r\n    // 检查主题配置\r\n    opt.theme = opt.theme && theme[opt.theme] ? opt.theme : 'default'\r\n    return opt\r\n  }\r\n\r\n  // 预处理节点数据\r\n  handleData(data) {\r\n    if (isUndef(data) || Object.keys(data).length <= 0) return null\r\n    data = simpleDeepClone(data || {})\r\n    // 根节点不能收起\r\n    if (data.data && !data.data.expand) {\r\n      data.data.expand = true\r\n    }\r\n    return data\r\n  }\r\n\r\n  // 创建容器元素\r\n  initContainer() {\r\n    const { associativeLineIsAlwaysAboveNode } = this.opt\r\n    // 给容器元素添加一个类名\r\n    this.el.classList.add('smm-mind-map-container')\r\n    // 节点关联线容器\r\n    const createAssociativeLineDraw = () => {\r\n      this.associativeLineDraw = this.draw.group()\r\n      this.associativeLineDraw.addClass('smm-associative-line-container')\r\n    }\r\n    // 画布\r\n    this.svg = SVG()\r\n      .addTo(this.el)\r\n      .size(this.width, this.height)\r\n      \r\n    // 容器\r\n    this.draw = this.svg.group()\r\n    this.draw.addClass('smm-container')\r\n    // 节点连线容器\r\n    this.lineDraw = this.draw.group()\r\n    this.lineDraw.addClass('smm-line-container')\r\n    // 默认处于节点下方\r\n    if (!associativeLineIsAlwaysAboveNode) {\r\n      createAssociativeLineDraw()\r\n    }\r\n    // 节点容器\r\n    this.nodeDraw = this.draw.group()\r\n    this.nodeDraw.addClass('smm-node-container')\r\n    // 关联线始终处于节点上方\r\n    if (associativeLineIsAlwaysAboveNode) {\r\n      createAssociativeLineDraw()\r\n    }\r\n    // 其他内容的容器\r\n    this.otherDraw = this.draw.group()\r\n    this.otherDraw.addClass('smm-other-container')\r\n  }\r\n\r\n  // 清空各容器\r\n  clearDraw() {\r\n    this.lineDraw.clear()\r\n    this.associativeLineDraw.clear()\r\n    this.nodeDraw.clear()\r\n    this.otherDraw.clear()\r\n  }\r\n\r\n  // 添加必要的css样式到页面\r\n  addCss() {\r\n    this.cssEl = document.createElement('style')\r\n    this.cssEl.type = 'text/css'\r\n    this.cssEl.innerHTML = cssContent\r\n    document.head.appendChild(this.cssEl)\r\n  }\r\n\r\n  // 移除css\r\n  removeCss() {\r\n    document.head.removeChild(this.cssEl)\r\n  }\r\n\r\n  //  渲染，部分渲染\r\n  render(callback, source = '') {\r\n    this.batchExecution.push('render', () => {\r\n      this.initTheme()\r\n      this.renderer.render(callback, source)\r\n    })\r\n  }\r\n\r\n  //  重新渲染\r\n  reRender(callback, source = '') {\r\n    this.renderer.reRender = true // 标记为重新渲染\r\n    this.renderer.clearCache() // 清空节点缓存池\r\n    this.clearDraw() // 清空画布\r\n    this.render(callback, (source = ''))\r\n  }\r\n\r\n  // 获取或更新容器尺寸位置信息\r\n  getElRectInfo() {\r\n    this.elRect = this.el.getBoundingClientRect()\r\n    this.width = this.elRect.width\r\n    this.height = this.elRect.height\r\n    if (this.width <= 0 || this.height <= 0)\r\n      throw new Error('容器元素el的宽高不能为0')\r\n  }\r\n\r\n  //  容器尺寸变化，调整尺寸\r\n  resize() {\r\n    this.getElRectInfo()\r\n    this.svg.size(this.width, this.height)\r\n    this.emit('resize')\r\n  }\r\n\r\n  //  监听事件\r\n  on(event, fn) {\r\n    this.event.on(event, fn)\r\n  }\r\n\r\n  //  触发事件\r\n  emit(event, ...args) {\r\n    this.event.emit(event, ...args)\r\n  }\r\n\r\n  //  解绑事件\r\n  off(event, fn) {\r\n    this.event.off(event, fn)\r\n  }\r\n\r\n  // 初始化缓存数据\r\n  initCache() {\r\n    this.commonCaches = {\r\n      measureCustomNodeContentSizeEl: null,\r\n      measureRichtextNodeTextSizeEl: null\r\n    }\r\n  }\r\n\r\n  //  设置主题\r\n  initTheme() {\r\n    // 合并主题配置\r\n    this.themeConfig = merge(theme[this.opt.theme], this.opt.themeConfig)\r\n    // 设置背景样式\r\n    Style.setBackgroundStyle(this.el, this.themeConfig)\r\n  }\r\n\r\n  //  设置主题\r\n  setTheme(theme, notRender = false) {\r\n    this.execCommand('CLEAR_ACTIVE_NODE')\r\n    this.opt.theme = theme\r\n    if (!notRender) {\r\n      this.render(null, CONSTANTS.CHANGE_THEME)\r\n    }\r\n    this.emit('view_theme_change', theme)\r\n  }\r\n\r\n  //  获取当前主题\r\n  getTheme() {\r\n    return this.opt.theme\r\n  }\r\n\r\n  //  设置主题配置\r\n  setThemeConfig(config, notRender = false) {\r\n    // 计算改变了的配置\r\n    const changedConfig = getObjectChangedProps(this.themeConfig, config)\r\n    this.opt.themeConfig = config\r\n    if (!notRender) {\r\n      // 检查改变的是否是节点大小无关的主题属性\r\n      let res = checkIsNodeSizeIndependenceConfig(changedConfig)\r\n      this.render(null, res ? '' : CONSTANTS.CHANGE_THEME)\r\n    }\r\n  }\r\n\r\n  //  获取自定义主题配置\r\n  getCustomThemeConfig() {\r\n    return this.opt.themeConfig\r\n  }\r\n\r\n  //  获取某个主题配置值\r\n  getThemeConfig(prop) {\r\n    return prop === undefined ? this.themeConfig : this.themeConfig[prop]\r\n  }\r\n\r\n  // 获取配置\r\n  getConfig(prop) {\r\n    return prop === undefined ? this.opt : this.opt[prop]\r\n  }\r\n\r\n  // 更新配置\r\n  updateConfig(opt = {}) {\r\n    this.opt = this.handleOpt(merge.all([defaultOpt, this.opt, opt]))\r\n  }\r\n\r\n  //  获取当前布局结构\r\n  getLayout() {\r\n    return this.opt.layout\r\n  }\r\n\r\n  //  设置布局结构\r\n  setLayout(layout, notRender = false) {\r\n    // 检查布局配置\r\n    if (!layoutValueList.includes(layout)) {\r\n      layout = CONSTANTS.LAYOUT.LOGICAL_STRUCTURE\r\n    }\r\n    this.opt.layout = layout\r\n    this.view.reset()\r\n    this.renderer.setLayout()\r\n    if (!notRender) {\r\n      this.render(null, CONSTANTS.CHANGE_LAYOUT)\r\n    }\r\n    this.emit('layout_change', layout)\r\n  }\r\n\r\n  //  执行命令\r\n  execCommand(...args) {\r\n    this.command.exec(...args)\r\n  }\r\n\r\n  // 更新画布数据，如果新的数据是在当前画布节点数据基础上增删改查后形成的，那么可以使用该方法来更新画布数据\r\n  updateData(data) {\r\n    this.renderer.setData(data)\r\n    this.render()\r\n    this.command.addHistory()\r\n  }\r\n\r\n  //  动态设置思维导图数据，纯节点数据\r\n  setData(data) {\r\n    data = this.handleData(data)\r\n    this.opt.data = data\r\n    this.execCommand('CLEAR_ACTIVE_NODE')\r\n    this.command.clearHistory()\r\n    this.command.addHistory()\r\n    this.renderer.setData(data)\r\n    this.reRender(() => {}, CONSTANTS.SET_DATA)\r\n    this.emit('set_data', data)\r\n  }\r\n\r\n  //  动态设置思维导图数据，包括节点数据、布局、主题、视图\r\n  setFullData(data) {\r\n    if (data.root) {\r\n      this.setData(data.root)\r\n    }\r\n    if (data.layout) {\r\n      this.setLayout(data.layout)\r\n    }\r\n    if (data.theme) {\r\n      if (data.theme.template) {\r\n        this.setTheme(data.theme.template)\r\n      }\r\n      if (data.theme.config) {\r\n        this.setThemeConfig(data.theme.config)\r\n      }\r\n    }\r\n    if (data.view) {\r\n      this.view.setTransformData(data.view)\r\n    }\r\n  }\r\n\r\n  //  获取思维导图数据，节点树、主题、布局等\r\n  getData(withConfig) {\r\n    let nodeData = this.command.getCopyData()\r\n    let data = {}\r\n    if (withConfig) {\r\n      data = {\r\n        layout: this.getLayout(),\r\n        root: nodeData,\r\n        theme: {\r\n          template: this.getTheme(),\r\n          config: this.getCustomThemeConfig()\r\n        },\r\n        view: this.view.getTransformData()\r\n      }\r\n    } else {\r\n      data = nodeData\r\n    }\r\n    return simpleDeepClone(data)\r\n  }\r\n\r\n  //  导出\r\n  async export(...args) {\r\n    try {\r\n      let result = await this.doExport.export(...args)\r\n      return result\r\n    } catch (error) {\r\n      this.opt.errorHandler(ERROR_TYPES.EXPORT_ERROR, error)\r\n    }\r\n  }\r\n\r\n  //  转换位置\r\n  toPos(x, y) {\r\n    return {\r\n      x: x - this.elRect.left,\r\n      y: y - this.elRect.top\r\n    }\r\n  }\r\n\r\n  //  设置只读模式、编辑模式\r\n  setMode(mode) {\r\n    if (![CONSTANTS.MODE.READONLY, CONSTANTS.MODE.EDIT].includes(mode)) {\r\n      return\r\n    }\r\n    this.opt.readonly = mode === CONSTANTS.MODE.READONLY\r\n    if (this.opt.readonly) {\r\n      // 取消当前激活的元素\r\n      this.execCommand('CLEAR_ACTIVE_NODE')\r\n    }\r\n    this.emit('mode_change', mode)\r\n  }\r\n\r\n  // 获取svg数据\r\n  getSvgData({\r\n    paddingX = 0,\r\n    paddingY = 0,\r\n    ignoreWatermark = false,\r\n    addContentToHeader,\r\n    addContentToFooter,\r\n    node\r\n  } = {}) {\r\n    const { cssTextList, header, headerHeight, footer, footerHeight } =\r\n      handleGetSvgDataExtraContent({\r\n        addContentToHeader,\r\n        addContentToFooter\r\n      })\r\n    const svg = this.svg\r\n    const draw = this.draw\r\n    // 保存原始信息\r\n    const origWidth = svg.width()\r\n    const origHeight = svg.height()\r\n    const origTransform = draw.transform()\r\n    const elRect = this.elRect\r\n    // 去除放大缩小的变换效果\r\n    draw.scale(1 / origTransform.scaleX, 1 / origTransform.scaleY)\r\n    // 获取变换后的位置尺寸信息，其实是getBoundingClientRect方法的包装方法\r\n    const rect = draw.rbox()\r\n    // 需要裁减的区域\r\n    let clipData = null\r\n    if (node) {\r\n      clipData = getNodeTreeBoundingRect(\r\n        node,\r\n        rect.x,\r\n        rect.y,\r\n        paddingX,\r\n        paddingY\r\n      )\r\n    }\r\n    // 内边距\r\n    const fixHeight = 0\r\n    rect.width += paddingX * 2\r\n    rect.height += paddingY * 2 + fixHeight + headerHeight + footerHeight\r\n    draw.translate(paddingX, paddingY)\r\n    // 将svg设置为实际内容的宽高\r\n    svg.size(rect.width, rect.height)\r\n    // 把实际内容变换\r\n    draw.translate(-rect.x + elRect.left, -rect.y + elRect.top)\r\n    // 克隆一份数据\r\n    let clone = svg.clone()\r\n    // 是否存在水印\r\n    const hasWatermark = this.watermark && this.watermark.hasWatermark()\r\n    if (!ignoreWatermark && hasWatermark) {\r\n      this.watermark.isInExport = true\r\n      // 是否是仅导出时需要水印\r\n      const { onlyExport } = this.opt.watermarkConfig\r\n      // 是否需要重新绘制水印\r\n      const needReDrawWatermark =\r\n        rect.width > origWidth || rect.height > origHeight\r\n      // 如果实际图形宽高超出了屏幕宽高，且存在水印的话需要重新绘制水印，否则会出现超出部分没有水印的问题\r\n      if (needReDrawWatermark) {\r\n        this.width = rect.width\r\n        this.height = rect.height\r\n        this.watermark.onResize()\r\n        clone = svg.clone()\r\n        this.width = origWidth\r\n        this.height = origHeight\r\n        this.watermark.onResize()\r\n      } else if (onlyExport) {\r\n        // 如果是仅导出时需要水印，那么需要进行绘制\r\n        this.watermark.onResize()\r\n        clone = svg.clone()\r\n      }\r\n      // 如果是仅导出时需要水印，需要清除\r\n      if (onlyExport) {\r\n        this.watermark.clear()\r\n      }\r\n      this.watermark.isInExport = false\r\n    }\r\n    // 添加必要的样式\r\n    ;[cssContent, ...cssTextList].forEach(s => {\r\n      clone.add(SVG(`<style>${s}</style>`))\r\n    })\r\n    // 附加内容\r\n    if (header && headerHeight > 0) {\r\n      clone.findOne('.smm-container').translate(0, headerHeight)\r\n      header.width(rect.width)\r\n      header.y(paddingY)\r\n      clone.add(header, 0)\r\n    }\r\n    if (footer && footerHeight > 0) {\r\n      footer.width(rect.width)\r\n      footer.y(rect.height - paddingY - footerHeight)\r\n      clone.add(footer)\r\n    }\r\n    // 修正defs里定义的元素的id，因为clone时defs里的元素的id会继续递增，导致和内容中引用的id对不上\r\n    const defs = svg.find('defs')\r\n    const defs2 = clone.find('defs')\r\n    defs.forEach((def, defIndex) => {\r\n      const def2 = defs2[defIndex]\r\n      if (!def2) return\r\n      const children = def.children()\r\n      const children2 = def2.children()\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i]\r\n        const child2 = children2[i]\r\n        if (child && child2) {\r\n          child2.attr('id', child.attr('id'))\r\n        }\r\n      }\r\n    })\r\n    // 恢复原先的大小和变换信息\r\n    svg.size(origWidth, origHeight)\r\n    draw.transform(origTransform)\r\n\r\n    return {\r\n      svg: clone, // 思维导图图形的整体svg元素，包括：svg（画布容器）、g（实际的思维导图组）\r\n      svgHTML: clone.svg(), // svg字符串\r\n      clipData,\r\n      rect: {\r\n        ...rect, // 思维导图图形未缩放时的位置尺寸等信息\r\n        ratio: rect.width / rect.height // 思维导图图形的宽高比\r\n      },\r\n      origWidth, // 画布宽度\r\n      origHeight, // 画布高度\r\n      scaleX: origTransform.scaleX, // 思维导图图形的水平缩放值\r\n      scaleY: origTransform.scaleY // 思维导图图形的垂直缩放值\r\n    }\r\n  }\r\n\r\n  // 添加插件\r\n  addPlugin(plugin, opt) {\r\n    let index = MindMap.hasPlugin(plugin)\r\n    if (index === -1) {\r\n      MindMap.usePlugin(plugin, opt)\r\n      this.initPlugin(plugin)\r\n    }\r\n  }\r\n\r\n  // 移除插件\r\n  removePlugin(plugin) {\r\n    let index = MindMap.hasPlugin(plugin)\r\n    if (index !== -1) {\r\n      MindMap.pluginList.splice(index, 1)\r\n      if (this[plugin.instanceName]) {\r\n        if (this[plugin.instanceName].beforePluginRemove) {\r\n          this[plugin.instanceName].beforePluginRemove()\r\n        }\r\n        delete this[plugin.instanceName]\r\n      }\r\n    }\r\n  }\r\n\r\n  // 实例化插件\r\n  initPlugin(plugin) {\r\n    this[plugin.instanceName] = new plugin({\r\n      mindMap: this,\r\n      pluginOpt: plugin.pluginOpt\r\n    })\r\n  }\r\n\r\n  // 销毁\r\n  destroy() {\r\n    this.emit('beforeDestroy')\r\n    // 清除节点编辑框\r\n    this.renderer.textEdit.hideEditTextBox()\r\n    // 清除关联线文字编辑框\r\n    if (this.associativeLine) {\r\n      this.associativeLine.hideEditTextBox()\r\n    }\r\n    // 移除插件\r\n    ;[...MindMap.pluginList].forEach(plugin => {\r\n      if (\r\n        this[plugin.instanceName] &&\r\n        this[plugin.instanceName].beforePluginDestroy\r\n      ) {\r\n        this[plugin.instanceName].beforePluginDestroy()\r\n      }\r\n      this[plugin.instanceName] = null\r\n    })\r\n    // 解绑事件\r\n    this.event.unbind()\r\n    // 移除画布节点\r\n    this.svg.remove()\r\n    // 去除给容器元素设置的背景样式\r\n    Style.removeBackgroundStyle(this.el)\r\n    // 移除给容器元素添加的类名\r\n    this.el.classList.remove('smm-mind-map-container')\r\n    this.el.innerHTML = ''\r\n    this.el = null\r\n    this.removeCss()\r\n  }\r\n}\r\n\r\n// 插件列表\r\nMindMap.pluginList = []\r\nMindMap.usePlugin = (plugin, opt = {}) => {\r\n  if (MindMap.hasPlugin(plugin) !== -1) return MindMap\r\n  plugin.pluginOpt = opt\r\n  MindMap.pluginList.push(plugin)\r\n  return MindMap\r\n}\r\nMindMap.hasPlugin = plugin => {\r\n  return MindMap.pluginList.findIndex(item => {\r\n    return item === plugin\r\n  })\r\n}\r\n\r\n// 定义新主题\r\nMindMap.defineTheme = (name, config = {}) => {\r\n  if (theme[name]) {\r\n    return new Error('该主题名称已存在')\r\n  }\r\n  theme[name] = merge(defaultTheme, config)\r\n}\r\n\r\nexport default MindMap\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}