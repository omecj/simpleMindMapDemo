{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { measureText, resizeImgSize, removeHtmlStyle, addHtmlStyle, checkIsRichText, isUndef, createForeignObjectNode } from '../../../utils';\nimport { Image as SVGImage, SVG, A, G, Rect, Text } from '@svgdotjs/svg.js';\nimport iconsSvg from '../../../svg/icons';\nimport { CONSTANTS } from '../../../constants/constant';\nimport { defenseXSS } from '../../../utils/xss';\n\n//  创建图片节点\nfunction createImgNode() {\n  const img = this.getData('image');\n  if (!img) {\n    return;\n  }\n  const imgSize = this.getImgShowSize();\n  const node = new SVGImage().load(img).size(...imgSize);\n  // 如果指定了加载失败显示的图片，那么加载一下图片检测是否失败\n  const {\n    defaultNodeImage\n  } = this.mindMap.opt;\n  if (defaultNodeImage) {\n    const imgEl = new Image();\n    imgEl.onerror = () => {\n      node.load(defaultNodeImage);\n    };\n    imgEl.src = img;\n  }\n  if (this.getData('imageTitle')) {\n    node.attr('title', this.getData('imageTitle'));\n  }\n  node.on('dblclick', e => {\n    this.mindMap.emit('node_img_dblclick', this, e);\n  });\n  node.on('mouseenter', e => {\n    this.mindMap.emit('node_img_mouseenter', this, node, e);\n  });\n  node.on('mouseleave', e => {\n    this.mindMap.emit('node_img_mouseleave', this, node, e);\n  });\n  node.on('mousemove', e => {\n    this.mindMap.emit('node_img_mousemove', this, node, e);\n  });\n  return {\n    node,\n    width: imgSize[0],\n    height: imgSize[1]\n  };\n}\n\n//  获取图片显示宽高\nfunction getImgShowSize() {\n  const {\n    custom,\n    width,\n    height\n  } = this.getData('imageSize');\n  // 如果是自定义了图片的宽高，那么不受最大宽高限制\n  if (custom) return [width, height];\n  return resizeImgSize(width, height, this.mindMap.themeConfig.imgMaxWidth, this.mindMap.themeConfig.imgMaxHeight);\n}\n\n//  创建icon节点\nfunction createIconNode() {\n  let _data = this.getData();\n  if (!_data.icon || _data.icon.length <= 0) {\n    return [];\n  }\n  let iconSize = this.mindMap.themeConfig.iconSize;\n  return _data.icon.map(item => {\n    let src = iconsSvg.getNodeIconListIcon(item, this.mindMap.opt.iconList || []);\n    let node = null;\n    // svg图标\n    if (/^<svg/.test(src)) {\n      node = SVG(src);\n    } else {\n      // 图片图标\n      node = new SVGImage().load(src);\n    }\n    node.size(iconSize, iconSize);\n    node.on('click', e => {\n      this.mindMap.emit('node_icon_click', this, item, e, node);\n    });\n    node.on('mouseenter', e => {\n      this.mindMap.emit('node_icon_mouseenter', this, item, e, node);\n    });\n    node.on('mouseleave', e => {\n      this.mindMap.emit('node_icon_mouseleave', this, item, e, node);\n    });\n    return {\n      node,\n      width: iconSize,\n      height: iconSize\n    };\n  });\n}\n\n// 创建富文本节点\nfunction createRichTextNode() {\n  const {\n    textAutoWrapWidth\n  } = this.mindMap.opt;\n  let g = new G();\n  // 重新设置富文本节点内容\n  let recoverText = false;\n  if (this.getData('resetRichText')) {\n    delete this.nodeData.data.resetRichText;\n    recoverText = true;\n  }\n  if ([CONSTANTS.CHANGE_THEME].includes(this.mindMap.renderer.renderSource)) {\n    // 如果自定义过样式则不允许覆盖\n    if (!this.hasCustomStyle()) {\n      recoverText = true;\n    }\n  }\n  let text = this.getData('text');\n  if (recoverText && !isUndef(text)) {\n    // 判断节点内容是否是富文本\n    let isRichText = checkIsRichText(text);\n    // 样式字符串\n    let style = this.style.createStyleText();\n    if (isRichText) {\n      // 如果是富文本那么线移除内联样式\n      text = removeHtmlStyle(text);\n      // 再添加新的内联样式\n      let _text = text;\n      text = addHtmlStyle(text, 'span', style);\n      // 给span添加样式没有成功，则尝试给strong标签添加样式\n      if (text === _text) {\n        text = addHtmlStyle(text, 'strong', style);\n      }\n    } else {\n      // 非富文本\n      text = `<p><span style=\"${style}\">${text}</span></p>`;\n    }\n    this.setData({\n      text: text\n    });\n  }\n  let html = `<div>${defenseXSS(this.getData('text'))}</div>`;\n  if (!this.mindMap.commonCaches.measureRichtextNodeTextSizeEl) {\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl = document.createElement('div');\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl.style.position = 'fixed';\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl.style.left = '-999999px';\n    this.mindMap.el.appendChild(this.mindMap.commonCaches.measureRichtextNodeTextSizeEl);\n  }\n  let div = this.mindMap.commonCaches.measureRichtextNodeTextSizeEl;\n  div.innerHTML = html;\n  let el = div.children[0];\n  el.classList.add('smm-richtext-node-wrap');\n  el.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n  el.style.maxWidth = textAutoWrapWidth + 'px';\n  let {\n    width,\n    height\n  } = el.getBoundingClientRect();\n  // 如果文本为空，那么需要计算一个默认高度\n  if (height <= 0) {\n    div.innerHTML = '<p>abc123我和你</p>';\n    let elTmp = div.children[0];\n    elTmp.classList.add('smm-richtext-node-wrap');\n    height = elTmp.getBoundingClientRect().height;\n    div.innerHTML = html;\n  }\n  width = Math.min(Math.ceil(width) + 1, textAutoWrapWidth); // 修复getBoundingClientRect方法对实际宽度是小数的元素获取到的值是整数，导致宽度不够文本发生换行的问题\n  height = Math.ceil(height);\n  g.attr('data-width', width);\n  g.attr('data-height', height);\n  const foreignObject = createForeignObjectNode({\n    el: div.children[0],\n    width,\n    height\n  });\n  g.add(foreignObject);\n  return {\n    node: g,\n    nodeContent: foreignObject,\n    width,\n    height\n  };\n}\n\n//  创建文本节点\nfunction createTextNode() {\n  if (this.getData('richText')) {\n    return this.createRichTextNode();\n  }\n  if (this.getData('resetRichText')) {\n    delete this.nodeData.data.resetRichText;\n  }\n  let g = new G();\n  let fontSize = this.getStyle('fontSize', false);\n  let lineHeight = this.getStyle('lineHeight', false);\n  // 文本超长自动换行\n  let textStyle = this.style.getTextFontStyle();\n  let textArr = [];\n  if (!isUndef(this.getData('text'))) {\n    textArr = String(this.getData('text')).split(/\\n/gim);\n  }\n  let maxWidth = this.mindMap.opt.textAutoWrapWidth;\n  let isMultiLine = false;\n  textArr.forEach((item, index) => {\n    let arr = item.split('');\n    let lines = [];\n    let line = [];\n    while (arr.length) {\n      let str = arr.shift();\n      let text = [...line, str].join('');\n      if (measureText(text, textStyle).width <= maxWidth) {\n        line.push(str);\n      } else {\n        lines.push(line.join(''));\n        line = [str];\n      }\n    }\n    if (line.length > 0) {\n      lines.push(line.join(''));\n    }\n    if (lines.length > 1) {\n      isMultiLine = true;\n    }\n    textArr[index] = lines.join('\\n');\n  });\n  textArr = textArr.join('\\n').split(/\\n/gim);\n  textArr.forEach((item, index) => {\n    let node = new Text().text(item);\n    this.style.text(node);\n    node.y(fontSize * lineHeight * index);\n    g.add(node);\n  });\n  let {\n    width,\n    height\n  } = g.bbox();\n  width = Math.min(Math.ceil(width), maxWidth);\n  height = Math.ceil(height);\n  g.attr('data-width', width);\n  g.attr('data-height', height);\n  g.attr('data-ismultiLine', isMultiLine || textArr.length > 1);\n  return {\n    node: g,\n    width,\n    height\n  };\n}\n\n//  创建超链接节点\nfunction createHyperlinkNode() {\n  let {\n    hyperlink,\n    hyperlinkTitle\n  } = this.getData();\n  if (!hyperlink) {\n    return;\n  }\n  let iconSize = this.mindMap.themeConfig.iconSize;\n  let node = new SVG().size(iconSize, iconSize);\n  // 超链接节点\n  let a = new A().to(hyperlink).target('_blank');\n  a.node.addEventListener('click', e => {\n    e.stopPropagation();\n  });\n  if (hyperlinkTitle) {\n    node.add(SVG(`<title>${hyperlinkTitle}</title>`));\n  }\n  // 添加一个透明的层，作为鼠标区域\n  a.rect(iconSize, iconSize).fill({\n    color: 'transparent'\n  });\n  // 超链接图标\n  let iconNode = SVG(iconsSvg.hyperlink).size(iconSize, iconSize);\n  this.style.iconNode(iconNode);\n  a.add(iconNode);\n  node.add(a);\n  return {\n    node,\n    width: iconSize,\n    height: iconSize\n  };\n}\n\n//  创建标签节点\nfunction createTagNode() {\n  let tagData = this.getData('tag');\n  if (!tagData || tagData.length <= 0) {\n    return [];\n  }\n  let nodes = [];\n  tagData.slice(0, this.mindMap.opt.maxTag).forEach((item, index) => {\n    let tag = new G();\n    tag.on('click', () => {\n      this.mindMap.emit('node_tag_click', this, item);\n    });\n    // 标签文本\n    let text = new Text().text(item).x(8).cy(8);\n    this.style.tagText(text, index);\n    let {\n      width\n    } = text.bbox();\n    // 标签矩形\n    let rect = new Rect().size(width + 16, 20);\n    // 先从自定义的颜色中获取颜色，没有的话就按照内容生成\n    const tagsColorList = this.mindMap.opt.tagsColorMap || {};\n    const color = tagsColorList[text.node.textContent];\n    this.style.tagRect(rect, text, color);\n    tag.add(rect).add(text);\n    nodes.push({\n      node: tag,\n      width: width + 16,\n      height: 20\n    });\n  });\n  return nodes;\n}\n\n//  创建备注节点\nfunction createNoteNode() {\n  if (!this.getData('note')) {\n    return null;\n  }\n  let iconSize = this.mindMap.themeConfig.iconSize;\n  let node = new SVG().attr('cursor', 'pointer').addClass('smm-node-note').size(iconSize, iconSize);\n  // 透明的层，用来作为鼠标区域\n  node.add(new Rect().size(iconSize, iconSize).fill({\n    color: 'transparent'\n  }));\n  // 备注图标\n  let iconNode = SVG(iconsSvg.note).size(iconSize, iconSize);\n  this.style.iconNode(iconNode);\n  node.add(iconNode);\n  // 备注tooltip\n  if (!this.mindMap.opt.customNoteContentShow) {\n    if (!this.noteEl) {\n      this.noteEl = document.createElement('div');\n      this.noteEl.style.cssText = `\n          position: fixed;\n          padding: 10px;\n          border-radius: 5px;\n          box-shadow: 0 2px 5px rgb(0 0 0 / 10%);\n          display: none;\n          background-color: #fff;\n          z-index: ${this.mindMap.opt.nodeNoteTooltipZIndex}\n      `;\n      const targetNode = this.mindMap.opt.customInnerElsAppendTo || document.body;\n      targetNode.appendChild(this.noteEl);\n    }\n    this.noteEl.innerText = this.getData('note');\n  }\n  node.on('mouseover', () => {\n    const {\n      left,\n      top\n    } = this.getNoteContentPosition();\n    if (!this.mindMap.opt.customNoteContentShow) {\n      this.noteEl.style.left = left + 'px';\n      this.noteEl.style.top = top + 'px';\n      this.noteEl.style.display = 'block';\n    } else {\n      this.mindMap.opt.customNoteContentShow.show(this.getData('note'), left, top, this);\n    }\n  });\n  node.on('mouseout', () => {\n    if (!this.mindMap.opt.customNoteContentShow) {\n      this.noteEl.style.display = 'none';\n    } else {\n      this.mindMap.opt.customNoteContentShow.hide();\n    }\n  });\n  return {\n    node,\n    width: iconSize,\n    height: iconSize\n  };\n}\n\n//  创建附件节点\nfunction createAttachmentNode() {\n  const {\n    attachmentUrl,\n    attachmentName\n  } = this.getData();\n  if (!attachmentUrl) {\n    return;\n  }\n  const iconSize = this.mindMap.themeConfig.iconSize;\n  const node = new SVG().attr('cursor', 'pointer').size(iconSize, iconSize);\n  if (attachmentName) {\n    node.add(SVG(`<title>${attachmentName}</title>`));\n  }\n  // 透明的层，用来作为鼠标区域\n  node.add(new Rect().size(iconSize, iconSize).fill({\n    color: 'transparent'\n  }));\n  // 备注图标\n  const iconNode = SVG(iconsSvg.attachment).size(iconSize, iconSize);\n  this.style.iconNode(iconNode);\n  node.add(iconNode);\n  node.on('click', e => {\n    this.mindMap.emit('node_attachmentClick', this, e, node);\n  });\n  node.on('contextmenu', e => {\n    this.mindMap.emit('node_attachmentContextmenu', this, e, node);\n  });\n  return {\n    node,\n    width: iconSize,\n    height: iconSize\n  };\n}\n\n// 获取节点备注显示位置\nfunction getNoteContentPosition() {\n  const iconSize = this.mindMap.themeConfig.iconSize;\n  const {\n    scaleY\n  } = this.mindMap.view.getTransformData().transform;\n  const iconSizeAddScale = iconSize * scaleY;\n  let {\n    left,\n    top\n  } = this._noteData.node.node.getBoundingClientRect();\n  top += iconSizeAddScale;\n  return {\n    left,\n    top\n  };\n}\n\n// 测量自定义节点内容元素的宽高\nfunction measureCustomNodeContentSize(content) {\n  if (!this.mindMap.commonCaches.measureCustomNodeContentSizeEl) {\n    this.mindMap.commonCaches.measureCustomNodeContentSizeEl = document.createElement('div');\n    this.mindMap.commonCaches.measureCustomNodeContentSizeEl.style.cssText = `\n      position: fixed;\n      left: -99999px;\n      top: -99999px;\n    `;\n    this.mindMap.el.appendChild(this.mindMap.commonCaches.measureCustomNodeContentSizeEl);\n  }\n  this.mindMap.commonCaches.measureCustomNodeContentSizeEl.innerHTML = '';\n  this.mindMap.commonCaches.measureCustomNodeContentSizeEl.appendChild(content);\n  let rect = this.mindMap.commonCaches.measureCustomNodeContentSizeEl.getBoundingClientRect();\n  return {\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n// 是否使用的是自定义节点内容\nfunction isUseCustomNodeContent() {\n  return !!this._customNodeContent;\n}\nexport default {\n  createImgNode,\n  getImgShowSize,\n  createIconNode,\n  createRichTextNode,\n  createTextNode,\n  createHyperlinkNode,\n  createTagNode,\n  createNoteNode,\n  createAttachmentNode,\n  getNoteContentPosition,\n  measureCustomNodeContentSize,\n  isUseCustomNodeContent\n};","map":{"version":3,"names":["measureText","resizeImgSize","removeHtmlStyle","addHtmlStyle","checkIsRichText","isUndef","createForeignObjectNode","Image","SVGImage","SVG","A","G","Rect","Text","iconsSvg","CONSTANTS","defenseXSS","createImgNode","img","getData","imgSize","getImgShowSize","node","load","size","defaultNodeImage","mindMap","opt","imgEl","onerror","src","attr","on","e","emit","width","height","custom","themeConfig","imgMaxWidth","imgMaxHeight","createIconNode","_data","icon","length","iconSize","map","item","getNodeIconListIcon","iconList","test","createRichTextNode","textAutoWrapWidth","g","recoverText","nodeData","data","resetRichText","CHANGE_THEME","includes","renderer","renderSource","hasCustomStyle","text","isRichText","style","createStyleText","_text","setData","html","commonCaches","measureRichtextNodeTextSizeEl","document","createElement","position","left","el","appendChild","div","innerHTML","children","classList","add","setAttribute","maxWidth","getBoundingClientRect","elTmp","Math","min","ceil","foreignObject","nodeContent","createTextNode","fontSize","getStyle","lineHeight","textStyle","getTextFontStyle","textArr","String","split","isMultiLine","forEach","index","arr","lines","line","str","shift","join","push","y","bbox","createHyperlinkNode","hyperlink","hyperlinkTitle","a","to","target","addEventListener","stopPropagation","rect","fill","color","iconNode","createTagNode","tagData","nodes","slice","maxTag","tag","x","cy","tagText","tagsColorList","tagsColorMap","textContent","tagRect","createNoteNode","addClass","note","customNoteContentShow","noteEl","cssText","nodeNoteTooltipZIndex","targetNode","customInnerElsAppendTo","body","innerText","top","getNoteContentPosition","display","show","hide","createAttachmentNode","attachmentUrl","attachmentName","attachment","scaleY","view","getTransformData","transform","iconSizeAddScale","_noteData","measureCustomNodeContentSize","content","measureCustomNodeContentSizeEl","isUseCustomNodeContent","_customNodeContent"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/node/nodeCreateContents.js"],"sourcesContent":["import {\r\n  measureText,\r\n  resizeImgSize,\r\n  removeHtmlStyle,\r\n  addHtmlStyle,\r\n  checkIsRichText,\r\n  isUndef,\r\n  createForeignObjectNode\r\n} from '../../../utils'\r\nimport { Image as SVGImage, SVG, A, G, Rect, Text } from '@svgdotjs/svg.js'\r\nimport iconsSvg from '../../../svg/icons'\r\nimport { CONSTANTS } from '../../../constants/constant'\r\nimport { defenseXSS } from '../../../utils/xss'\r\n\r\n//  创建图片节点\r\nfunction createImgNode() {\r\n  const img = this.getData('image')\r\n  if (!img) {\r\n    return\r\n  }\r\n  const imgSize = this.getImgShowSize()\r\n  const node = new SVGImage().load(img).size(...imgSize)\r\n  // 如果指定了加载失败显示的图片，那么加载一下图片检测是否失败\r\n  const { defaultNodeImage } = this.mindMap.opt\r\n  if (defaultNodeImage) {\r\n    const imgEl = new Image()\r\n    imgEl.onerror = () => {\r\n      node.load(defaultNodeImage)\r\n    }\r\n    imgEl.src = img\r\n  }\r\n  if (this.getData('imageTitle')) {\r\n    node.attr('title', this.getData('imageTitle'))\r\n  }\r\n  node.on('dblclick', e => {\r\n    this.mindMap.emit('node_img_dblclick', this, e)\r\n  })\r\n  node.on('mouseenter', e => {\r\n    this.mindMap.emit('node_img_mouseenter', this, node, e)\r\n  })\r\n  node.on('mouseleave', e => {\r\n    this.mindMap.emit('node_img_mouseleave', this, node, e)\r\n  })\r\n  node.on('mousemove', e => {\r\n    this.mindMap.emit('node_img_mousemove', this, node, e)\r\n  })\r\n  return {\r\n    node,\r\n    width: imgSize[0],\r\n    height: imgSize[1]\r\n  }\r\n}\r\n\r\n//  获取图片显示宽高\r\nfunction getImgShowSize() {\r\n  const { custom, width, height } = this.getData('imageSize')\r\n  // 如果是自定义了图片的宽高，那么不受最大宽高限制\r\n  if (custom) return [width, height]\r\n  return resizeImgSize(\r\n    width,\r\n    height,\r\n    this.mindMap.themeConfig.imgMaxWidth,\r\n    this.mindMap.themeConfig.imgMaxHeight\r\n  )\r\n}\r\n\r\n//  创建icon节点\r\nfunction createIconNode() {\r\n  let _data = this.getData()\r\n  if (!_data.icon || _data.icon.length <= 0) {\r\n    return []\r\n  }\r\n  let iconSize = this.mindMap.themeConfig.iconSize\r\n  return _data.icon.map(item => {\r\n    let src = iconsSvg.getNodeIconListIcon(\r\n      item,\r\n      this.mindMap.opt.iconList || []\r\n    )\r\n    let node = null\r\n    // svg图标\r\n    if (/^<svg/.test(src)) {\r\n      node = SVG(src)\r\n    } else {\r\n      // 图片图标\r\n      node = new SVGImage().load(src)\r\n    }\r\n    node.size(iconSize, iconSize)\r\n    node.on('click', e => {\r\n      this.mindMap.emit('node_icon_click', this, item, e, node)\r\n    })\r\n    node.on('mouseenter', e => {\r\n      this.mindMap.emit('node_icon_mouseenter', this, item, e, node)\r\n    })\r\n    node.on('mouseleave', e => {\r\n      this.mindMap.emit('node_icon_mouseleave', this, item, e, node)\r\n    })\r\n    return {\r\n      node,\r\n      width: iconSize,\r\n      height: iconSize\r\n    }\r\n  })\r\n}\r\n\r\n// 创建富文本节点\r\nfunction createRichTextNode() {\r\n  const { textAutoWrapWidth } = this.mindMap.opt\r\n  let g = new G()\r\n  // 重新设置富文本节点内容\r\n  let recoverText = false\r\n  if (this.getData('resetRichText')) {\r\n    delete this.nodeData.data.resetRichText\r\n    recoverText = true\r\n  }\r\n  if ([CONSTANTS.CHANGE_THEME].includes(this.mindMap.renderer.renderSource)) {\r\n    // 如果自定义过样式则不允许覆盖\r\n    if (!this.hasCustomStyle()) {\r\n      recoverText = true\r\n    }\r\n  }\r\n  let text = this.getData('text')\r\n  if (recoverText && !isUndef(text)) {\r\n    // 判断节点内容是否是富文本\r\n    let isRichText = checkIsRichText(text)\r\n    // 样式字符串\r\n    let style = this.style.createStyleText()\r\n    if (isRichText) {\r\n      // 如果是富文本那么线移除内联样式\r\n      text = removeHtmlStyle(text)\r\n      // 再添加新的内联样式\r\n      let _text = text\r\n      text = addHtmlStyle(text, 'span', style)\r\n      // 给span添加样式没有成功，则尝试给strong标签添加样式\r\n      if (text === _text) {\r\n        text = addHtmlStyle(text, 'strong', style)\r\n      }\r\n    } else {\r\n      // 非富文本\r\n      text = `<p><span style=\"${style}\">${text}</span></p>`\r\n    }\r\n    this.setData({\r\n      text: text\r\n    })\r\n  }\r\n  let html = `<div>${defenseXSS(this.getData('text'))}</div>`\r\n  if (!this.mindMap.commonCaches.measureRichtextNodeTextSizeEl) {\r\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl =\r\n      document.createElement('div')\r\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl.style.position =\r\n      'fixed'\r\n    this.mindMap.commonCaches.measureRichtextNodeTextSizeEl.style.left =\r\n      '-999999px'\r\n    this.mindMap.el.appendChild(\r\n      this.mindMap.commonCaches.measureRichtextNodeTextSizeEl\r\n    )\r\n  }\r\n  let div = this.mindMap.commonCaches.measureRichtextNodeTextSizeEl\r\n  div.innerHTML = html\r\n  let el = div.children[0]\r\n  el.classList.add('smm-richtext-node-wrap')\r\n  el.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml')\r\n  el.style.maxWidth = textAutoWrapWidth + 'px'\r\n  let { width, height } = el.getBoundingClientRect()\r\n  // 如果文本为空，那么需要计算一个默认高度\r\n  if (height <= 0) {\r\n    div.innerHTML = '<p>abc123我和你</p>'\r\n    let elTmp = div.children[0]\r\n    elTmp.classList.add('smm-richtext-node-wrap')\r\n    height = elTmp.getBoundingClientRect().height\r\n    div.innerHTML = html\r\n  }\r\n  width = Math.min(Math.ceil(width) + 1, textAutoWrapWidth) // 修复getBoundingClientRect方法对实际宽度是小数的元素获取到的值是整数，导致宽度不够文本发生换行的问题\r\n  height = Math.ceil(height)\r\n  g.attr('data-width', width)\r\n  g.attr('data-height', height)\r\n  const foreignObject = createForeignObjectNode({\r\n    el: div.children[0],\r\n    width,\r\n    height\r\n  })\r\n  g.add(foreignObject)\r\n  return {\r\n    node: g,\r\n    nodeContent: foreignObject,\r\n    width,\r\n    height\r\n  }\r\n}\r\n\r\n//  创建文本节点\r\nfunction createTextNode() {\r\n  if (this.getData('richText')) {\r\n    return this.createRichTextNode()\r\n  }\r\n  if (this.getData('resetRichText')) {\r\n    delete this.nodeData.data.resetRichText\r\n  }\r\n  let g = new G()\r\n  let fontSize = this.getStyle('fontSize', false)\r\n  let lineHeight = this.getStyle('lineHeight', false)\r\n  // 文本超长自动换行\r\n  let textStyle = this.style.getTextFontStyle()\r\n  let textArr = []\r\n  if (!isUndef(this.getData('text'))) {\r\n    textArr = String(this.getData('text')).split(/\\n/gim)\r\n  }\r\n  let maxWidth = this.mindMap.opt.textAutoWrapWidth\r\n  let isMultiLine = false\r\n  textArr.forEach((item, index) => {\r\n    let arr = item.split('')\r\n    let lines = []\r\n    let line = []\r\n    while (arr.length) {\r\n      let str = arr.shift()\r\n      let text = [...line, str].join('')\r\n      if (measureText(text, textStyle).width <= maxWidth) {\r\n        line.push(str)\r\n      } else {\r\n        lines.push(line.join(''))\r\n        line = [str]\r\n      }\r\n    }\r\n    if (line.length > 0) {\r\n      lines.push(line.join(''))\r\n    }\r\n    if (lines.length > 1) {\r\n      isMultiLine = true\r\n    }\r\n    textArr[index] = lines.join('\\n')\r\n  })\r\n  textArr = textArr.join('\\n').split(/\\n/gim)\r\n  textArr.forEach((item, index) => {\r\n    let node = new Text().text(item)\r\n    this.style.text(node)\r\n    node.y(fontSize * lineHeight * index)\r\n    g.add(node)\r\n  })\r\n  let { width, height } = g.bbox()\r\n  width = Math.min(Math.ceil(width), maxWidth)\r\n  height = Math.ceil(height)\r\n  g.attr('data-width', width)\r\n  g.attr('data-height', height)\r\n  g.attr('data-ismultiLine', isMultiLine || textArr.length > 1)\r\n  return {\r\n    node: g,\r\n    width,\r\n    height\r\n  }\r\n}\r\n\r\n//  创建超链接节点\r\nfunction createHyperlinkNode() {\r\n  let { hyperlink, hyperlinkTitle } = this.getData()\r\n  if (!hyperlink) {\r\n    return\r\n  }\r\n  let iconSize = this.mindMap.themeConfig.iconSize\r\n  let node = new SVG().size(iconSize, iconSize)\r\n  // 超链接节点\r\n  let a = new A().to(hyperlink).target('_blank')\r\n  a.node.addEventListener('click', e => {\r\n    e.stopPropagation()\r\n  })\r\n  if (hyperlinkTitle) {\r\n    node.add(SVG(`<title>${hyperlinkTitle}</title>`))\r\n  }\r\n  // 添加一个透明的层，作为鼠标区域\r\n  a.rect(iconSize, iconSize).fill({ color: 'transparent' })\r\n  // 超链接图标\r\n  let iconNode = SVG(iconsSvg.hyperlink).size(iconSize, iconSize)\r\n  this.style.iconNode(iconNode)\r\n  a.add(iconNode)\r\n  node.add(a)\r\n  return {\r\n    node,\r\n    width: iconSize,\r\n    height: iconSize\r\n  }\r\n}\r\n\r\n//  创建标签节点\r\nfunction createTagNode() {\r\n  let tagData = this.getData('tag')\r\n  if (!tagData || tagData.length <= 0) {\r\n    return []\r\n  }\r\n  let nodes = []\r\n  tagData.slice(0, this.mindMap.opt.maxTag).forEach((item, index) => {\r\n    let tag = new G()\r\n    tag.on('click', () => {\r\n      this.mindMap.emit('node_tag_click', this, item)\r\n    })\r\n    // 标签文本\r\n    let text = new Text().text(item).x(8).cy(8)\r\n    this.style.tagText(text, index)\r\n    let { width } = text.bbox()\r\n    // 标签矩形\r\n    let rect = new Rect().size(width + 16, 20)\r\n    // 先从自定义的颜色中获取颜色，没有的话就按照内容生成\r\n    const tagsColorList = this.mindMap.opt.tagsColorMap || {}\r\n    const color = tagsColorList[text.node.textContent]\r\n    this.style.tagRect(rect, text, color)\r\n    tag.add(rect).add(text)\r\n    nodes.push({\r\n      node: tag,\r\n      width: width + 16,\r\n      height: 20\r\n    })\r\n  })\r\n  return nodes\r\n}\r\n\r\n//  创建备注节点\r\nfunction createNoteNode() {\r\n  if (!this.getData('note')) {\r\n    return null\r\n  }\r\n  let iconSize = this.mindMap.themeConfig.iconSize\r\n  let node = new SVG()\r\n    .attr('cursor', 'pointer')\r\n    .addClass('smm-node-note')\r\n    .size(iconSize, iconSize)\r\n  // 透明的层，用来作为鼠标区域\r\n  node.add(new Rect().size(iconSize, iconSize).fill({ color: 'transparent' }))\r\n  // 备注图标\r\n  let iconNode = SVG(iconsSvg.note).size(iconSize, iconSize)\r\n  this.style.iconNode(iconNode)\r\n  node.add(iconNode)\r\n  // 备注tooltip\r\n  if (!this.mindMap.opt.customNoteContentShow) {\r\n    if (!this.noteEl) {\r\n      this.noteEl = document.createElement('div')\r\n      this.noteEl.style.cssText = `\r\n          position: fixed;\r\n          padding: 10px;\r\n          border-radius: 5px;\r\n          box-shadow: 0 2px 5px rgb(0 0 0 / 10%);\r\n          display: none;\r\n          background-color: #fff;\r\n          z-index: ${this.mindMap.opt.nodeNoteTooltipZIndex}\r\n      `\r\n      const targetNode =\r\n        this.mindMap.opt.customInnerElsAppendTo || document.body\r\n      targetNode.appendChild(this.noteEl)\r\n    }\r\n    this.noteEl.innerText = this.getData('note')\r\n  }\r\n  node.on('mouseover', () => {\r\n    const { left, top } = this.getNoteContentPosition()\r\n    if (!this.mindMap.opt.customNoteContentShow) {\r\n      this.noteEl.style.left = left + 'px'\r\n      this.noteEl.style.top = top + 'px'\r\n      this.noteEl.style.display = 'block'\r\n    } else {\r\n      this.mindMap.opt.customNoteContentShow.show(\r\n        this.getData('note'),\r\n        left,\r\n        top,\r\n        this\r\n      )\r\n    }\r\n  })\r\n  node.on('mouseout', () => {\r\n    if (!this.mindMap.opt.customNoteContentShow) {\r\n      this.noteEl.style.display = 'none'\r\n    } else {\r\n      this.mindMap.opt.customNoteContentShow.hide()\r\n    }\r\n  })\r\n  return {\r\n    node,\r\n    width: iconSize,\r\n    height: iconSize\r\n  }\r\n}\r\n\r\n//  创建附件节点\r\nfunction createAttachmentNode() {\r\n  const { attachmentUrl, attachmentName } = this.getData()\r\n  if (!attachmentUrl) {\r\n    return\r\n  }\r\n  const iconSize = this.mindMap.themeConfig.iconSize\r\n  const node = new SVG().attr('cursor', 'pointer').size(iconSize, iconSize)\r\n  if (attachmentName) {\r\n    node.add(SVG(`<title>${attachmentName}</title>`))\r\n  }\r\n  // 透明的层，用来作为鼠标区域\r\n  node.add(new Rect().size(iconSize, iconSize).fill({ color: 'transparent' }))\r\n  // 备注图标\r\n  const iconNode = SVG(iconsSvg.attachment).size(iconSize, iconSize)\r\n  this.style.iconNode(iconNode)\r\n  node.add(iconNode)\r\n  node.on('click', e => {\r\n    this.mindMap.emit('node_attachmentClick', this, e, node)\r\n  })\r\n  node.on('contextmenu', e => {\r\n    this.mindMap.emit('node_attachmentContextmenu', this, e, node)\r\n  })\r\n  return {\r\n    node,\r\n    width: iconSize,\r\n    height: iconSize\r\n  }\r\n}\r\n\r\n// 获取节点备注显示位置\r\nfunction getNoteContentPosition() {\r\n  const iconSize = this.mindMap.themeConfig.iconSize\r\n  const { scaleY } = this.mindMap.view.getTransformData().transform\r\n  const iconSizeAddScale = iconSize * scaleY\r\n  let { left, top } = this._noteData.node.node.getBoundingClientRect()\r\n  top += iconSizeAddScale\r\n  return {\r\n    left,\r\n    top\r\n  }\r\n}\r\n\r\n// 测量自定义节点内容元素的宽高\r\nfunction measureCustomNodeContentSize(content) {\r\n  if (!this.mindMap.commonCaches.measureCustomNodeContentSizeEl) {\r\n    this.mindMap.commonCaches.measureCustomNodeContentSizeEl =\r\n      document.createElement('div')\r\n    this.mindMap.commonCaches.measureCustomNodeContentSizeEl.style.cssText = `\r\n      position: fixed;\r\n      left: -99999px;\r\n      top: -99999px;\r\n    `\r\n    this.mindMap.el.appendChild(\r\n      this.mindMap.commonCaches.measureCustomNodeContentSizeEl\r\n    )\r\n  }\r\n  this.mindMap.commonCaches.measureCustomNodeContentSizeEl.innerHTML = ''\r\n  this.mindMap.commonCaches.measureCustomNodeContentSizeEl.appendChild(content)\r\n  let rect =\r\n    this.mindMap.commonCaches.measureCustomNodeContentSizeEl.getBoundingClientRect()\r\n  return {\r\n    width: rect.width,\r\n    height: rect.height\r\n  }\r\n}\r\n\r\n// 是否使用的是自定义节点内容\r\nfunction isUseCustomNodeContent() {\r\n  return !!this._customNodeContent\r\n}\r\n\r\nexport default {\r\n  createImgNode,\r\n  getImgShowSize,\r\n  createIconNode,\r\n  createRichTextNode,\r\n  createTextNode,\r\n  createHyperlinkNode,\r\n  createTagNode,\r\n  createNoteNode,\r\n  createAttachmentNode,\r\n  getNoteContentPosition,\r\n  measureCustomNodeContentSize,\r\n  isUseCustomNodeContent\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}