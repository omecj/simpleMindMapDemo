{"ast":null,"code":"import { Polygon, Path, SVG } from '@svgdotjs/svg.js';\nimport { CONSTANTS } from '../../../constants/constant';\n\n//  节点形状类\nexport default class Shape {\n  constructor(node) {\n    this.node = node;\n    this.mindMap = node.mindMap;\n  }\n\n  //  形状需要的padding\n  getShapePadding(width, height, paddingX, paddingY) {\n    const shape = this.node.getShape();\n    const defaultPaddingX = 15;\n    const defaultPaddingY = 5;\n    const actWidth = width + paddingX * 2;\n    const actHeight = height + paddingY * 2;\n    const actOffset = Math.abs(actWidth - actHeight);\n    switch (shape) {\n      case CONSTANTS.SHAPE.ROUNDED_RECTANGLE:\n        return {\n          paddingX: height > width ? (height - width) / 2 : 0,\n          paddingY: 0\n        };\n      case CONSTANTS.SHAPE.DIAMOND:\n        return {\n          paddingX: width / 2,\n          paddingY: height / 2\n        };\n      case CONSTANTS.SHAPE.PARALLELOGRAM:\n        return {\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\n          paddingY: 0\n        };\n      case CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE:\n        return {\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\n          paddingY: 0\n        };\n      case CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE:\n        return {\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\n          paddingY: 0\n        };\n      case CONSTANTS.SHAPE.ELLIPSE:\n        return {\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\n          paddingY: paddingY <= 0 ? defaultPaddingY : 0\n        };\n      case CONSTANTS.SHAPE.CIRCLE:\n        return {\n          paddingX: actHeight > actWidth ? actOffset / 2 : 0,\n          paddingY: actHeight < actWidth ? actOffset / 2 : 0\n        };\n      default:\n        return {\n          paddingX: 0,\n          paddingY: 0\n        };\n    }\n  }\n\n  //  创建形状节点\n  createShape() {\n    const shape = this.node.getShape();\n    let node = null;\n    // 矩形\n    if (shape === CONSTANTS.SHAPE.RECTANGLE) {\n      node = this.createRect();\n    } else if (shape === CONSTANTS.SHAPE.DIAMOND) {\n      // 菱形\n      node = this.createDiamond();\n    } else if (shape === CONSTANTS.SHAPE.PARALLELOGRAM) {\n      // 平行四边形\n      node = this.createParallelogram();\n    } else if (shape === CONSTANTS.SHAPE.ROUNDED_RECTANGLE) {\n      // 圆角矩形\n      node = this.createRoundedRectangle();\n    } else if (shape === CONSTANTS.SHAPE.OCTAGONAL_RECTANGLE) {\n      // 八角矩形\n      node = this.createOctagonalRectangle();\n    } else if (shape === CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE) {\n      // 外三角矩形\n      node = this.createOuterTriangularRectangle();\n    } else if (shape === CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE) {\n      // 内三角矩形\n      node = this.createInnerTriangularRectangle();\n    } else if (shape === CONSTANTS.SHAPE.ELLIPSE) {\n      // 椭圆\n      node = this.createEllipse();\n    } else if (shape === CONSTANTS.SHAPE.CIRCLE) {\n      // 圆\n      node = this.createCircle();\n    }\n    return node;\n  }\n\n  // 获取节点减去节点边框宽度、hover节点边框宽度后的尺寸\n  getNodeSize() {\n    const borderWidth = this.node.getBorderWidth();\n    let {\n      width,\n      height\n    } = this.node;\n    width -= borderWidth;\n    height -= borderWidth;\n    return {\n      width,\n      height\n    };\n  }\n\n  // 创建路径节点\n  createPath(pathStr) {\n    const {\n      customCreateNodePath\n    } = this.mindMap.opt;\n    if (customCreateNodePath) {\n      return SVG(customCreateNodePath(pathStr));\n    }\n    return new Path().plot(pathStr);\n  }\n\n  // 创建多边形节点\n  createPolygon(points) {\n    const {\n      customCreateNodePolygon\n    } = this.mindMap.opt;\n    if (customCreateNodePolygon) {\n      return SVG(customCreateNodePolygon(points));\n    }\n    return new Polygon().plot(points);\n  }\n\n  // 创建矩形\n  createRect() {\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    let borderRadius = this.node.style.merge('borderRadius');\n    const pathStr = `\n      M${borderRadius},0\n      L${width - borderRadius},0\n      C${width - borderRadius},0 ${width},${0} ${width},${borderRadius}\n      L${width},${height - borderRadius}\n      C${width},${height - borderRadius} ${width},${height} ${width - borderRadius},${height}\n      L${borderRadius},${height}\n      C${borderRadius},${height} ${0},${height} ${0},${height - borderRadius}\n      L${0},${borderRadius}\n      C${0},${borderRadius} ${0},${0} ${borderRadius},${0}\n      Z\n    `;\n    return this.createPath(pathStr);\n  }\n\n  //  创建菱形\n  createDiamond() {\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    let halfWidth = width / 2;\n    let halfHeight = height / 2;\n    let topX = halfWidth;\n    let topY = 0;\n    let rightX = width;\n    let rightY = halfHeight;\n    let bottomX = halfWidth;\n    let bottomY = height;\n    let leftX = 0;\n    let leftY = halfHeight;\n    const points = [[topX, topY], [rightX, rightY], [bottomX, bottomY], [leftX, leftY]];\n    return this.createPolygon(points);\n  }\n\n  //  创建平行四边形\n  createParallelogram() {\n    let {\n      paddingX\n    } = this.node.getPaddingVale();\n    paddingX = paddingX || this.node.shapePadding.paddingX;\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    const points = [[paddingX, 0], [width, 0], [width - paddingX, height], [0, height]];\n    return this.createPolygon(points);\n  }\n\n  //  创建圆角矩形\n  createRoundedRectangle() {\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    let halfHeight = height / 2;\n    const pathStr = `\n      M${halfHeight},0\n      L${width - halfHeight},0\n      A${height / 2},${height / 2} 0 0,1 ${width - halfHeight},${height} \n      L${halfHeight},${height}\n      A${height / 2},${height / 2} 0 0,1 ${halfHeight},${0}\n    `;\n    return this.createPath(pathStr);\n  }\n\n  //  创建八角矩形\n  createOctagonalRectangle() {\n    let w = 5;\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    const points = [[0, w], [w, 0], [width - w, 0], [width, w], [width, height - w], [width - w, height], [w, height], [0, height - w]];\n    return this.createPolygon(points);\n  }\n\n  //  创建外三角矩形\n  createOuterTriangularRectangle() {\n    let {\n      paddingX\n    } = this.node.getPaddingVale();\n    paddingX = paddingX || this.node.shapePadding.paddingX;\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    const points = [[paddingX, 0], [width - paddingX, 0], [width, height / 2], [width - paddingX, height], [paddingX, height], [0, height / 2]];\n    return this.createPolygon(points);\n  }\n\n  //  创建内三角矩形\n  createInnerTriangularRectangle() {\n    let {\n      paddingX\n    } = this.node.getPaddingVale();\n    paddingX = paddingX || this.node.shapePadding.paddingX;\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    const points = [[0, 0], [width, 0], [width - paddingX / 2, height / 2], [width, height], [0, height], [paddingX / 2, height / 2]];\n    return this.createPolygon(points);\n  }\n\n  //  创建椭圆\n  createEllipse() {\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    let halfWidth = width / 2;\n    let halfHeight = height / 2;\n    const pathStr = `\n      M${halfWidth},0\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${height} \n      M${halfWidth},${height} \n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${0} \n    `;\n    return this.createPath(pathStr);\n  }\n\n  //  创建圆\n  createCircle() {\n    let {\n      width,\n      height\n    } = this.getNodeSize();\n    let halfWidth = width / 2;\n    let halfHeight = height / 2;\n    const pathStr = `\n      M${halfWidth},0\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${height} \n      M${halfWidth},${height} \n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${0} \n    `;\n    return this.createPath(pathStr);\n  }\n}\n\n// 形状列表\nexport const shapeList = [CONSTANTS.SHAPE.RECTANGLE, CONSTANTS.SHAPE.DIAMOND, CONSTANTS.SHAPE.PARALLELOGRAM, CONSTANTS.SHAPE.ROUNDED_RECTANGLE, CONSTANTS.SHAPE.OCTAGONAL_RECTANGLE, CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE, CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE, CONSTANTS.SHAPE.ELLIPSE, CONSTANTS.SHAPE.CIRCLE];","map":{"version":3,"names":["Polygon","Path","SVG","CONSTANTS","Shape","constructor","node","mindMap","getShapePadding","width","height","paddingX","paddingY","shape","getShape","defaultPaddingX","defaultPaddingY","actWidth","actHeight","actOffset","Math","abs","SHAPE","ROUNDED_RECTANGLE","DIAMOND","PARALLELOGRAM","OUTER_TRIANGULAR_RECTANGLE","INNER_TRIANGULAR_RECTANGLE","ELLIPSE","CIRCLE","createShape","RECTANGLE","createRect","createDiamond","createParallelogram","createRoundedRectangle","OCTAGONAL_RECTANGLE","createOctagonalRectangle","createOuterTriangularRectangle","createInnerTriangularRectangle","createEllipse","createCircle","getNodeSize","borderWidth","getBorderWidth","createPath","pathStr","customCreateNodePath","opt","plot","createPolygon","points","customCreateNodePolygon","borderRadius","style","merge","halfWidth","halfHeight","topX","topY","rightX","rightY","bottomX","bottomY","leftX","leftY","getPaddingVale","shapePadding","w","shapeList"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/node/Shape.js"],"sourcesContent":["import { Polygon, Path, SVG } from '@svgdotjs/svg.js'\r\nimport { CONSTANTS } from '../../../constants/constant'\r\n\r\n//  节点形状类\r\nexport default class Shape {\r\n  constructor(node) {\r\n    this.node = node\r\n    this.mindMap = node.mindMap\r\n  }\r\n\r\n  //  形状需要的padding\r\n  getShapePadding(width, height, paddingX, paddingY) {\r\n    const shape = this.node.getShape()\r\n    const defaultPaddingX = 15\r\n    const defaultPaddingY = 5\r\n    const actWidth = width + paddingX * 2\r\n    const actHeight = height + paddingY * 2\r\n    const actOffset = Math.abs(actWidth - actHeight)\r\n    switch (shape) {\r\n      case CONSTANTS.SHAPE.ROUNDED_RECTANGLE:\r\n        return {\r\n          paddingX: height > width ? (height - width) / 2 : 0,\r\n          paddingY: 0\r\n        }\r\n      case CONSTANTS.SHAPE.DIAMOND:\r\n        return {\r\n          paddingX: width / 2,\r\n          paddingY: height / 2\r\n        }\r\n      case CONSTANTS.SHAPE.PARALLELOGRAM:\r\n        return {\r\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\r\n          paddingY: 0\r\n        }\r\n      case CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE:\r\n        return {\r\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\r\n          paddingY: 0\r\n        }\r\n      case CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE:\r\n        return {\r\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\r\n          paddingY: 0\r\n        }\r\n      case CONSTANTS.SHAPE.ELLIPSE:\r\n        return {\r\n          paddingX: paddingX <= 0 ? defaultPaddingX : 0,\r\n          paddingY: paddingY <= 0 ? defaultPaddingY : 0\r\n        }\r\n      case CONSTANTS.SHAPE.CIRCLE:\r\n        return {\r\n          paddingX: actHeight > actWidth ? actOffset / 2 : 0,\r\n          paddingY: actHeight < actWidth ? actOffset / 2 : 0\r\n        }\r\n      default:\r\n        return {\r\n          paddingX: 0,\r\n          paddingY: 0\r\n        }\r\n    }\r\n  }\r\n\r\n  //  创建形状节点\r\n  createShape() {\r\n    const shape = this.node.getShape()\r\n    let node = null\r\n    // 矩形\r\n    if (shape === CONSTANTS.SHAPE.RECTANGLE) {\r\n      node = this.createRect()\r\n    } else if (shape === CONSTANTS.SHAPE.DIAMOND) {\r\n      // 菱形\r\n      node = this.createDiamond()\r\n    } else if (shape === CONSTANTS.SHAPE.PARALLELOGRAM) {\r\n      // 平行四边形\r\n      node = this.createParallelogram()\r\n    } else if (shape === CONSTANTS.SHAPE.ROUNDED_RECTANGLE) {\r\n      // 圆角矩形\r\n      node = this.createRoundedRectangle()\r\n    } else if (shape === CONSTANTS.SHAPE.OCTAGONAL_RECTANGLE) {\r\n      // 八角矩形\r\n      node = this.createOctagonalRectangle()\r\n    } else if (shape === CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE) {\r\n      // 外三角矩形\r\n      node = this.createOuterTriangularRectangle()\r\n    } else if (shape === CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE) {\r\n      // 内三角矩形\r\n      node = this.createInnerTriangularRectangle()\r\n    } else if (shape === CONSTANTS.SHAPE.ELLIPSE) {\r\n      // 椭圆\r\n      node = this.createEllipse()\r\n    } else if (shape === CONSTANTS.SHAPE.CIRCLE) {\r\n      // 圆\r\n      node = this.createCircle()\r\n    }\r\n    return node\r\n  }\r\n\r\n  // 获取节点减去节点边框宽度、hover节点边框宽度后的尺寸\r\n  getNodeSize() {\r\n    const borderWidth = this.node.getBorderWidth()\r\n    let { width, height } = this.node\r\n    width -= borderWidth\r\n    height -= borderWidth\r\n    return {\r\n      width,\r\n      height\r\n    }\r\n  }\r\n\r\n  // 创建路径节点\r\n  createPath(pathStr) {\r\n    const { customCreateNodePath } = this.mindMap.opt\r\n    if (customCreateNodePath) {\r\n      return SVG(customCreateNodePath(pathStr))\r\n    }\r\n    return new Path().plot(pathStr)\r\n  }\r\n\r\n  // 创建多边形节点\r\n  createPolygon(points) {\r\n    const { customCreateNodePolygon } = this.mindMap.opt\r\n    if (customCreateNodePolygon) {\r\n      return SVG(customCreateNodePolygon(points))\r\n    }\r\n    return new Polygon().plot(points)\r\n  }\r\n\r\n  // 创建矩形\r\n  createRect() {\r\n    let { width, height } = this.getNodeSize()\r\n    let borderRadius = this.node.style.merge('borderRadius')\r\n    const pathStr = `\r\n      M${borderRadius},0\r\n      L${width - borderRadius},0\r\n      C${width - borderRadius},0 ${width},${0} ${width},${borderRadius}\r\n      L${width},${height - borderRadius}\r\n      C${width},${height - borderRadius} ${width},${height} ${\r\n      width - borderRadius\r\n    },${height}\r\n      L${borderRadius},${height}\r\n      C${borderRadius},${height} ${0},${height} ${0},${height - borderRadius}\r\n      L${0},${borderRadius}\r\n      C${0},${borderRadius} ${0},${0} ${borderRadius},${0}\r\n      Z\r\n    `\r\n    return this.createPath(pathStr)\r\n  }\r\n\r\n  //  创建菱形\r\n  createDiamond() {\r\n    let { width, height } = this.getNodeSize()\r\n    let halfWidth = width / 2\r\n    let halfHeight = height / 2\r\n    let topX = halfWidth\r\n    let topY = 0\r\n    let rightX = width\r\n    let rightY = halfHeight\r\n    let bottomX = halfWidth\r\n    let bottomY = height\r\n    let leftX = 0\r\n    let leftY = halfHeight\r\n    const points = [\r\n      [topX, topY],\r\n      [rightX, rightY],\r\n      [bottomX, bottomY],\r\n      [leftX, leftY]\r\n    ]\r\n    return this.createPolygon(points)\r\n  }\r\n\r\n  //  创建平行四边形\r\n  createParallelogram() {\r\n    let { paddingX } = this.node.getPaddingVale()\r\n    paddingX = paddingX || this.node.shapePadding.paddingX\r\n    let { width, height } = this.getNodeSize()\r\n    const points = [\r\n      [paddingX, 0],\r\n      [width, 0],\r\n      [width - paddingX, height],\r\n      [0, height]\r\n    ]\r\n    return this.createPolygon(points)\r\n  }\r\n\r\n  //  创建圆角矩形\r\n  createRoundedRectangle() {\r\n    let { width, height } = this.getNodeSize()\r\n    let halfHeight = height / 2\r\n    const pathStr = `\r\n      M${halfHeight},0\r\n      L${width - halfHeight},0\r\n      A${height / 2},${height / 2} 0 0,1 ${width - halfHeight},${height} \r\n      L${halfHeight},${height}\r\n      A${height / 2},${height / 2} 0 0,1 ${halfHeight},${0}\r\n    `\r\n    return this.createPath(pathStr)\r\n  }\r\n\r\n  //  创建八角矩形\r\n  createOctagonalRectangle() {\r\n    let w = 5\r\n    let { width, height } = this.getNodeSize()\r\n    const points = [\r\n      [0, w],\r\n      [w, 0],\r\n      [width - w, 0],\r\n      [width, w],\r\n      [width, height - w],\r\n      [width - w, height],\r\n      [w, height],\r\n      [0, height - w]\r\n    ]\r\n    return this.createPolygon(points)\r\n  }\r\n\r\n  //  创建外三角矩形\r\n  createOuterTriangularRectangle() {\r\n    let { paddingX } = this.node.getPaddingVale()\r\n    paddingX = paddingX || this.node.shapePadding.paddingX\r\n    let { width, height } = this.getNodeSize()\r\n    const points = [\r\n      [paddingX, 0],\r\n      [width - paddingX, 0],\r\n      [width, height / 2],\r\n      [width - paddingX, height],\r\n      [paddingX, height],\r\n      [0, height / 2]\r\n    ]\r\n    return this.createPolygon(points)\r\n  }\r\n\r\n  //  创建内三角矩形\r\n  createInnerTriangularRectangle() {\r\n    let { paddingX } = this.node.getPaddingVale()\r\n    paddingX = paddingX || this.node.shapePadding.paddingX\r\n    let { width, height } = this.getNodeSize()\r\n    const points = [\r\n      [0, 0],\r\n      [width, 0],\r\n      [width - paddingX / 2, height / 2],\r\n      [width, height],\r\n      [0, height],\r\n      [paddingX / 2, height / 2]\r\n    ]\r\n    return this.createPolygon(points)\r\n  }\r\n\r\n  //  创建椭圆\r\n  createEllipse() {\r\n    let { width, height } = this.getNodeSize()\r\n    let halfWidth = width / 2\r\n    let halfHeight = height / 2\r\n    const pathStr = `\r\n      M${halfWidth},0\r\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${height} \r\n      M${halfWidth},${height} \r\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${0} \r\n    `\r\n    return this.createPath(pathStr)\r\n  }\r\n\r\n  //  创建圆\r\n  createCircle() {\r\n    let { width, height } = this.getNodeSize()\r\n    let halfWidth = width / 2\r\n    let halfHeight = height / 2\r\n    const pathStr = `\r\n      M${halfWidth},0\r\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${height} \r\n      M${halfWidth},${height} \r\n      A${halfWidth},${halfHeight} 0 0,1 ${halfWidth},${0} \r\n    `\r\n    return this.createPath(pathStr)\r\n  }\r\n}\r\n\r\n// 形状列表\r\nexport const shapeList = [\r\n  CONSTANTS.SHAPE.RECTANGLE,\r\n  CONSTANTS.SHAPE.DIAMOND,\r\n  CONSTANTS.SHAPE.PARALLELOGRAM,\r\n  CONSTANTS.SHAPE.ROUNDED_RECTANGLE,\r\n  CONSTANTS.SHAPE.OCTAGONAL_RECTANGLE,\r\n  CONSTANTS.SHAPE.OUTER_TRIANGULAR_RECTANGLE,\r\n  CONSTANTS.SHAPE.INNER_TRIANGULAR_RECTANGLE,\r\n  CONSTANTS.SHAPE.ELLIPSE,\r\n  CONSTANTS.SHAPE.CIRCLE\r\n]\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}