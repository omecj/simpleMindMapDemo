{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { copyRenderTree, simpleDeepClone, throttle, isSameObject, transformTreeDataToObject } from '../../utils';\nimport { ERROR_TYPES } from '../../constants/constant';\n\n//  命令类\nclass Command {\n  //  构造函数\n  constructor(opt = {}) {\n    this.opt = opt;\n    this.mindMap = opt.mindMap;\n    this.commands = {};\n    this.history = [];\n    this.activeHistoryIndex = 0;\n    // 注册快捷键\n    this.registerShortcutKeys();\n    this.addHistory = throttle(this.addHistory, this.mindMap.opt.addHistoryTime, this);\n    // 是否暂停收集历史数据\n    this.isPause = false;\n  }\n\n  // 暂停收集历史数据\n  pause() {\n    this.isPause = true;\n  }\n\n  // 恢复收集历史数据\n  recovery() {\n    this.isPause = false;\n  }\n\n  //  清空历史数据\n  clearHistory() {\n    this.history = [];\n    this.activeHistoryIndex = 0;\n    this.mindMap.emit('back_forward', 0, 0);\n  }\n\n  //  注册快捷键\n  registerShortcutKeys() {\n    this.mindMap.keyCommand.addShortcut('Control+z', () => {\n      this.mindMap.execCommand('BACK');\n    });\n    this.mindMap.keyCommand.addShortcut('Control+y', () => {\n      this.mindMap.execCommand('FORWARD');\n    });\n  }\n\n  //  执行命令\n  exec(name, ...args) {\n    if (this.commands[name]) {\n      this.commands[name].forEach(fn => {\n        fn(...args);\n      });\n      if (['BACK', 'FORWARD', 'SET_NODE_ACTIVE', 'CLEAR_ACTIVE_NODE'].includes(name)) {\n        return;\n      }\n      this.addHistory();\n    }\n  }\n\n  //  添加命令\n  add(name, fn) {\n    if (this.commands[name]) {\n      this.commands[name].push(fn);\n    } else {\n      this.commands[name] = [fn];\n    }\n  }\n\n  //  移除命令\n  remove(name, fn) {\n    if (!this.commands[name]) {\n      return;\n    }\n    if (!fn) {\n      this.commands[name] = [];\n      delete this.commands[name];\n    } else {\n      let index = this.commands[name].find(item => {\n        return item === fn;\n      });\n      if (index !== -1) {\n        this.commands[name].splice(index, 1);\n      }\n    }\n  }\n\n  //  添加回退数据\n  addHistory() {\n    if (this.mindMap.opt.readonly || this.isPause) {\n      return;\n    }\n    const lastData = this.history.length > 0 ? this.history[this.history.length - 1] : null;\n    const data = this.getCopyData();\n    // 此次数据和上次一样则不重复添加\n    if (lastData === data) return;\n    if (lastData && JSON.stringify(lastData) === JSON.stringify(data)) {\n      return;\n    }\n    this.emitDataUpdatesEvent(lastData, data);\n    // 删除当前历史指针后面的数据\n    this.history = this.history.slice(0, this.activeHistoryIndex + 1);\n    this.history.push(simpleDeepClone(data));\n    // 历史记录数超过最大数量\n    if (this.history.length > this.mindMap.opt.maxHistoryCount) {\n      this.history.shift();\n    }\n    this.activeHistoryIndex = this.history.length - 1;\n    this.mindMap.emit('data_change', data);\n    this.mindMap.emit('back_forward', this.activeHistoryIndex, this.history.length);\n  }\n\n  //  回退\n  back(step = 1) {\n    if (this.mindMap.opt.readonly) {\n      return;\n    }\n    if (this.activeHistoryIndex - step >= 0) {\n      const lastData = this.history[this.activeHistoryIndex];\n      this.activeHistoryIndex -= step;\n      this.mindMap.emit('back_forward', this.activeHistoryIndex, this.history.length);\n      const data = simpleDeepClone(this.history[this.activeHistoryIndex]);\n      this.emitDataUpdatesEvent(lastData, data);\n      this.mindMap.emit('data_change', data);\n      return data;\n    }\n  }\n\n  //  前进\n  forward(step = 1) {\n    if (this.mindMap.opt.readonly) {\n      return;\n    }\n    let len = this.history.length;\n    if (this.activeHistoryIndex + step <= len - 1) {\n      const lastData = this.history[this.activeHistoryIndex];\n      this.activeHistoryIndex += step;\n      this.mindMap.emit('back_forward', this.activeHistoryIndex, this.history.length);\n      const data = simpleDeepClone(this.history[this.activeHistoryIndex]);\n      this.emitDataUpdatesEvent(lastData, data);\n      this.mindMap.emit('data_change', data);\n      return data;\n    }\n  }\n\n  //  获取渲染树数据副本\n  getCopyData() {\n    if (!this.mindMap.renderer.renderTree) return null;\n    return copyRenderTree({}, this.mindMap.renderer.renderTree, true);\n  }\n\n  // 移除节点数据中的uid\n  removeDataUid(data) {\n    data = simpleDeepClone(data);\n    let walk = root => {\n      delete root.data.uid;\n      if (root.children && root.children.length > 0) {\n        root.children.forEach(item => {\n          walk(item);\n        });\n      }\n    };\n    walk(data);\n    return data;\n  }\n\n  // 派发思维导图更新明细事件\n  emitDataUpdatesEvent(lastData, data) {\n    try {\n      // 如果data_change_detail没有监听者，那么不进行计算，节省性能\n      const eventName = 'data_change_detail';\n      const count = this.mindMap.event.listenerCount(eventName);\n      if (count > 0 && lastData && data) {\n        const lastDataObj = simpleDeepClone(transformTreeDataToObject(lastData));\n        const dataObj = simpleDeepClone(transformTreeDataToObject(data));\n        const res = [];\n        const walkReplace = (root, obj) => {\n          if (root.children && root.children.length > 0) {\n            root.children.forEach((childUid, index) => {\n              root.children[index] = typeof childUid === 'string' ? obj[childUid] : obj[childUid.data.uid];\n              walkReplace(root.children[index], obj);\n            });\n          }\n          return root;\n        };\n        // 找出新增的或修改的\n        Object.keys(dataObj).forEach(uid => {\n          // 新增的或已经存在的，如果数据发生了改变\n          if (!lastDataObj[uid]) {\n            res.push({\n              action: 'create',\n              data: walkReplace(dataObj[uid], dataObj)\n            });\n          } else if (!isSameObject(lastDataObj[uid], dataObj[uid])) {\n            res.push({\n              action: 'update',\n              oldData: walkReplace(lastDataObj[uid], lastDataObj),\n              data: walkReplace(dataObj[uid], dataObj)\n            });\n          }\n        });\n        // 找出删除的\n        Object.keys(lastDataObj).forEach(uid => {\n          if (!dataObj[uid]) {\n            res.push({\n              action: 'delete',\n              data: walkReplace(lastDataObj[uid], lastDataObj)\n            });\n          }\n        });\n        this.mindMap.emit(eventName, res);\n      }\n    } catch (error) {\n      this.mindMap.opt.errorHandler(ERROR_TYPES.DATA_CHANGE_DETAIL_EVENT_ERROR, error);\n    }\n  }\n}\nexport default Command;","map":{"version":3,"names":["copyRenderTree","simpleDeepClone","throttle","isSameObject","transformTreeDataToObject","ERROR_TYPES","Command","constructor","opt","mindMap","commands","history","activeHistoryIndex","registerShortcutKeys","addHistory","addHistoryTime","isPause","pause","recovery","clearHistory","emit","keyCommand","addShortcut","execCommand","exec","name","args","forEach","fn","includes","add","push","remove","index","find","item","splice","readonly","lastData","length","data","getCopyData","JSON","stringify","emitDataUpdatesEvent","slice","maxHistoryCount","shift","back","step","forward","len","renderer","renderTree","removeDataUid","walk","root","uid","children","eventName","count","event","listenerCount","lastDataObj","dataObj","res","walkReplace","obj","childUid","Object","keys","action","oldData","error","errorHandler","DATA_CHANGE_DETAIL_EVENT_ERROR"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/command/Command.js"],"sourcesContent":["import {\r\n  copyRenderTree,\r\n  simpleDeepClone,\r\n  throttle,\r\n  isSameObject,\r\n  transformTreeDataToObject\r\n} from '../../utils'\r\nimport { ERROR_TYPES } from '../../constants/constant'\r\n\r\n//  命令类\r\nclass Command {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    this.opt = opt\r\n    this.mindMap = opt.mindMap\r\n    this.commands = {}\r\n    this.history = []\r\n    this.activeHistoryIndex = 0\r\n    // 注册快捷键\r\n    this.registerShortcutKeys()\r\n    this.addHistory = throttle(\r\n      this.addHistory,\r\n      this.mindMap.opt.addHistoryTime,\r\n      this\r\n    )\r\n    // 是否暂停收集历史数据\r\n    this.isPause = false\r\n  }\r\n\r\n  // 暂停收集历史数据\r\n  pause() {\r\n    this.isPause = true\r\n  }\r\n\r\n  // 恢复收集历史数据\r\n  recovery() {\r\n    this.isPause = false\r\n  }\r\n\r\n  //  清空历史数据\r\n  clearHistory() {\r\n    this.history = []\r\n    this.activeHistoryIndex = 0\r\n    this.mindMap.emit('back_forward', 0, 0)\r\n  }\r\n\r\n  //  注册快捷键\r\n  registerShortcutKeys() {\r\n    this.mindMap.keyCommand.addShortcut('Control+z', () => {\r\n      this.mindMap.execCommand('BACK')\r\n    })\r\n    this.mindMap.keyCommand.addShortcut('Control+y', () => {\r\n      this.mindMap.execCommand('FORWARD')\r\n    })\r\n  }\r\n\r\n  //  执行命令\r\n  exec(name, ...args) {\r\n    if (this.commands[name]) {\r\n      this.commands[name].forEach(fn => {\r\n        fn(...args)\r\n      })\r\n      if (\r\n        ['BACK', 'FORWARD', 'SET_NODE_ACTIVE', 'CLEAR_ACTIVE_NODE'].includes(\r\n          name\r\n        )\r\n      ) {\r\n        return\r\n      }\r\n      this.addHistory()\r\n    }\r\n  }\r\n\r\n  //  添加命令\r\n  add(name, fn) {\r\n    if (this.commands[name]) {\r\n      this.commands[name].push(fn)\r\n    } else {\r\n      this.commands[name] = [fn]\r\n    }\r\n  }\r\n\r\n  //  移除命令\r\n  remove(name, fn) {\r\n    if (!this.commands[name]) {\r\n      return\r\n    }\r\n    if (!fn) {\r\n      this.commands[name] = []\r\n      delete this.commands[name]\r\n    } else {\r\n      let index = this.commands[name].find(item => {\r\n        return item === fn\r\n      })\r\n      if (index !== -1) {\r\n        this.commands[name].splice(index, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  添加回退数据\r\n  addHistory() {\r\n    if (this.mindMap.opt.readonly || this.isPause) {\r\n      return\r\n    }\r\n    const lastData =\r\n      this.history.length > 0 ? this.history[this.history.length - 1] : null\r\n    const data = this.getCopyData()\r\n    // 此次数据和上次一样则不重复添加\r\n    if (lastData === data) return\r\n    if (lastData && JSON.stringify(lastData) === JSON.stringify(data)) {\r\n      return\r\n    }\r\n    this.emitDataUpdatesEvent(lastData, data)\r\n    // 删除当前历史指针后面的数据\r\n    this.history = this.history.slice(0, this.activeHistoryIndex + 1)\r\n    this.history.push(simpleDeepClone(data))\r\n    // 历史记录数超过最大数量\r\n    if (this.history.length > this.mindMap.opt.maxHistoryCount) {\r\n      this.history.shift()\r\n    }\r\n    this.activeHistoryIndex = this.history.length - 1\r\n    this.mindMap.emit('data_change', data)\r\n    this.mindMap.emit(\r\n      'back_forward',\r\n      this.activeHistoryIndex,\r\n      this.history.length\r\n    )\r\n  }\r\n\r\n  //  回退\r\n  back(step = 1) {\r\n    if (this.mindMap.opt.readonly) {\r\n      return\r\n    }\r\n    if (this.activeHistoryIndex - step >= 0) {\r\n      const lastData = this.history[this.activeHistoryIndex]\r\n      this.activeHistoryIndex -= step\r\n      this.mindMap.emit(\r\n        'back_forward',\r\n        this.activeHistoryIndex,\r\n        this.history.length\r\n      )\r\n      const data = simpleDeepClone(this.history[this.activeHistoryIndex])\r\n      this.emitDataUpdatesEvent(lastData, data)\r\n      this.mindMap.emit('data_change', data)\r\n      return data\r\n    }\r\n  }\r\n\r\n  //  前进\r\n  forward(step = 1) {\r\n    if (this.mindMap.opt.readonly) {\r\n      return\r\n    }\r\n    let len = this.history.length\r\n    if (this.activeHistoryIndex + step <= len - 1) {\r\n      const lastData = this.history[this.activeHistoryIndex]\r\n      this.activeHistoryIndex += step\r\n      this.mindMap.emit(\r\n        'back_forward',\r\n        this.activeHistoryIndex,\r\n        this.history.length\r\n      )\r\n      const data = simpleDeepClone(this.history[this.activeHistoryIndex])\r\n      this.emitDataUpdatesEvent(lastData, data)\r\n      this.mindMap.emit('data_change', data)\r\n      return data\r\n    }\r\n  }\r\n\r\n  //  获取渲染树数据副本\r\n  getCopyData() {\r\n    if (!this.mindMap.renderer.renderTree) return null\r\n    return copyRenderTree({}, this.mindMap.renderer.renderTree, true)\r\n  }\r\n\r\n  // 移除节点数据中的uid\r\n  removeDataUid(data) {\r\n    data = simpleDeepClone(data)\r\n    let walk = root => {\r\n      delete root.data.uid\r\n      if (root.children && root.children.length > 0) {\r\n        root.children.forEach(item => {\r\n          walk(item)\r\n        })\r\n      }\r\n    }\r\n    walk(data)\r\n    return data\r\n  }\r\n\r\n  // 派发思维导图更新明细事件\r\n  emitDataUpdatesEvent(lastData, data) {\r\n    try {\r\n      // 如果data_change_detail没有监听者，那么不进行计算，节省性能\r\n      const eventName = 'data_change_detail'\r\n      const count = this.mindMap.event.listenerCount(eventName)\r\n      if (count > 0 && lastData && data) {\r\n        const lastDataObj = simpleDeepClone(transformTreeDataToObject(lastData))\r\n        const dataObj = simpleDeepClone(transformTreeDataToObject(data))\r\n        const res = []\r\n        const walkReplace = (root, obj) => {\r\n          if (root.children && root.children.length > 0) {\r\n            root.children.forEach((childUid, index) => {\r\n              root.children[index] =\r\n                typeof childUid === 'string'\r\n                  ? obj[childUid]\r\n                  : obj[childUid.data.uid]\r\n              walkReplace(root.children[index], obj)\r\n            })\r\n          }\r\n          return root\r\n        }\r\n        // 找出新增的或修改的\r\n        Object.keys(dataObj).forEach(uid => {\r\n          // 新增的或已经存在的，如果数据发生了改变\r\n          if (!lastDataObj[uid]) {\r\n            res.push({\r\n              action: 'create',\r\n              data: walkReplace(dataObj[uid], dataObj)\r\n            })\r\n          } else if (!isSameObject(lastDataObj[uid], dataObj[uid])) {\r\n            res.push({\r\n              action: 'update',\r\n              oldData: walkReplace(lastDataObj[uid], lastDataObj),\r\n              data: walkReplace(dataObj[uid], dataObj)\r\n            })\r\n          }\r\n        })\r\n        // 找出删除的\r\n        Object.keys(lastDataObj).forEach(uid => {\r\n          if (!dataObj[uid]) {\r\n            res.push({\r\n              action: 'delete',\r\n              data: walkReplace(lastDataObj[uid], lastDataObj)\r\n            })\r\n          }\r\n        })\r\n        this.mindMap.emit(eventName, res)\r\n      }\r\n    } catch (error) {\r\n      this.mindMap.opt.errorHandler(\r\n        ERROR_TYPES.DATA_CHANGE_DETAIL_EVENT_ERROR,\r\n        error\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default Command\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}