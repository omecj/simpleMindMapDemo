{"ast":null,"code":"import SVGArray from './SVGArray.js';\nimport parser from '../modules/core/parser.js';\nimport Box from './Box.js';\nimport { pathParser } from '../utils/pathParser.js';\nfunction arrayToString(a) {\n  let s = '';\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0];\n    if (a[i][1] != null) {\n      s += a[i][1];\n      if (a[i][2] != null) {\n        s += ' ';\n        s += a[i][2];\n        if (a[i][3] != null) {\n          s += ' ';\n          s += a[i][3];\n          s += ' ';\n          s += a[i][4];\n          if (a[i][5] != null) {\n            s += ' ';\n            s += a[i][5];\n            s += ' ';\n            s += a[i][6];\n            if (a[i][7] != null) {\n              s += ' ';\n              s += a[i][7];\n            }\n          }\n        }\n      }\n    }\n  }\n  return s + ' ';\n}\nexport default class PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString());\n    return new Box(parser.nodes.path.getBBox());\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox();\n\n    // get relative offset\n    x -= box.x;\n    y -= box.y;\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0];\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x;\n          this[i][2] += y;\n        } else if (l === 'H') {\n          this[i][1] += x;\n        } else if (l === 'V') {\n          this[i][1] += y;\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x;\n          this[i][2] += y;\n          this[i][3] += x;\n          this[i][4] += y;\n          if (l === 'C') {\n            this[i][5] += x;\n            this[i][6] += y;\n          }\n        } else if (l === 'A') {\n          this[i][6] += x;\n          this[i][7] += y;\n        }\n      }\n    }\n    return this;\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString();\n    }\n    return pathParser(d);\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox();\n    let i, l;\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width;\n    box.height = box.height === 0 ? 1 : box.height;\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0];\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n      } else if (l === 'H') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n      } else if (l === 'V') {\n        this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n        this[i][3] = (this[i][3] - box.x) * width / box.width + box.x;\n        this[i][4] = (this[i][4] - box.y) * height / box.height + box.y;\n        if (l === 'C') {\n          this[i][5] = (this[i][5] - box.x) * width / box.width + box.x;\n          this[i][6] = (this[i][6] - box.y) * height / box.height + box.y;\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = this[i][1] * width / box.width;\n        this[i][2] = this[i][2] * height / box.height;\n\n        // move position values\n        this[i][6] = (this[i][6] - box.x) * width / box.width + box.x;\n        this[i][7] = (this[i][7] - box.y) * height / box.height + box.y;\n      }\n    }\n    return this;\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this);\n  }\n}","map":{"version":3,"names":["SVGArray","parser","Box","pathParser","arrayToString","a","s","i","il","length","PathArray","bbox","path","setAttribute","toString","nodes","getBBox","move","x","y","box","isNaN","l","parse","d","Array","isArray","prototype","concat","apply","size","width","height"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/types/PathArray.js"],"sourcesContent":["import SVGArray from './SVGArray.js'\nimport parser from '../modules/core/parser.js'\nimport Box from './Box.js'\nimport { pathParser } from '../utils/pathParser.js'\n\nfunction arrayToString(a) {\n  let s = ''\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\nexport default class PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString())\n    return new Box(parser.nodes.path.getBBox())\n  }\n\n  // Move path string\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0]\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x\n          this[i][2] += y\n        } else if (l === 'H') {\n          this[i][1] += x\n        } else if (l === 'V') {\n          this[i][1] += y\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x\n          this[i][2] += y\n          this[i][3] += x\n          this[i][4] += y\n\n          if (l === 'C') {\n            this[i][5] += x\n            this[i][6] += y\n          }\n        } else if (l === 'A') {\n          this[i][6] += x\n          this[i][7] += y\n        }\n      }\n    }\n\n    return this\n  }\n\n  // Absolutize and parse path to array\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString()\n    }\n\n    return pathParser(d)\n  }\n\n  // Resize path string\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox()\n    let i, l\n\n    // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n    box.width = box.width === 0 ? 1 : box.width\n    box.height = box.height === 0 ? 1 : box.height\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0]\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n      } else if (l === 'H') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n      } else if (l === 'V') {\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\n        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x\n        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y\n\n        if (l === 'C') {\n          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x\n          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = (this[i][1] * width) / box.width\n        this[i][2] = (this[i][2] * height) / box.height\n\n        // move position values\n        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x\n        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y\n      }\n    }\n\n    return this\n  }\n\n  // Convert array to string\n  toString() {\n    return arrayToString(this)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}