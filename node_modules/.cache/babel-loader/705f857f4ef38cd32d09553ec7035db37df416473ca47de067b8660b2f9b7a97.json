{"ast":null,"code":"import { extend, nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js';\nimport { proportionalSize } from '../utils/utils.js';\nimport { registerMethods } from '../utils/methods.js';\nimport PointArray from '../types/PointArray.js';\nimport Shape from './Shape.js';\nimport * as pointed from '../modules/core/pointed.js';\nexport default class Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs);\n  }\n\n  // Get array\n  array() {\n    return new PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine());\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array();\n    } else if (typeof y1 !== 'undefined') {\n      x1 = {\n        x1,\n        y1,\n        x2,\n        y2\n      };\n    } else {\n      x1 = new PointArray(x1).toLine();\n    }\n    return this.attr(x1);\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.attr(this.array().size(p.width, p.height).toLine());\n  }\n}\nextend(Line, pointed);\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(this.put(new Line()), args[0] != null ? args : [0, 0, 0, 0]);\n    })\n  }\n});\nregister(Line, 'Line');","map":{"version":3,"names":["extend","nodeOrNew","register","wrapWithAttrCheck","proportionalSize","registerMethods","PointArray","Shape","pointed","Line","constructor","node","attrs","array","attr","move","x","y","toLine","plot","x1","y1","x2","y2","size","width","height","p","Container","line","args","prototype","apply","put"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/elements/Line.js"],"sourcesContent":["import {\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { proportionalSize } from '../utils/utils.js'\nimport { registerMethods } from '../utils/methods.js'\nimport PointArray from '../types/PointArray.js'\nimport Shape from './Shape.js'\nimport * as pointed from '../modules/core/pointed.js'\n\nexport default class Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs)\n  }\n\n  // Get array\n  array() {\n    return new PointArray([\n      [this.attr('x1'), this.attr('y1')],\n      [this.attr('x2'), this.attr('y2')]\n    ])\n  }\n\n  // Move by left top corner\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine())\n  }\n\n  // Overwrite native plot() method\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array()\n    } else if (typeof y1 !== 'undefined') {\n      x1 = { x1, y1, x2, y2 }\n    } else {\n      x1 = new PointArray(x1).toLine()\n    }\n\n    return this.attr(x1)\n  }\n\n  // Set element size to given width and height\n  size(width, height) {\n    const p = proportionalSize(this, width, height)\n    return this.attr(this.array().size(p.width, p.height).toLine())\n  }\n}\n\nextend(Line, pointed)\n\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(\n        this.put(new Line()),\n        args[0] != null ? args : [0, 0, 0, 0]\n      )\n    })\n  }\n})\n\nregister(Line, 'Line')\n"],"mappings":"AAAA,SACEA,MAAM,EACNC,SAAS,EACTC,QAAQ,EACRC,iBAAiB,QACZ,qBAAqB;AAC5B,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAO,KAAKC,OAAO,MAAM,4BAA4B;AAErD,eAAe,MAAMC,IAAI,SAASF,KAAK,CAAC;EACtC;EACAG,WAAWA,CAACC,IAAI,EAAEC,KAAK,GAAGD,IAAI,EAAE;IAC9B,KAAK,CAACV,SAAS,CAAC,MAAM,EAAEU,IAAI,CAAC,EAAEC,KAAK,CAAC;EACvC;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,OAAO,IAAIP,UAAU,CAAC,CACpB,CAAC,IAAI,CAACQ,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC,EAClC,CAAC,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC,CACnC,CAAC;EACJ;;EAEA;EACAC,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACT,OAAO,IAAI,CAACH,IAAI,CAAC,IAAI,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;EACpD;;EAEA;EACAC,IAAIA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACnB,IAAIH,EAAE,IAAI,IAAI,EAAE;MACd,OAAO,IAAI,CAACP,KAAK,CAAC,CAAC;IACrB,CAAC,MAAM,IAAI,OAAOQ,EAAE,KAAK,WAAW,EAAE;MACpCD,EAAE,GAAG;QAAEA,EAAE;QAAEC,EAAE;QAAEC,EAAE;QAAEC;MAAG,CAAC;IACzB,CAAC,MAAM;MACLH,EAAE,GAAG,IAAId,UAAU,CAACc,EAAE,CAAC,CAACF,MAAM,CAAC,CAAC;IAClC;IAEA,OAAO,IAAI,CAACJ,IAAI,CAACM,EAAE,CAAC;EACtB;;EAEA;EACAI,IAAIA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAClB,MAAMC,CAAC,GAAGvB,gBAAgB,CAAC,IAAI,EAAEqB,KAAK,EAAEC,MAAM,CAAC;IAC/C,OAAO,IAAI,CAACZ,IAAI,CAAC,IAAI,CAACD,KAAK,CAAC,CAAC,CAACW,IAAI,CAACG,CAAC,CAACF,KAAK,EAAEE,CAAC,CAACD,MAAM,CAAC,CAACR,MAAM,CAAC,CAAC,CAAC;EACjE;AACF;AAEAlB,MAAM,CAACS,IAAI,EAAED,OAAO,CAAC;AAErBH,eAAe,CAAC;EACduB,SAAS,EAAE;IACT;IACAC,IAAI,EAAE1B,iBAAiB,CAAC,UAAU,GAAG2B,IAAI,EAAE;MACzC;MACA;MACA,OAAOrB,IAAI,CAACsB,SAAS,CAACZ,IAAI,CAACa,KAAK,CAC9B,IAAI,CAACC,GAAG,CAAC,IAAIxB,IAAI,CAAC,CAAC,CAAC,EACpBqB,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,GAAGA,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACtC,CAAC;IACH,CAAC;EACH;AACF,CAAC,CAAC;AAEF5B,QAAQ,CAACO,IAAI,EAAE,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}