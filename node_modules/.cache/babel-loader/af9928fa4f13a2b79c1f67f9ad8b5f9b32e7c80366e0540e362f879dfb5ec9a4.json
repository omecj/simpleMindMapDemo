{"ast":null,"code":"import { delimiter } from './regex.js';\nimport { makeInstance } from '../../utils/adopter.js';\nimport { globals } from '../../utils/window.js';\nlet listenerId = 0;\nexport const windowEvents = {};\nexport function getEvents(instance) {\n  let n = instance.getEventHolder();\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents;\n  if (!n.events) n.events = {};\n  return n.events;\n}\nexport function getEventTarget(instance) {\n  return instance.getEventTarget();\n}\nexport function clearEvents(instance) {\n  let n = instance.getEventHolder();\n  if (n === globals.window) n = windowEvents;\n  if (n.events) n.events = {};\n}\n\n// Add event binder in the SVG namespace\nexport function on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node);\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance);\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter);\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId;\n  }\n  events.forEach(function (event) {\n    const ev = event.split('.')[0];\n    const ns = event.split('.')[1] || '*';\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {};\n    bag[ev][ns] = bag[ev][ns] || {};\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l;\n\n    // add listener\n    n.addEventListener(ev, l, options || false);\n  });\n}\n\n// Add event unbinder in the SVG namespace\nexport function off(node, events, listener, options) {\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance);\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId;\n    if (!listener) return;\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter);\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0];\n    const ns = event && event.split('.')[1];\n    let namespace, l;\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n        delete bag[ev][ns || '*'][listener];\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l);\n        }\n        delete bag[ev][ns];\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'));\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'));\n        }\n        delete bag[ev];\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event);\n      }\n      clearEvents(instance);\n    }\n  });\n}\nexport function dispatch(node, event, data, options) {\n  const n = getEventTarget(node);\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event);\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    });\n    n.dispatchEvent(event);\n  }\n  return event;\n}","map":{"version":3,"names":["delimiter","makeInstance","globals","listenerId","windowEvents","getEvents","instance","n","getEventHolder","window","events","getEventTarget","clearEvents","on","node","listener","binding","options","l","bind","bag","Array","isArray","split","_svgjsListenerId","forEach","event","ev","ns","addEventListener","off","namespace","removeEventListener","join","dispatch","data","Event","dispatchEvent","CustomEvent","detail","cancelable"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/modules/core/event.js"],"sourcesContent":["import { delimiter } from './regex.js'\nimport { makeInstance } from '../../utils/adopter.js'\nimport { globals } from '../../utils/window.js'\n\nlet listenerId = 0\nexport const windowEvents = {}\n\nexport function getEvents(instance) {\n  let n = instance.getEventHolder()\n\n  // We dont want to save events in global space\n  if (n === globals.window) n = windowEvents\n  if (!n.events) n.events = {}\n  return n.events\n}\n\nexport function getEventTarget(instance) {\n  return instance.getEventTarget()\n}\n\nexport function clearEvents(instance) {\n  let n = instance.getEventHolder()\n  if (n === globals.window) n = windowEvents\n  if (n.events) n.events = {}\n}\n\n// Add event binder in the SVG namespace\nexport function on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node)\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // events can be an array of events or a string of events\n  events = Array.isArray(events) ? events : events.split(delimiter)\n\n  // add id to listener\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId\n  }\n\n  events.forEach(function (event) {\n    const ev = event.split('.')[0]\n    const ns = event.split('.')[1] || '*'\n\n    // ensure valid object\n    bag[ev] = bag[ev] || {}\n    bag[ev][ns] = bag[ev][ns] || {}\n\n    // reference listener\n    bag[ev][ns][listener._svgjsListenerId] = l\n\n    // add listener\n    n.addEventListener(ev, l, options || false)\n  })\n}\n\n// Add event unbinder in the SVG namespace\nexport function off(node, events, listener, options) {\n  const instance = makeInstance(node)\n  const bag = getEvents(instance)\n  const n = getEventTarget(instance)\n\n  // listener can be a function or a number\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId\n    if (!listener) return\n  }\n\n  // events can be an array of events or a string or undefined\n  events = Array.isArray(events) ? events : (events || '').split(delimiter)\n\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0]\n    const ns = event && event.split('.')[1]\n    let namespace, l\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(\n          ev,\n          bag[ev][ns || '*'][listener],\n          options || false\n        )\n\n        delete bag[ev][ns || '*'][listener]\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l)\n        }\n\n        delete bag[ev][ns]\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'))\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'))\n        }\n\n        delete bag[ev]\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event)\n      }\n\n      clearEvents(instance)\n    }\n  })\n}\n\nexport function dispatch(node, event, data, options) {\n  const n = getEventTarget(node)\n\n  // Dispatch event\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event)\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    })\n    n.dispatchEvent(event)\n  }\n  return event\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}