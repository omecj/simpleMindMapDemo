{"ast":null,"code":"import { adopt, extend, nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js';\nimport { registerMethods } from '../utils/methods.js';\nimport SVGNumber from '../types/SVGNumber.js';\nimport Shape from './Shape.js';\nimport { globals } from '../utils/window.js';\nimport * as textable from '../modules/core/textable.js';\nimport { isDescriptive, writeDataToDom } from '../utils/utils.js';\nexport default class Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs);\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3); // store leading value for rebuilding\n    this._rebuild = true; // enable automatic updating of dy values\n    this._build = false; // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading;\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value);\n    return this.rebuild();\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild;\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this;\n      let blankLineOffset = 0;\n      const leading = this.dom.leading;\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return;\n        const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n        const dy = leading * new SVGNumber(fontSize);\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'));\n          if (this.text() === '\\n') {\n            blankLineOffset += dy;\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0);\n            blankLineOffset = 0;\n          }\n        }\n      });\n      this.fire('rebuild');\n    }\n    return this;\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o;\n    this.dom.leading = new SVGNumber(o.leading || 1.3);\n    return this;\n  }\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, {\n      leading: 1.3\n    });\n    return this;\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes;\n      let firstLine = 0;\n      text = '';\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1;\n          continue;\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (i !== firstLine && children[i].nodeType !== 3 && adopt(children[i]).dom.newLined === true) {\n          text += '\\n';\n        }\n\n        // add content of this node\n        text += children[i].textContent;\n      }\n      return text;\n    }\n\n    // remove existing content\n    this.clear().build(true);\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this);\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n');\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j]);\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild();\n  }\n}\nextend(Text, textable);\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text);\n    }),\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text);\n    })\n  }\n});\nregister(Text, 'Text');","map":{"version":3,"names":["adopt","extend","nodeOrNew","register","wrapWithAttrCheck","registerMethods","SVGNumber","Shape","globals","textable","isDescriptive","writeDataToDom","Text","constructor","node","attrs","dom","leading","_rebuild","_build","value","rebuild","self","blankLineOffset","each","i","fontSize","window","getComputedStyle","getPropertyValue","dy","newLined","attr","text","fire","setData","o","undefined","children","childNodes","firstLine","len","length","nodeName","nodeType","textContent","clear","build","call","split","j","jl","newLine","Container","put","plain"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/elements/Text.js"],"sourcesContent":["import {\n  adopt,\n  extend,\n  nodeOrNew,\n  register,\n  wrapWithAttrCheck\n} from '../utils/adopter.js'\nimport { registerMethods } from '../utils/methods.js'\nimport SVGNumber from '../types/SVGNumber.js'\nimport Shape from './Shape.js'\nimport { globals } from '../utils/window.js'\nimport * as textable from '../modules/core/textable.js'\nimport { isDescriptive, writeDataToDom } from '../utils/utils.js'\n\nexport default class Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs)\n\n    this.dom.leading = this.dom.leading ?? new SVGNumber(1.3) // store leading value for rebuilding\n    this._rebuild = true // enable automatic updating of dy values\n    this._build = false // disable build mode for adding multiple lines\n  }\n\n  // Set / get leading\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading\n    }\n\n    // act as setter\n    this.dom.leading = new SVGNumber(value)\n\n    return this.rebuild()\n  }\n\n  // Rebuild appearance type\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild\n    }\n\n    // define position of all lines\n    if (this._rebuild) {\n      const self = this\n      let blankLineOffset = 0\n      const leading = this.dom.leading\n\n      this.each(function (i) {\n        if (isDescriptive(this.node)) return\n\n        const fontSize = globals.window\n          .getComputedStyle(this.node)\n          .getPropertyValue('font-size')\n\n        const dy = leading * new SVGNumber(fontSize)\n\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'))\n\n          if (this.text() === '\\n') {\n            blankLineOffset += dy\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0)\n            blankLineOffset = 0\n          }\n        }\n      })\n\n      this.fire('rebuild')\n    }\n\n    return this\n  }\n\n  // overwrite method from parent to set data properly\n  setData(o) {\n    this.dom = o\n    this.dom.leading = new SVGNumber(o.leading || 1.3)\n    return this\n  }\n\n  writeDataToDom() {\n    writeDataToDom(this, this.dom, { leading: 1.3 })\n    return this\n  }\n\n  // Set the text content\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes\n      let firstLine = 0\n      text = ''\n\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath' || isDescriptive(children[i])) {\n          if (i === 0) firstLine = i + 1\n          continue\n        }\n\n        // add newline if its not the first child and newLined is set to true\n        if (\n          i !== firstLine &&\n          children[i].nodeType !== 3 &&\n          adopt(children[i]).dom.newLined === true\n        ) {\n          text += '\\n'\n        }\n\n        // add content of this node\n        text += children[i].textContent\n      }\n\n      return text\n    }\n\n    // remove existing content\n    this.clear().build(true)\n\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this)\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n')\n\n      // build new lines\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j])\n      }\n    }\n\n    // disable build mode and rebuild lines\n    return this.build(false).rebuild()\n  }\n}\n\nextend(Text, textable)\n\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text)\n    }),\n\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text)\n    })\n  }\n})\n\nregister(Text, 'Text')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}