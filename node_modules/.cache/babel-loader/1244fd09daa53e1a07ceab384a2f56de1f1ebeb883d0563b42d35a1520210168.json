{"ast":null,"code":"import { getStrWithBrFromHtml, checkNodeOuter, focusInput, selectAllInput, htmlEscape, handleInputPasteText, checkSmmFormatData, getTextFromHtml } from '../../utils';\nimport { ERROR_TYPES, CONSTANTS } from '../../constants/constant';\n\n//  节点文字编辑类\nexport default class TextEdit {\n  //  构造函数\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.mindMap = renderer.mindMap;\n    // 当前编辑的节点\n    this.currentNode = null;\n    // 文本编辑框\n    this.textEditNode = null;\n    // 文本编辑框是否显示\n    this.showTextEdit = false;\n    // 如果编辑过程中缩放画布了，那么缓存当前编辑的内容\n    this.cacheEditingText = '';\n    this.hasBodyMousedown = false;\n    this.bindEvent();\n  }\n\n  //  事件\n  bindEvent() {\n    this.show = this.show.bind(this);\n    this.onScale = this.onScale.bind(this);\n    this.onKeydown = this.onKeydown.bind(this);\n    // 节点双击事件\n    this.mindMap.on('node_dblclick', (node, e, isInserting) => {\n      this.show({\n        node,\n        e,\n        isInserting\n      });\n    });\n    // 点击事件\n    this.mindMap.on('draw_click', () => {\n      // 隐藏文本编辑框\n      this.hideEditTextBox();\n    });\n    this.mindMap.on('body_mousedown', () => {\n      this.hasBodyMousedown = true;\n    });\n    this.mindMap.on('body_click', () => {\n      if (!this.hasBodyMousedown) return;\n      this.hasBodyMousedown = false;\n      // 隐藏文本编辑框\n      if (this.mindMap.opt.isEndNodeTextEditOnClickOuter) {\n        this.hideEditTextBox();\n      }\n    });\n    this.mindMap.on('svg_mousedown', () => {\n      // 隐藏文本编辑框\n      this.hideEditTextBox();\n    });\n    // 展开收缩按钮点击事件\n    this.mindMap.on('expand_btn_click', () => {\n      this.hideEditTextBox();\n    });\n    // 节点激活前事件\n    this.mindMap.on('before_node_active', () => {\n      this.hideEditTextBox();\n    });\n    // 鼠标滚动事件\n    this.mindMap.on('mousewheel', () => {\n      if (this.mindMap.opt.mousewheelAction === CONSTANTS.MOUSE_WHEEL_ACTION.MOVE) {\n        this.hideEditTextBox();\n      }\n    });\n    // 注册编辑快捷键\n    this.mindMap.keyCommand.addShortcut('F2', () => {\n      if (this.renderer.activeNodeList.length <= 0) {\n        return;\n      }\n      this.show({\n        node: this.renderer.activeNodeList[0]\n      });\n    });\n    this.mindMap.on('scale', this.onScale);\n    // // 监听按键事件，判断是否自动进入文本编辑模式\n    if (this.mindMap.opt.enableAutoEnterTextEditWhenKeydown) {\n      window.addEventListener('keydown', this.onKeydown);\n    }\n    this.mindMap.on('beforeDestroy', () => {\n      this.unBindEvent();\n    });\n  }\n\n  // 解绑事件\n  unBindEvent() {\n    window.removeEventListener('keydown', this.onKeydown);\n  }\n\n  // 按键事件\n  onKeydown(e) {\n    const activeNodeList = this.mindMap.renderer.activeNodeList;\n    if (activeNodeList.length <= 0 || activeNodeList.length > 1) return;\n    const node = activeNodeList[0];\n    // 当正在输入中文或英文或数字时，如果没有按下组合键，那么自动进入文本编辑模式\n    if (node && this.checkIsAutoEnterTextEditKey(e)) {\n      this.show({\n        node,\n        e,\n        isInserting: false,\n        isFromKeyDown: true\n      });\n    }\n  }\n\n  // 判断是否是自动进入文本编模式的按钮\n  checkIsAutoEnterTextEditKey(e) {\n    const keyCode = e.keyCode;\n    return (keyCode === 229 || keyCode >= 65 && keyCode <= 90 || keyCode >= 48 && keyCode <= 57) && !this.mindMap.keyCommand.hasCombinationKey(e);\n  }\n\n  //  注册临时快捷键\n  registerTmpShortcut() {\n    // 注册回车快捷键\n    this.mindMap.keyCommand.addShortcut('Enter', () => {\n      this.hideEditTextBox();\n    });\n    this.mindMap.keyCommand.addShortcut('Tab', () => {\n      this.hideEditTextBox();\n    });\n  }\n\n  // 获取当前文本编辑框是否处于显示状态，也就是是否处在文本编辑状态\n  isShowTextEdit() {\n    if (this.mindMap.richText) {\n      return this.mindMap.richText.showTextEdit;\n    }\n    return this.showTextEdit;\n  }\n\n  //  显示文本编辑框\n  // isInserting：是否是刚创建的节点\n  // isFromKeyDown：是否是在按键事件进入的编辑\n  async show({\n    node,\n    isInserting = false,\n    isFromKeyDown = false,\n    isFromScale = false\n  }) {\n    // 使用了自定义节点内容那么不响应编辑事件\n    if (node.isUseCustomNodeContent()) {\n      return;\n    }\n    const {\n      beforeTextEdit\n    } = this.mindMap.opt;\n    if (typeof beforeTextEdit === 'function') {\n      let isShow = false;\n      try {\n        isShow = await beforeTextEdit(node, isInserting);\n      } catch (error) {\n        isShow = false;\n        this.mindMap.opt.errorHandler(ERROR_TYPES.BEFORE_TEXT_EDIT_ERROR, error);\n      }\n      if (!isShow) return;\n    }\n    this.currentNode = node;\n    const {\n      offsetLeft,\n      offsetTop\n    } = checkNodeOuter(this.mindMap, node);\n    this.mindMap.view.translateXY(offsetLeft, offsetTop);\n    const rect = node._textData.node.node.getBoundingClientRect();\n    const params = {\n      node,\n      rect,\n      isInserting,\n      isFromKeyDown,\n      isFromScale\n    };\n    if (this.mindMap.richText) {\n      this.mindMap.richText.showEditText(params);\n      return;\n    }\n    this.showEditTextBox(params);\n  }\n\n  // 处理画布缩放\n  onScale() {\n    if (!this.currentNode) return;\n    if (this.mindMap.richText) {\n      this.mindMap.richText.cacheEditingText = this.mindMap.richText.getEditText();\n      this.mindMap.richText.showTextEdit = false;\n    } else {\n      this.cacheEditingText = this.getEditText();\n      this.showTextEdit = false;\n    }\n    this.show({\n      node: this.currentNode,\n      isFromScale: true\n    });\n  }\n\n  //  显示文本编辑框\n  showEditTextBox({\n    node,\n    rect,\n    isInserting,\n    isFromKeyDown,\n    isFromScale\n  }) {\n    if (this.showTextEdit) return;\n    const {\n      nodeTextEditZIndex,\n      textAutoWrapWidth,\n      selectTextOnEnterEditText\n    } = this.mindMap.opt;\n    if (!isFromScale) {\n      this.mindMap.emit('before_show_text_edit');\n    }\n    this.registerTmpShortcut();\n    if (!this.textEditNode) {\n      this.textEditNode = document.createElement('div');\n      this.textEditNode.style.cssText = `position:fixed;box-sizing: border-box;background-color:#fff;box-shadow: 0 0 20px rgba(0,0,0,.5);padding: 3px 5px;margin-left: -5px;margin-top: -3px;outline: none; word-break: break-all;`;\n      this.textEditNode.setAttribute('contenteditable', true);\n      this.textEditNode.addEventListener('keyup', e => {\n        e.stopPropagation();\n      });\n      this.textEditNode.addEventListener('click', e => {\n        e.stopPropagation();\n      });\n      this.textEditNode.addEventListener('mousedown', e => {\n        e.stopPropagation();\n      });\n      this.textEditNode.addEventListener('keydown', e => {\n        if (this.checkIsAutoEnterTextEditKey(e)) {\n          e.stopPropagation();\n        }\n      });\n      this.textEditNode.addEventListener('paste', e => {\n        const text = e.clipboardData.getData('text');\n        const {\n          isSmm,\n          data\n        } = checkSmmFormatData(text);\n        if (isSmm && data[0] && data[0].data) {\n          // 只取第一个节点的纯文本\n          handleInputPasteText(e, getTextFromHtml(data[0].data.text));\n        } else {\n          handleInputPasteText(e);\n        }\n      });\n      const targetNode = this.mindMap.opt.customInnerElsAppendTo || document.body;\n      targetNode.appendChild(this.textEditNode);\n    }\n    let scale = this.mindMap.view.scale;\n    let lineHeight = node.style.merge('lineHeight');\n    let fontSize = node.style.merge('fontSize');\n    let textLines = (this.cacheEditingText || node.getData('text')).split(/\\n/gim).map(item => {\n      return htmlEscape(item);\n    });\n    let isMultiLine = node._textData.node.attr('data-ismultiLine') === 'true';\n    node.style.domText(this.textEditNode, scale, isMultiLine);\n    this.textEditNode.style.zIndex = nodeTextEditZIndex;\n    this.textEditNode.innerHTML = textLines.join('<br>');\n    this.textEditNode.style.minWidth = rect.width + 10 + 'px';\n    this.textEditNode.style.minHeight = rect.height + 6 + 'px';\n    this.textEditNode.style.left = rect.left + 'px';\n    this.textEditNode.style.top = rect.top + 'px';\n    this.textEditNode.style.display = 'block';\n    this.textEditNode.style.maxWidth = textAutoWrapWidth * scale + 'px';\n    if (isMultiLine && lineHeight !== 1) {\n      this.textEditNode.style.transform = `translateY(${-((lineHeight * fontSize - fontSize) / 2) * scale}px)`;\n    }\n    this.showTextEdit = true;\n    // 选中文本\n    // if (!this.cacheEditingText) {\n    //   selectAllInput(this.textEditNode)\n    // }\n    if (isInserting || selectTextOnEnterEditText && !isFromKeyDown) {\n      selectAllInput(this.textEditNode);\n    } else {\n      focusInput(this.textEditNode);\n    }\n    this.cacheEditingText = '';\n  }\n\n  // 获取当前正在编辑的内容\n  getEditText() {\n    return getStrWithBrFromHtml(this.textEditNode.innerHTML);\n  }\n\n  //  隐藏文本编辑框\n  hideEditTextBox() {\n    this.currentNode = null;\n    if (this.mindMap.richText) {\n      return this.mindMap.richText.hideEditText();\n    }\n    if (!this.showTextEdit) {\n      return;\n    }\n    this.renderer.activeNodeList.forEach(node => {\n      let str = this.getEditText();\n      this.mindMap.execCommand('SET_NODE_TEXT', node, str);\n      if (node.isGeneralization) {\n        // 概要节点\n        node.generalizationBelongNode.updateGeneralization();\n      }\n      this.mindMap.render();\n    });\n    this.mindMap.emit('hide_text_edit', this.textEditNode, this.renderer.activeNodeList);\n    this.textEditNode.style.display = 'none';\n    this.textEditNode.innerHTML = '';\n    this.textEditNode.style.fontFamily = 'inherit';\n    this.textEditNode.style.fontSize = 'inherit';\n    this.textEditNode.style.fontWeight = 'normal';\n    this.textEditNode.style.transform = 'translateY(0)';\n    this.showTextEdit = false;\n  }\n\n  // 获取当前正在编辑中的节点实例\n  getCurrentEditNode() {\n    if (this.mindMap.richText) {\n      return this.mindMap.richText.node;\n    }\n    return this.currentNode;\n  }\n}","map":{"version":3,"names":["getStrWithBrFromHtml","checkNodeOuter","focusInput","selectAllInput","htmlEscape","handleInputPasteText","checkSmmFormatData","getTextFromHtml","ERROR_TYPES","CONSTANTS","TextEdit","constructor","renderer","mindMap","currentNode","textEditNode","showTextEdit","cacheEditingText","hasBodyMousedown","bindEvent","show","bind","onScale","onKeydown","on","node","e","isInserting","hideEditTextBox","opt","isEndNodeTextEditOnClickOuter","mousewheelAction","MOUSE_WHEEL_ACTION","MOVE","keyCommand","addShortcut","activeNodeList","length","enableAutoEnterTextEditWhenKeydown","window","addEventListener","unBindEvent","removeEventListener","checkIsAutoEnterTextEditKey","isFromKeyDown","keyCode","hasCombinationKey","registerTmpShortcut","isShowTextEdit","richText","isFromScale","isUseCustomNodeContent","beforeTextEdit","isShow","error","errorHandler","BEFORE_TEXT_EDIT_ERROR","offsetLeft","offsetTop","view","translateXY","rect","_textData","getBoundingClientRect","params","showEditText","showEditTextBox","getEditText","nodeTextEditZIndex","textAutoWrapWidth","selectTextOnEnterEditText","emit","document","createElement","style","cssText","setAttribute","stopPropagation","text","clipboardData","getData","isSmm","data","targetNode","customInnerElsAppendTo","body","appendChild","scale","lineHeight","merge","fontSize","textLines","split","map","item","isMultiLine","attr","domText","zIndex","innerHTML","join","minWidth","width","minHeight","height","left","top","display","maxWidth","transform","hideEditText","forEach","str","execCommand","isGeneralization","generalizationBelongNode","updateGeneralization","render","fontFamily","fontWeight","getCurrentEditNode"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/TextEdit.js"],"sourcesContent":["import {\r\n  getStrWithBrFromHtml,\r\n  checkNodeOuter,\r\n  focusInput,\r\n  selectAllInput,\r\n  htmlEscape,\r\n  handleInputPasteText,\r\n  checkSmmFormatData,\r\n  getTextFromHtml\r\n} from '../../utils'\r\nimport { ERROR_TYPES, CONSTANTS } from '../../constants/constant'\r\n\r\n//  节点文字编辑类\r\nexport default class TextEdit {\r\n  //  构造函数\r\n  constructor(renderer) {\r\n    this.renderer = renderer\r\n    this.mindMap = renderer.mindMap\r\n    // 当前编辑的节点\r\n    this.currentNode = null\r\n    // 文本编辑框\r\n    this.textEditNode = null\r\n    // 文本编辑框是否显示\r\n    this.showTextEdit = false\r\n    // 如果编辑过程中缩放画布了，那么缓存当前编辑的内容\r\n    this.cacheEditingText = ''\r\n    this.hasBodyMousedown = false\r\n    this.bindEvent()\r\n  }\r\n\r\n  //  事件\r\n  bindEvent() {\r\n    this.show = this.show.bind(this)\r\n    this.onScale = this.onScale.bind(this)\r\n    this.onKeydown = this.onKeydown.bind(this)\r\n    // 节点双击事件\r\n    this.mindMap.on('node_dblclick', (node, e, isInserting) => {\r\n      this.show({ node, e, isInserting })\r\n    })\r\n    // 点击事件\r\n    this.mindMap.on('draw_click', () => {\r\n      // 隐藏文本编辑框\r\n      this.hideEditTextBox()\r\n    })\r\n    this.mindMap.on('body_mousedown', () => {\r\n      this.hasBodyMousedown = true\r\n    })\r\n    this.mindMap.on('body_click', () => {\r\n      if (!this.hasBodyMousedown) return\r\n      this.hasBodyMousedown = false\r\n      // 隐藏文本编辑框\r\n      if (this.mindMap.opt.isEndNodeTextEditOnClickOuter) {\r\n        this.hideEditTextBox()\r\n      }\r\n    })\r\n    this.mindMap.on('svg_mousedown', () => {\r\n      // 隐藏文本编辑框\r\n      this.hideEditTextBox()\r\n    })\r\n    // 展开收缩按钮点击事件\r\n    this.mindMap.on('expand_btn_click', () => {\r\n      this.hideEditTextBox()\r\n    })\r\n    // 节点激活前事件\r\n    this.mindMap.on('before_node_active', () => {\r\n      this.hideEditTextBox()\r\n    })\r\n    // 鼠标滚动事件\r\n    this.mindMap.on('mousewheel', () => {\r\n      if (\r\n        this.mindMap.opt.mousewheelAction === CONSTANTS.MOUSE_WHEEL_ACTION.MOVE\r\n      ) {\r\n        this.hideEditTextBox()\r\n      }\r\n    })\r\n    // 注册编辑快捷键\r\n    this.mindMap.keyCommand.addShortcut('F2', () => {\r\n      if (this.renderer.activeNodeList.length <= 0) {\r\n        return\r\n      }\r\n      this.show({\r\n        node: this.renderer.activeNodeList[0]\r\n      })\r\n    })\r\n    this.mindMap.on('scale', this.onScale)\r\n    // // 监听按键事件，判断是否自动进入文本编辑模式\r\n    if (this.mindMap.opt.enableAutoEnterTextEditWhenKeydown) {\r\n      window.addEventListener('keydown', this.onKeydown)\r\n    }\r\n    this.mindMap.on('beforeDestroy', () => {\r\n      this.unBindEvent()\r\n    })\r\n  }\r\n\r\n  // 解绑事件\r\n  unBindEvent() {\r\n    window.removeEventListener('keydown', this.onKeydown)\r\n  }\r\n\r\n  // 按键事件\r\n  onKeydown(e) {\r\n    const activeNodeList = this.mindMap.renderer.activeNodeList\r\n    if (activeNodeList.length <= 0 || activeNodeList.length > 1) return\r\n    const node = activeNodeList[0]\r\n    // 当正在输入中文或英文或数字时，如果没有按下组合键，那么自动进入文本编辑模式\r\n    if (node && this.checkIsAutoEnterTextEditKey(e)) {\r\n      this.show({\r\n        node,\r\n        e,\r\n        isInserting: false,\r\n        isFromKeyDown: true\r\n      })\r\n    }\r\n  }\r\n\r\n  // 判断是否是自动进入文本编模式的按钮\r\n  checkIsAutoEnterTextEditKey(e) {\r\n    const keyCode = e.keyCode\r\n    return (\r\n      (keyCode === 229 ||\r\n        (keyCode >= 65 && keyCode <= 90) ||\r\n        (keyCode >= 48 && keyCode <= 57)) &&\r\n      !this.mindMap.keyCommand.hasCombinationKey(e)\r\n    )\r\n  }\r\n\r\n  //  注册临时快捷键\r\n  registerTmpShortcut() {\r\n    // 注册回车快捷键\r\n    this.mindMap.keyCommand.addShortcut('Enter', () => {\r\n      this.hideEditTextBox()\r\n    })\r\n    this.mindMap.keyCommand.addShortcut('Tab', () => {\r\n      this.hideEditTextBox()\r\n    })\r\n  }\r\n\r\n  // 获取当前文本编辑框是否处于显示状态，也就是是否处在文本编辑状态\r\n  isShowTextEdit() {\r\n    if (this.mindMap.richText) {\r\n      return this.mindMap.richText.showTextEdit\r\n    }\r\n    return this.showTextEdit\r\n  }\r\n\r\n  //  显示文本编辑框\r\n  // isInserting：是否是刚创建的节点\r\n  // isFromKeyDown：是否是在按键事件进入的编辑\r\n  async show({\r\n    node,\r\n    isInserting = false,\r\n    isFromKeyDown = false,\r\n    isFromScale = false\r\n  }) {\r\n    // 使用了自定义节点内容那么不响应编辑事件\r\n    if (node.isUseCustomNodeContent()) {\r\n      return\r\n    }\r\n    const { beforeTextEdit } = this.mindMap.opt\r\n    if (typeof beforeTextEdit === 'function') {\r\n      let isShow = false\r\n      try {\r\n        isShow = await beforeTextEdit(node, isInserting)\r\n      } catch (error) {\r\n        isShow = false\r\n        this.mindMap.opt.errorHandler(ERROR_TYPES.BEFORE_TEXT_EDIT_ERROR, error)\r\n      }\r\n      if (!isShow) return\r\n    }\r\n    this.currentNode = node\r\n    const { offsetLeft, offsetTop } = checkNodeOuter(this.mindMap, node)\r\n    this.mindMap.view.translateXY(offsetLeft, offsetTop)\r\n    const rect = node._textData.node.node.getBoundingClientRect()\r\n    const params = {\r\n      node,\r\n      rect,\r\n      isInserting,\r\n      isFromKeyDown,\r\n      isFromScale\r\n    }\r\n    if (this.mindMap.richText) {\r\n      this.mindMap.richText.showEditText(params)\r\n      return\r\n    }\r\n    this.showEditTextBox(params)\r\n  }\r\n\r\n  // 处理画布缩放\r\n  onScale() {\r\n    if (!this.currentNode) return\r\n    if (this.mindMap.richText) {\r\n      this.mindMap.richText.cacheEditingText =\r\n        this.mindMap.richText.getEditText()\r\n      this.mindMap.richText.showTextEdit = false\r\n    } else {\r\n      this.cacheEditingText = this.getEditText()\r\n      this.showTextEdit = false\r\n    }\r\n    this.show({\r\n      node: this.currentNode,\r\n      isFromScale: true\r\n    })\r\n  }\r\n\r\n  //  显示文本编辑框\r\n  showEditTextBox({ node, rect, isInserting, isFromKeyDown, isFromScale }) {\r\n    if (this.showTextEdit) return\r\n    const { nodeTextEditZIndex, textAutoWrapWidth, selectTextOnEnterEditText } =\r\n      this.mindMap.opt\r\n    if (!isFromScale) {\r\n      this.mindMap.emit('before_show_text_edit')\r\n    }\r\n    this.registerTmpShortcut()\r\n    if (!this.textEditNode) {\r\n      this.textEditNode = document.createElement('div')\r\n      this.textEditNode.style.cssText = `position:fixed;box-sizing: border-box;background-color:#fff;box-shadow: 0 0 20px rgba(0,0,0,.5);padding: 3px 5px;margin-left: -5px;margin-top: -3px;outline: none; word-break: break-all;`\r\n      this.textEditNode.setAttribute('contenteditable', true)\r\n      this.textEditNode.addEventListener('keyup', e => {\r\n        e.stopPropagation()\r\n      })\r\n      this.textEditNode.addEventListener('click', e => {\r\n        e.stopPropagation()\r\n      })\r\n      this.textEditNode.addEventListener('mousedown', e => {\r\n        e.stopPropagation()\r\n      })\r\n      this.textEditNode.addEventListener('keydown', e => {\r\n        if (this.checkIsAutoEnterTextEditKey(e)) {\r\n          e.stopPropagation()\r\n        }\r\n      })\r\n      this.textEditNode.addEventListener('paste', e => {\r\n        const text = e.clipboardData.getData('text')\r\n        const { isSmm, data } = checkSmmFormatData(text)\r\n        if (isSmm && data[0] && data[0].data) {\r\n          // 只取第一个节点的纯文本\r\n          handleInputPasteText(e, getTextFromHtml(data[0].data.text))\r\n        } else {\r\n          handleInputPasteText(e)\r\n        }\r\n      })\r\n      const targetNode =\r\n        this.mindMap.opt.customInnerElsAppendTo || document.body\r\n      targetNode.appendChild(this.textEditNode)\r\n    }\r\n    let scale = this.mindMap.view.scale\r\n    let lineHeight = node.style.merge('lineHeight')\r\n    let fontSize = node.style.merge('fontSize')\r\n    let textLines = (this.cacheEditingText || node.getData('text'))\r\n      .split(/\\n/gim)\r\n      .map(item => {\r\n        return htmlEscape(item)\r\n      })\r\n    let isMultiLine = node._textData.node.attr('data-ismultiLine') === 'true'\r\n    node.style.domText(this.textEditNode, scale, isMultiLine)\r\n    this.textEditNode.style.zIndex = nodeTextEditZIndex\r\n    this.textEditNode.innerHTML = textLines.join('<br>')\r\n    this.textEditNode.style.minWidth = rect.width + 10 + 'px'\r\n    this.textEditNode.style.minHeight = rect.height + 6 + 'px'\r\n    this.textEditNode.style.left = rect.left + 'px'\r\n    this.textEditNode.style.top = rect.top + 'px'\r\n    this.textEditNode.style.display = 'block'\r\n    this.textEditNode.style.maxWidth = textAutoWrapWidth * scale + 'px'\r\n    if (isMultiLine && lineHeight !== 1) {\r\n      this.textEditNode.style.transform = `translateY(${\r\n        -((lineHeight * fontSize - fontSize) / 2) * scale\r\n      }px)`\r\n    }\r\n    this.showTextEdit = true\r\n    // 选中文本\r\n    // if (!this.cacheEditingText) {\r\n    //   selectAllInput(this.textEditNode)\r\n    // }\r\n    if (isInserting || (selectTextOnEnterEditText && !isFromKeyDown)) {\r\n      selectAllInput(this.textEditNode)\r\n    } else {\r\n      focusInput(this.textEditNode)\r\n    }\r\n    this.cacheEditingText = ''\r\n  }\r\n\r\n  // 获取当前正在编辑的内容\r\n  getEditText() {\r\n    return getStrWithBrFromHtml(this.textEditNode.innerHTML)\r\n  }\r\n\r\n  //  隐藏文本编辑框\r\n  hideEditTextBox() {\r\n    this.currentNode = null\r\n    if (this.mindMap.richText) {\r\n      return this.mindMap.richText.hideEditText()\r\n    }\r\n    if (!this.showTextEdit) {\r\n      return\r\n    }\r\n    this.renderer.activeNodeList.forEach(node => {\r\n      let str = this.getEditText()\r\n      this.mindMap.execCommand('SET_NODE_TEXT', node, str)\r\n      if (node.isGeneralization) {\r\n        // 概要节点\r\n        node.generalizationBelongNode.updateGeneralization()\r\n      }\r\n      this.mindMap.render()\r\n    })\r\n    this.mindMap.emit(\r\n      'hide_text_edit',\r\n      this.textEditNode,\r\n      this.renderer.activeNodeList\r\n    )\r\n    this.textEditNode.style.display = 'none'\r\n    this.textEditNode.innerHTML = ''\r\n    this.textEditNode.style.fontFamily = 'inherit'\r\n    this.textEditNode.style.fontSize = 'inherit'\r\n    this.textEditNode.style.fontWeight = 'normal'\r\n    this.textEditNode.style.transform = 'translateY(0)'\r\n    this.showTextEdit = false\r\n  }\r\n\r\n  // 获取当前正在编辑中的节点实例\r\n  getCurrentEditNode() {\r\n    if (this.mindMap.richText) {\r\n      return this.mindMap.richText.node\r\n    }\r\n    return this.currentNode\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}