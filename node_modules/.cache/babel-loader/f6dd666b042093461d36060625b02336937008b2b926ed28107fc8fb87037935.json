{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { nodeDataNoStylePropList, selfCloseTagList } from '../constants/constant';\nimport MersenneTwister from './mersenneTwister';\nimport { ForeignObject } from '@svgdotjs/svg.js';\n\n//  深度优先遍历树\nexport const walk = (root, parent, beforeCallback, afterCallback, isRoot, layerIndex = 0, index = 0) => {\n  let stop = false;\n  if (beforeCallback) {\n    stop = beforeCallback(root, parent, isRoot, layerIndex, index);\n  }\n  if (!stop && root.children && root.children.length > 0) {\n    let _layerIndex = layerIndex + 1;\n    root.children.forEach((node, nodeIndex) => {\n      walk(node, root, beforeCallback, afterCallback, false, _layerIndex, nodeIndex);\n    });\n  }\n  afterCallback && afterCallback(root, parent, isRoot, layerIndex, index);\n};\n\n//  广度优先遍历树\nexport const bfsWalk = (root, callback) => {\n  let stack = [root];\n  let isStop = false;\n  if (callback(root, null) === 'stop') {\n    isStop = true;\n  }\n  while (stack.length) {\n    if (isStop) {\n      break;\n    }\n    let cur = stack.shift();\n    if (cur.children && cur.children.length) {\n      cur.children.forEach(item => {\n        if (isStop) return;\n        stack.push(item);\n        if (callback(item, cur) === 'stop') {\n          isStop = true;\n        }\n      });\n    }\n  }\n};\n\n// 按原比例缩放图片\nexport const resizeImgSizeByOriginRatio = (width, height, newWidth, newHeight) => {\n  let arr = [];\n  let nRatio = width / height;\n  let mRatio = newWidth / newHeight;\n  if (nRatio > mRatio) {\n    // 固定高度\n    arr = [nRatio * newHeight, newHeight];\n  } else {\n    // 固定宽度\n    arr = [newWidth, newWidth / nRatio];\n  }\n  return arr;\n};\n\n//  缩放图片尺寸\nexport const resizeImgSize = (width, height, maxWidth, maxHeight) => {\n  let nRatio = width / height;\n  let arr = [];\n  if (maxWidth && maxHeight) {\n    if (width <= maxWidth && height <= maxHeight) {\n      arr = [width, height];\n    } else {\n      let mRatio = maxWidth / maxHeight;\n      if (nRatio > mRatio) {\n        // 固定高度\n        arr = [nRatio * maxHeight, maxHeight];\n      } else {\n        // 固定宽度\n        arr = [maxWidth, maxWidth / nRatio];\n      }\n    }\n  } else if (maxWidth) {\n    if (width <= maxWidth) {\n      arr = [width, height];\n    } else {\n      arr = [maxWidth, maxWidth / nRatio];\n    }\n  } else if (maxHeight) {\n    if (height <= maxHeight) {\n      arr = [width, height];\n    } else {\n      arr = [nRatio * maxHeight, maxHeight];\n    }\n  }\n  return arr;\n};\n\n//  缩放图片\nexport const resizeImg = (imgUrl, maxWidth, maxHeight) => {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.src = imgUrl;\n    img.onload = () => {\n      let arr = resizeImgSize(img.naturalWidth, img.naturalHeight, maxWidth, maxHeight);\n      resolve(arr);\n    };\n    img.onerror = e => {\n      reject(e);\n    };\n  });\n};\n\n//  从头html结构字符串里获取带换行符的字符串\nexport const getStrWithBrFromHtml = str => {\n  str = str.replace(/<br>/gim, '\\n');\n  let el = document.createElement('div');\n  el.innerHTML = str;\n  str = el.textContent;\n  return str;\n};\n\n//  极简的深拷贝\nexport const simpleDeepClone = data => {\n  try {\n    return JSON.parse(JSON.stringify(data));\n  } catch (error) {\n    return null;\n  }\n};\n\n//  复制渲染树数据\nexport const copyRenderTree = (tree, root, removeActiveState = false) => {\n  tree.data = simpleDeepClone(root.data);\n  if (removeActiveState) {\n    tree.data.isActive = false;\n    const generalizationList = formatGetNodeGeneralization(tree.data);\n    generalizationList.forEach(item => {\n      item.isActive = false;\n    });\n  }\n  tree.children = [];\n  if (root.children && root.children.length > 0) {\n    root.children.forEach((item, index) => {\n      tree.children[index] = copyRenderTree({}, item, removeActiveState);\n    });\n  }\n  return tree;\n};\n\n//  复制节点树数据\nexport const copyNodeTree = (tree, root, removeActiveState = false, removeId = true) => {\n  tree.data = simpleDeepClone(root.nodeData ? root.nodeData.data : root.data);\n  // 移除节点uid\n  if (removeId) {\n    delete tree.data.uid;\n  } else if (!tree.data.uid) {\n    // 否则保留或生成\n    tree.data.uid = createUid();\n  }\n  if (removeActiveState) {\n    tree.data.isActive = false;\n  }\n  tree.children = [];\n  if (root.children && root.children.length > 0) {\n    root.children.forEach((item, index) => {\n      tree.children[index] = copyNodeTree({}, item, removeActiveState, removeId);\n    });\n  } else if (root.nodeData && root.nodeData.children && root.nodeData.children.length > 0) {\n    root.nodeData.children.forEach((item, index) => {\n      tree.children[index] = copyNodeTree({}, item, removeActiveState, removeId);\n    });\n  }\n  return tree;\n};\n\n//  图片转成dataURL\nexport const imgToDataUrl = src => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    // 跨域图片需要添加这个属性，否则画布被污染了无法导出图片\n    img.setAttribute('crossOrigin', 'anonymous');\n    img.onload = () => {\n      try {\n        let canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        let ctx = canvas.getContext('2d');\n        // 图片绘制到canvas里\n        ctx.drawImage(img, 0, 0, img.width, img.height);\n        resolve(canvas.toDataURL());\n      } catch (e) {\n        reject(e);\n      }\n    };\n    img.onerror = e => {\n      reject(e);\n    };\n    img.src = src;\n  });\n};\n\n// 解析dataUrl\nexport const parseDataUrl = data => {\n  if (!/^data:/.test(data)) return data;\n  let [typeStr, base64] = data.split(',');\n  let res = /^data:[^/]+\\/([^;]+);/.exec(typeStr);\n  let type = res[1];\n  return {\n    type,\n    base64\n  };\n};\n\n//  下载文件\nexport const downloadFile = (file, fileName) => {\n  let a = document.createElement('a');\n  a.href = file;\n  a.download = fileName;\n  a.click();\n};\n\n//  节流函数\nexport const throttle = (fn, time = 300, ctx) => {\n  let timer = null;\n  return (...args) => {\n    if (timer) {\n      return;\n    }\n    timer = setTimeout(() => {\n      fn.call(ctx, ...args);\n      timer = null;\n    }, time);\n  };\n};\n\n//  异步执行任务队列\nexport const asyncRun = (taskList, callback = () => {}) => {\n  let index = 0;\n  let len = taskList.length;\n  if (len <= 0) {\n    return callback();\n  }\n  let loop = () => {\n    if (index >= len) {\n      callback();\n      return;\n    }\n    taskList[index]();\n    setTimeout(() => {\n      index++;\n      loop();\n    }, 0);\n  };\n  loop();\n};\n\n// 角度转弧度\nexport const degToRad = deg => {\n  return deg * (Math.PI / 180);\n};\n\n// 驼峰转连字符\nexport const camelCaseToHyphen = str => {\n  return str.replace(/([a-z])([A-Z])/g, (...args) => {\n    return args[1] + '-' + args[2].toLowerCase();\n  });\n};\n\n//计算节点的文本长宽\nlet measureTextContext = null;\nexport const measureText = (text, {\n  italic,\n  bold,\n  fontSize,\n  fontFamily\n}) => {\n  const font = joinFontStr({\n    italic,\n    bold,\n    fontSize,\n    fontFamily\n  });\n  if (!measureTextContext) {\n    const canvas = document.createElement('canvas');\n    measureTextContext = canvas.getContext('2d');\n  }\n  measureTextContext.save();\n  measureTextContext.font = font;\n  const {\n    width,\n    actualBoundingBoxAscent,\n    actualBoundingBoxDescent\n  } = measureTextContext.measureText(text);\n  measureTextContext.restore();\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n  return {\n    width,\n    height\n  };\n};\n\n// 拼接font字符串\nexport const joinFontStr = ({\n  italic,\n  bold,\n  fontSize,\n  fontFamily\n}) => {\n  return `${italic ? 'italic ' : ''} ${bold ? 'bold ' : ''} ${fontSize}px ${fontFamily} `;\n};\n\n//  在下一个事件循环里执行任务\nexport const nextTick = function (fn, ctx) {\n  let pending = false;\n  let timerFunc = null;\n  let handle = () => {\n    pending = false;\n    ctx ? fn.call(ctx) : fn();\n  };\n  // 支持MutationObserver接口的话使用MutationObserver\n  if (typeof MutationObserver !== 'undefined') {\n    let counter = 1;\n    let observer = new MutationObserver(handle);\n    let textNode = document.createTextNode(counter);\n    observer.observe(textNode, {\n      characterData: true // 设为 true 表示监视指定目标节点或子节点树中节点所包含的字符数据的变化\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2; // counter会在0和1两者循环变化\n      textNode.data = counter; // 节点变化会触发回调handle，\n    };\n  } else {\n    // 否则使用定时器\n    timerFunc = setTimeout;\n  }\n  return function () {\n    if (pending) return;\n    pending = true;\n    timerFunc(handle, 0);\n  };\n};\n\n// 检查节点是否超出画布\nexport const checkNodeOuter = (mindMap, node) => {\n  let elRect = mindMap.elRect;\n  let {\n    scaleX,\n    scaleY,\n    translateX,\n    translateY\n  } = mindMap.draw.transform();\n  let {\n    left,\n    top,\n    width,\n    height\n  } = node;\n  let right = (left + width) * scaleX + translateX;\n  let bottom = (top + height) * scaleY + translateY;\n  left = left * scaleX + translateX;\n  top = top * scaleY + translateY;\n  let offsetLeft = 0;\n  let offsetTop = 0;\n  if (left < 0) {\n    offsetLeft = -left;\n  }\n  if (right > elRect.width) {\n    offsetLeft = -(right - elRect.width);\n  }\n  if (top < 0) {\n    offsetTop = -top;\n  }\n  if (bottom > elRect.height) {\n    offsetTop = -(bottom - elRect.height);\n  }\n  return {\n    isOuter: offsetLeft !== 0 || offsetTop !== 0,\n    offsetLeft,\n    offsetTop\n  };\n};\n\n// 提取html字符串里的纯文本\nlet getTextFromHtmlEl = null;\nexport const getTextFromHtml = html => {\n  if (!getTextFromHtmlEl) {\n    getTextFromHtmlEl = document.createElement('div');\n  }\n  getTextFromHtmlEl.innerHTML = html;\n  return getTextFromHtmlEl.textContent;\n};\n\n// 将blob转成data:url\nexport const readBlob = blob => {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    reader.onload = evt => {\n      resolve(evt.target.result);\n    };\n    reader.onerror = err => {\n      reject(err);\n    };\n    reader.readAsDataURL(blob);\n  });\n};\n\n// 将dom节点转换成html字符串\nlet nodeToHTMLWrapEl = null;\nexport const nodeToHTML = node => {\n  if (!nodeToHTMLWrapEl) {\n    nodeToHTMLWrapEl = document.createElement('div');\n  }\n  nodeToHTMLWrapEl.innerHTML = '';\n  nodeToHTMLWrapEl.appendChild(node);\n  return nodeToHTMLWrapEl.innerHTML;\n};\n\n// 获取图片大小\nexport const getImageSize = src => {\n  return new Promise(resolve => {\n    let img = new Image();\n    img.src = src;\n    img.onload = () => {\n      resolve({\n        width: img.width,\n        height: img.height\n      });\n    };\n    img.onerror = () => {\n      resolve({\n        width: 0,\n        height: 0\n      });\n    };\n  });\n};\n\n// 创建节点唯一的id\nexport const createUid = () => {\n  return uuidv4();\n};\n\n// 加载图片文件\nexport const loadImage = imgFile => {\n  return new Promise((resolve, reject) => {\n    let fr = new FileReader();\n    fr.readAsDataURL(imgFile);\n    fr.onload = async e => {\n      let url = e.target.result;\n      let size = await getImageSize(url);\n      resolve({\n        url,\n        size\n      });\n    };\n    fr.onerror = error => {\n      reject(error);\n    };\n  });\n};\n\n// 移除字符串中的html实体\nexport const removeHTMLEntities = str => {\n  ;\n  [['&nbsp;', '&#160;']].forEach(item => {\n    str = str.replaceAll(item[0], item[1]);\n  });\n  return str;\n};\n\n// 获取一个数据的类型\nexport const getType = data => {\n  return Object.prototype.toString.call(data).slice(8, -1);\n};\n\n// 判断一个数据是否是null和undefined和空字符串\nexport const isUndef = data => {\n  return data === null || data === undefined || data === '';\n};\n\n// 移除html字符串中节点的内联样式\nexport const removeHtmlStyle = html => {\n  return html.replaceAll(/(<[^\\s]+)\\s+style=[\"'][^'\"]+[\"']\\s*(>)/g, '$1$2');\n};\n\n// 给html标签中指定的标签添加内联样式\nlet addHtmlStyleEl = null;\nexport const addHtmlStyle = (html, tag, style) => {\n  if (!addHtmlStyleEl) {\n    addHtmlStyleEl = document.createElement('div');\n  }\n  addHtmlStyleEl.innerHTML = html;\n  let walk = root => {\n    let childNodes = root.childNodes;\n    childNodes.forEach(node => {\n      if (node.nodeType === 1) {\n        // 元素节点\n        if (node.tagName.toLowerCase() === tag) {\n          node.style.cssText = style;\n        } else {\n          walk(node);\n        }\n      }\n    });\n  };\n  walk(addHtmlStyleEl);\n  return addHtmlStyleEl.innerHTML;\n};\n\n// 检查一个字符串是否是富文本字符\nlet checkIsRichTextEl = null;\nexport const checkIsRichText = str => {\n  if (!checkIsRichTextEl) {\n    checkIsRichTextEl = document.createElement('div');\n  }\n  checkIsRichTextEl.innerHTML = str;\n  for (let c = checkIsRichTextEl.childNodes, i = c.length; i--;) {\n    if (c[i].nodeType == 1) return true;\n  }\n  return false;\n};\n\n// 搜索和替换html字符串中指定的文本\nlet replaceHtmlTextEl = null;\nexport const replaceHtmlText = (html, searchText, replaceText) => {\n  if (!replaceHtmlTextEl) {\n    replaceHtmlTextEl = document.createElement('div');\n  }\n  replaceHtmlTextEl.innerHTML = html;\n  let walk = root => {\n    let childNodes = root.childNodes;\n    childNodes.forEach(node => {\n      if (node.nodeType === 1) {\n        // 元素节点\n        walk(node);\n      } else if (node.nodeType === 3) {\n        // 文本节点\n        root.replaceChild(document.createTextNode(node.nodeValue.replaceAll(searchText, replaceText)), node);\n      }\n    });\n  };\n  walk(replaceHtmlTextEl);\n  return replaceHtmlTextEl.innerHTML;\n};\n\n// 去除html字符串中指定选择器的节点，然后返回html字符串\nlet removeHtmlNodeByClassEl = null;\nexport const removeHtmlNodeByClass = (html, selector) => {\n  if (!removeHtmlNodeByClassEl) {\n    removeHtmlNodeByClassEl = document.createElement('div');\n  }\n  removeHtmlNodeByClassEl.innerHTML = html;\n  const node = removeHtmlNodeByClassEl.querySelector(selector);\n  if (node) {\n    node.parentNode.removeChild(node);\n  }\n  return removeHtmlNodeByClassEl.innerHTML;\n};\n\n// 判断一个颜色是否是白色\nexport const isWhite = color => {\n  color = String(color).replaceAll(/\\s+/g, '');\n  return ['#fff', '#ffffff', '#FFF', '#FFFFFF', 'rgb(255,255,255)'].includes(color) || /rgba\\(255,255,255,[^)]+\\)/.test(color);\n};\n\n// 判断一个颜色是否是透明\nexport const isTransparent = color => {\n  color = String(color).replaceAll(/\\s+/g, '');\n  return ['', 'transparent'].includes(color) || /rgba\\(\\d+,\\d+,\\d+,0\\)/.test(color);\n};\n\n// 从当前主题里获取一个非透明非白色的颜色\nexport const getVisibleColorFromTheme = themeConfig => {\n  let {\n    lineColor,\n    root,\n    second,\n    node\n  } = themeConfig;\n  let list = [lineColor, root.fillColor, root.color, second.fillColor, second.color, node.fillColor, node.color, root.borderColor, second.borderColor, node.borderColor];\n  for (let i = 0; i < list.length; i++) {\n    let color = list[i];\n    if (!isTransparent(color) && !isWhite(color)) {\n      return color;\n    }\n  }\n};\n\n// 去掉DOM节点中的公式标签\nexport const removeFormulaTags = node => {\n  const walk = root => {\n    const childNodes = root.childNodes;\n    childNodes.forEach(node => {\n      if (node.nodeType === 1) {\n        if (node.classList.contains('ql-formula')) {\n          node.parentNode.removeChild(node);\n        } else {\n          walk(node);\n        }\n      }\n    });\n  };\n  walk(node);\n};\n\n// 将<p><span></span><p>形式的节点富文本内容转换成\\n换行的文本\n// 会过滤掉节点中的格式节点\nlet nodeRichTextToTextWithWrapEl = null;\nexport const nodeRichTextToTextWithWrap = html => {\n  if (!nodeRichTextToTextWithWrapEl) {\n    nodeRichTextToTextWithWrapEl = document.createElement('div');\n  }\n  nodeRichTextToTextWithWrapEl.innerHTML = html;\n  const childNodes = nodeRichTextToTextWithWrapEl.childNodes;\n  let res = '';\n  for (let i = 0; i < childNodes.length; i++) {\n    const node = childNodes[i];\n    if (node.nodeType === 1) {\n      // 元素节点\n      removeFormulaTags(node);\n      if (node.tagName.toLowerCase() === 'p') {\n        res += node.textContent + '\\n';\n      } else {\n        res += node.textContent;\n      }\n    } else if (node.nodeType === 3) {\n      // 文本节点\n      res += node.nodeValue;\n    }\n  }\n  return res.replace(/\\n$/, '');\n};\n\n// 将<br>换行的文本转换成<p><span></span><p>形式的节点富文本内容\nlet textToNodeRichTextWithWrapEl = null;\nexport const textToNodeRichTextWithWrap = html => {\n  if (!textToNodeRichTextWithWrapEl) {\n    textToNodeRichTextWithWrapEl = document.createElement('div');\n  }\n  textToNodeRichTextWithWrapEl.innerHTML = html;\n  const childNodes = textToNodeRichTextWithWrapEl.childNodes;\n  let list = [];\n  let str = '';\n  for (let i = 0; i < childNodes.length; i++) {\n    const node = childNodes[i];\n    if (node.nodeType === 1) {\n      // 元素节点\n      if (node.tagName.toLowerCase() === 'br') {\n        list.push(str);\n        str = '';\n      } else {\n        str += node.textContent;\n      }\n    } else if (node.nodeType === 3) {\n      // 文本节点\n      str += node.nodeValue;\n    }\n  }\n  if (str) {\n    list.push(str);\n  }\n  return list.map(item => {\n    return `<p><span>${htmlEscape(item)}</span></p>`;\n  }).join('');\n};\n\n// 去除富文本内容的样式，包括样式标签，比如strong、em、s等\n// 但要保留数学公式内容\nlet removeRichTextStyesEl = null;\nexport const removeRichTextStyes = html => {\n  if (!removeRichTextStyesEl) {\n    removeRichTextStyesEl = document.createElement('div');\n  }\n  removeRichTextStyesEl.innerHTML = html;\n  // 首先用占位文本替换掉所有的公式\n  const formulaList = removeRichTextStyesEl.querySelectorAll('.ql-formula');\n  Array.from(formulaList).forEach(el => {\n    const placeholder = document.createTextNode('$smmformula$');\n    el.parentNode.replaceChild(placeholder, el);\n  });\n  // 然后遍历每行节点，去掉内部的所有标签，转为文本\n  const childNodes = removeRichTextStyesEl.childNodes;\n  let list = [];\n  for (let i = 0; i < childNodes.length; i++) {\n    const node = childNodes[i];\n    if (node.nodeType === 1) {\n      // 元素节点\n      list.push(node.textContent);\n    } else if (node.nodeType === 3) {\n      // 文本节点\n      list.push(node.nodeValue);\n    }\n  }\n  // 拼接文本\n  html = list.map(item => {\n    return `<p><span>${htmlEscape(item)}</span></p>`;\n  }).join('');\n  // 将公式添加回去\n  if (formulaList.length > 0) {\n    html = html.replace(/\\$smmformula\\$/g, '<span class=\"smmformula\"></span>');\n    removeRichTextStyesEl.innerHTML = html;\n    const els = removeRichTextStyesEl.querySelectorAll('.smmformula');\n    Array.from(els).forEach((el, index) => {\n      el.parentNode.replaceChild(formulaList[index], el);\n    });\n    html = removeRichTextStyesEl.innerHTML;\n  }\n  return html;\n};\n\n// 判断是否是移动端环境\nexport const isMobile = () => {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n};\n\n// 获取对象改变了的的属性\nexport const getObjectChangedProps = (oldObject, newObject) => {\n  const res = {};\n  Object.keys(newObject).forEach(prop => {\n    const oldVal = oldObject[prop];\n    const newVal = newObject[prop];\n    if (getType(oldVal) !== getType(newVal)) {\n      res[prop] = newVal;\n      return;\n    }\n    if (getType(oldVal) === 'Object') {\n      if (JSON.stringify(oldVal) !== JSON.stringify(newVal)) {\n        res[prop] = newVal;\n        return;\n      }\n    } else {\n      if (oldVal !== newVal) {\n        res[prop] = newVal;\n        return;\n      }\n    }\n  });\n  return res;\n};\n\n// 判断一个字段是否是节点数据中的样式字段\nexport const checkIsNodeStyleDataKey = key => {\n  // 用户自定义字段\n  if (/^_/.test(key)) return false;\n  // 不在节点非样式字段列表里，那么就是样式字段\n  if (!nodeDataNoStylePropList.includes(key)) {\n    return true;\n  }\n  return false;\n};\n\n// 合并图标数组\n// const data = [\n//   { type: 'priority', name: '优先级图标', list: [{ name: '1', icon: 'a' }, { name: 2, icon: 'b' }] },\n//   { type: 'priority', name: '优先级图标', list: [{ name: '2', icon: 'c' }, { name: 3, icon: 'd' }] },\n// ];\n\n// mergerIconList(data) 结果\n\n// [\n//   { type: 'priority', name: '优先级图标', list: [{ name: '1', icon: 'a' }, { name: 2, icon: 'c' }, { name: 3, icon: 'd' }] },\n// ]\nexport const mergerIconList = list => {\n  return list.reduce((result, item) => {\n    const existingItem = result.find(x => x.type === item.type);\n    if (existingItem) {\n      item.list.forEach(newObj => {\n        const existingObj = existingItem.list.find(x => x.name === newObj.name);\n        if (existingObj) {\n          existingObj.icon = newObj.icon;\n        } else {\n          existingItem.list.push(newObj);\n        }\n      });\n    } else {\n      result.push({\n        ...item\n      });\n    }\n    return result;\n  }, []);\n};\n\n// 从节点实例列表里找出顶层的节点\nexport const getTopAncestorsFomNodeList = list => {\n  let res = [];\n  list.forEach(node => {\n    if (!list.find(item => {\n      return item.uid !== node.uid && item.isAncestor(node);\n    })) {\n      res.push(node);\n    }\n  });\n  return res;\n};\n\n// 从给定的节点实例列表里判断是否存在上下级关系\nexport const checkHasSupSubRelation = list => {\n  for (let i = 0; i < list.length; i++) {\n    const cur = list[i];\n    if (list.find(item => {\n      return item.uid !== cur.uid && cur.isAncestor(item);\n    })) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// 解析要添加概要的节点实例列表\nexport const parseAddGeneralizationNodeList = list => {\n  const cache = {};\n  const uidToParent = {};\n  list.forEach(node => {\n    const parent = node.parent;\n    if (parent) {\n      const pUid = parent.uid;\n      uidToParent[pUid] = parent;\n      const index = node.getIndexInBrothers();\n      const data = {\n        node,\n        index\n      };\n      if (cache[pUid]) {\n        if (!cache[pUid].find(item => {\n          return item.index === data.index;\n        })) {\n          cache[pUid].push(data);\n        }\n      } else {\n        cache[pUid] = [data];\n      }\n    }\n  });\n  const res = [];\n  Object.keys(cache).forEach(uid => {\n    if (cache[uid].length > 1) {\n      const rangeList = cache[uid].map(item => {\n        return item.index;\n      }).sort((a, b) => {\n        return a - b;\n      });\n      res.push({\n        node: uidToParent[uid],\n        range: [rangeList[0], rangeList[rangeList.length - 1]]\n      });\n    } else {\n      res.push({\n        node: cache[uid][0].node\n      });\n    }\n  });\n  return res;\n};\n\n// 判断两个矩形是否重叠\nexport const checkTwoRectIsOverlap = (minx1, maxx1, miny1, maxy1, minx2, maxx2, miny2, maxy2) => {\n  return maxx1 > minx2 && maxx2 > minx1 && maxy1 > miny2 && maxy2 > miny1;\n};\n\n// 聚焦指定输入框\nexport const focusInput = el => {\n  let selection = window.getSelection();\n  let range = document.createRange();\n  range.selectNodeContents(el);\n  range.collapse();\n  selection.removeAllRanges();\n  selection.addRange(range);\n};\n\n// 聚焦全选指定输入框\nexport const selectAllInput = el => {\n  let selection = window.getSelection();\n  let range = document.createRange();\n  range.selectNodeContents(el);\n  selection.removeAllRanges();\n  selection.addRange(range);\n};\n\n// 给指定的节点列表树数据添加附加数据，会修改原数据\nexport const addDataToAppointNodes = (appointNodes, data = {}) => {\n  const walk = list => {\n    list.forEach(node => {\n      node.data = {\n        ...node.data,\n        ...data\n      };\n      if (node.children && node.children.length > 0) {\n        walk(node.children);\n      }\n    });\n  };\n  walk(appointNodes);\n  return appointNodes;\n};\n\n// 给指定的节点列表树数据添加uid，会修改原数据\n// createNewId默认为false，即如果节点不存在uid的话，会创建新的uid。如果传true，那么无论节点数据原来是否存在uid，都会创建新的uid\nexport const createUidForAppointNodes = (appointNodes, createNewId = false) => {\n  const walk = list => {\n    list.forEach(node => {\n      if (!node.data) {\n        node.data = {};\n      }\n      if (createNewId || isUndef(node.data.uid)) {\n        node.data.uid = createUid();\n      }\n      if (node.children && node.children.length > 0) {\n        walk(node.children);\n      }\n    });\n  };\n  walk(appointNodes);\n  return appointNodes;\n};\n\n// 传入一个数据，如果该数据是数组，那么返回该数组，否则返回一个以该数据为成员的数组\nexport const formatDataToArray = data => {\n  if (!data) return [];\n  return Array.isArray(data) ? data : [data];\n};\n\n//  获取节点在同级里的位置索引\nexport const getNodeDataIndex = node => {\n  return node.parent ? node.parent.nodeData.children.findIndex(item => {\n    return item.data.uid === node.uid;\n  }) : 0;\n};\n\n// 从一个节点列表里找出某个节点的索引\nexport const getNodeIndexInNodeList = (node, nodeList) => {\n  return nodeList.findIndex(item => {\n    return item.uid === node.uid;\n  });\n};\n\n// 根据内容生成颜色\nexport const generateColorByContent = str => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  // 这里使用伪随机数的原因是因为\n  // 1. 如果字符串的内容差不多，根据hash生产的颜色就比较相近，不好区分，比如v1.1 v1.2，所以需要加入随机数来使得颜色能够区分开\n  // 2. 普通的随机数每次数值不一样，就会导致每次新增标签原来的标签颜色就会发生改变，所以加入了这个方法，使得内容不变随机数也不变\n  const rng = new MersenneTwister(hash);\n  const h = rng.genrand_int32() % 360;\n  return 'hsla(' + h + ', 50%, 50%, 1)';\n};\n\n//  html转义\nexport const htmlEscape = str => {\n  ;\n  [['&', '&amp;'], ['<', '&lt;'], ['>', '&gt;']].forEach(item => {\n    str = str.replace(new RegExp(item[0], 'g'), item[1]);\n  });\n  return str;\n};\n\n// 判断两个对象是否相同，只处理对象或数组\nexport const isSameObject = (a, b) => {\n  const type = getType(a);\n  // a、b类型不一致，那么肯定不相同\n  if (type !== getType(b)) return false;\n  // 如果都是对象\n  if (type === 'Object') {\n    const keysa = Object.keys(a);\n    const keysb = Object.keys(b);\n    // 对象字段数量不一样，肯定不相同\n    if (keysa.length !== keysb.length) return false;\n    // 字段数量一样，那么需要遍历字段进行判断\n    for (let i = 0; i < keysa.length; i++) {\n      const key = keysa[i];\n      // b没有a的一个字段，那么肯定不相同\n      if (!keysb.includes(key)) return false;\n      // 字段名称一样，那么需要递归判断它们的值\n      const isSame = isSameObject(a[key], b[key]);\n      if (!isSame) {\n        return false;\n      }\n    }\n    return true;\n  } else if (type === 'Array') {\n    // 如果都是数组\n    // 数组长度不一样，肯定不相同\n    if (a.length !== b.length) return false;\n    // 长度一样，那么需要遍历进行判断\n    for (let i = 0; i < a.length; i++) {\n      const itema = a[i];\n      const itemb = b[i];\n      const typea = getType(itema);\n      const typeb = getType(itemb);\n      if (typea !== typeb) return false;\n      const isSame = isSameObject(itema, itemb);\n      if (!isSame) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    // 其他类型，直接全等判断\n    return a === b;\n  }\n};\n\n// 将数据设置到用户剪切板中\nexport const setDataToClipboard = data => {\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(JSON.stringify(data));\n  }\n};\n\n// 从用户剪贴板中读取文字和图片\nexport const getDataFromClipboard = async () => {\n  let text = null;\n  let img = null;\n  if (navigator.clipboard) {\n    text = await navigator.clipboard.readText();\n    const items = await navigator.clipboard.read();\n    if (items && items.length > 0) {\n      for (const clipboardItem of items) {\n        for (const type of clipboardItem.types) {\n          if (/^image\\//.test(type)) {\n            img = await clipboardItem.getType(type);\n            break;\n          }\n        }\n      }\n    }\n  }\n  return {\n    text,\n    img\n  };\n};\n\n// 从节点的父节点的nodeData.children列表中移除该节点的数据\nexport const removeFromParentNodeData = node => {\n  if (!node || !node.parent) return;\n  const index = getNodeDataIndex(node);\n  if (index === -1) return;\n  node.parent.nodeData.children.splice(index, 1);\n};\n\n// 给html自闭合标签添加闭合状态\nexport const handleSelfCloseTags = str => {\n  selfCloseTagList.forEach(tagName => {\n    str = str.replaceAll(new RegExp(`<${tagName}([^>]*)>`, 'g'), `<${tagName} $1 />`);\n  });\n  return str;\n};\n\n// 检查两个节点列表是否包含的节点是一样的\nexport const checkNodeListIsEqual = (list1, list2) => {\n  if (list1.length !== list2.length) return false;\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.find(item => {\n      return item.uid === list1[i].uid;\n    })) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// 获取浏览器的chrome内核版本\nexport const getChromeVersion = () => {\n  const match = navigator.userAgent.match(/\\s+Chrome\\/(.*)\\s+/);\n  if (match && match[1]) {\n    return Number.parseFloat(match[1]);\n  }\n  return '';\n};\n\n// 创建smm粘贴的粘贴数据\nexport const createSmmFormatData = data => {\n  return {\n    simpleMindMap: true,\n    data\n  };\n};\n\n// 检查是否是smm粘贴格式的数据\nexport const checkSmmFormatData = data => {\n  let smmData = null;\n  // 如果是字符串，则尝试解析为对象\n  if (typeof data === 'string') {\n    try {\n      const parsedData = JSON.parse(data);\n      // 判断是否是对象，且存在属性标志\n      if (typeof parsedData === 'object' && parsedData.simpleMindMap) {\n        smmData = parsedData.data;\n      }\n    } catch (error) {}\n  } else if (typeof data === 'object' && data.simpleMindMap) {\n    // 否则如果是对象，则检查属性标志\n    smmData = data.data;\n  }\n  const isSmm = !!smmData;\n  return {\n    isSmm,\n    data: isSmm ? smmData : String(data)\n  };\n};\n\n// 处理输入框的粘贴事件，会去除文本的html格式、换行\nexport const handleInputPasteText = (e, text) => {\n  e.preventDefault();\n  const selection = window.getSelection();\n  if (!selection.rangeCount) return;\n  selection.deleteFromDocument();\n  text = text || e.clipboardData.getData('text');\n  // 去除格式\n  text = getTextFromHtml(text);\n  // 去除换行\n  text = text.replaceAll(/\\n/g, '');\n  const node = document.createTextNode(text);\n  selection.getRangeAt(0).insertNode(node);\n  selection.collapseToEnd();\n};\n\n// 将思维导图树结构转平级对象\n/*\r\n    {\r\n        data: {\r\n            uid: 'xxx'\r\n        },\r\n        children: [\r\n            {\r\n                data: {\r\n                    uid: 'xxx'\r\n                },\r\n                children: []\r\n            }\r\n        ]\r\n    }\r\n    转为：\r\n    {\r\n        uid: {\r\n            children: [uid1, uid2],\r\n            data: {}\r\n        }\r\n    }\r\n  */\nexport const transformTreeDataToObject = data => {\n  const res = {};\n  const walk = (root, parent) => {\n    const uid = root.data.uid;\n    if (parent) {\n      parent.children.push(uid);\n    }\n    res[uid] = {\n      isRoot: !parent,\n      data: {\n        ...root.data\n      },\n      children: []\n    };\n    if (root.children && root.children.length > 0) {\n      root.children.forEach(item => {\n        walk(item, res[uid]);\n      });\n    }\n  };\n  walk(data, null);\n  return res;\n};\n\n// 将平级对象转树结构\n// transformTreeDataToObject方法的反向操作\n// 找到父节点的uid\nconst _findParentUid = (data, targetUid) => {\n  const uids = Object.keys(data);\n  let res = '';\n  uids.forEach(uid => {\n    const children = data[uid].children;\n    const isParent = children.findIndex(childUid => {\n      return childUid === targetUid;\n    }) !== -1;\n    if (isParent) {\n      res = uid;\n    }\n  });\n  return res;\n};\nexport const transformObjectToTreeData = data => {\n  const uids = Object.keys(data);\n  if (uids.length <= 0) return null;\n  const rootKey = uids.find(uid => {\n    return data[uid].isRoot;\n  });\n  if (!rootKey || !data[rootKey]) return null;\n  // 根节点\n  const res = {\n    data: simpleDeepClone(data[rootKey].data),\n    children: []\n  };\n  const map = {};\n  map[rootKey] = res;\n  uids.forEach(uid => {\n    const parentUid = _findParentUid(data, uid);\n    const cur = data[uid];\n    const node = map[uid] || {\n      data: simpleDeepClone(cur.data),\n      children: []\n    };\n    if (!map[uid]) {\n      map[uid] = node;\n    }\n    if (parentUid) {\n      const index = data[parentUid].children.findIndex(item => {\n        return item === uid;\n      });\n      if (!map[parentUid]) {\n        map[parentUid] = {\n          data: simpleDeepClone(data[parentUid].data),\n          children: []\n        };\n      }\n      map[parentUid].children[index] = node;\n    }\n  });\n  return res;\n};\n\n// 计算两个点的直线距离\nexport const getTwoPointDistance = (x1, y1, x2, y2) => {\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\n// 判断两个矩形的相对位置\n// 第一个矩形在第二个矩形的什么方向\nexport const getRectRelativePosition = (rect1, rect2) => {\n  // 获取第一个矩形的中心点坐标\n  const rect1CenterX = rect1.x + rect1.width / 2;\n  const rect1CenterY = rect1.y + rect1.height / 2;\n\n  // 获取第二个矩形的中心点坐标\n  const rect2CenterX = rect2.x + rect2.width / 2;\n  const rect2CenterY = rect2.y + rect2.height / 2;\n\n  // 判断第一个矩形在第二个矩形的哪个方向\n  if (rect1CenterX < rect2CenterX && rect1CenterY < rect2CenterY) {\n    return 'left-top';\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY < rect2CenterY) {\n    return 'right-top';\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY > rect2CenterY) {\n    return 'right-bottom';\n  } else if (rect1CenterX < rect2CenterX && rect1CenterY > rect2CenterY) {\n    return 'left-bottom';\n  } else if (rect1CenterX < rect2CenterX && rect1CenterY === rect2CenterY) {\n    return 'left';\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY === rect2CenterY) {\n    return 'right';\n  } else if (rect1CenterX === rect2CenterX && rect1CenterY < rect2CenterY) {\n    return 'top';\n  } else if (rect1CenterX === rect2CenterX && rect1CenterY > rect2CenterY) {\n    return 'bottom';\n  } else {\n    return 'overlap';\n  }\n};\n\n// 处理获取svg内容时添加额外内容\nexport const handleGetSvgDataExtraContent = ({\n  addContentToHeader,\n  addContentToFooter\n}) => {\n  // 追加内容\n  const cssTextList = [];\n  let header = null;\n  let headerHeight = 0;\n  let footer = null;\n  let footerHeight = 0;\n  const handle = (fn, callback) => {\n    if (typeof fn === 'function') {\n      const res = fn();\n      if (!res) return;\n      const {\n        el,\n        cssText,\n        height\n      } = res;\n      if (el instanceof HTMLElement) {\n        el.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n        const foreignObject = createForeignObjectNode({\n          el,\n          height\n        });\n        callback(foreignObject, height);\n      }\n      if (cssText) {\n        cssTextList.push(cssText);\n      }\n    }\n  };\n  handle(addContentToHeader, (foreignObject, height) => {\n    header = foreignObject;\n    headerHeight = height;\n  });\n  handle(addContentToFooter, (foreignObject, height) => {\n    footer = foreignObject;\n    footerHeight = height;\n  });\n  return {\n    cssTextList,\n    header,\n    headerHeight,\n    footer,\n    footerHeight\n  };\n};\n\n// 获取指定节点的包围框信息\nexport const getNodeTreeBoundingRect = (node, x = 0, y = 0, paddingX = 0, paddingY = 0, excludeSelf = false) => {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n  const walk = (root, isRoot) => {\n    if (!(isRoot && excludeSelf)) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = root.group.findOne('.smm-node-shape').rbox();\n      if (x < minX) {\n        minX = x;\n      }\n      if (x + width > maxX) {\n        maxX = x + width;\n      }\n      if (y < minY) {\n        minY = y;\n      }\n      if (y + height > maxY) {\n        maxY = y + height;\n      }\n    }\n    if (root._generalizationList.length > 0) {\n      root._generalizationList.forEach(item => {\n        walk(item.generalizationNode);\n      });\n    }\n    if (root.children) {\n      root.children.forEach(item => {\n        walk(item);\n      });\n    }\n  };\n  walk(node, true);\n  minX = minX - x + paddingX;\n  minY = minY - y + paddingY;\n  maxX = maxX - x + paddingX;\n  maxY = maxY - y + paddingY;\n  return {\n    left: minX,\n    top: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n};\n\n// 全屏事件检测\nconst getOnfullscreEnevt = () => {\n  if (document.documentElement.requestFullScreen) {\n    return 'fullscreenchange';\n  } else if (document.documentElement.webkitRequestFullScreen) {\n    return 'webkitfullscreenchange';\n  } else if (document.documentElement.mozRequestFullScreen) {\n    return 'mozfullscreenchange';\n  } else if (document.documentElement.msRequestFullscreen) {\n    return 'msfullscreenchange';\n  }\n};\nexport const fullscrrenEvent = getOnfullscreEnevt();\n\n// 全屏\nexport const fullScreen = element => {\n  if (element.requestFullScreen) {\n    element.requestFullScreen();\n  } else if (element.webkitRequestFullScreen) {\n    element.webkitRequestFullScreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  }\n};\n\n// 退出全屏\nexport const exitFullScreen = () => {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  }\n};\n\n// 创建foreignObject节点\nexport const createForeignObjectNode = ({\n  el,\n  width,\n  height\n}) => {\n  const foreignObject = new ForeignObject();\n  if (width !== undefined) {\n    foreignObject.width(width);\n  }\n  if (height !== undefined) {\n    foreignObject.height(height);\n  }\n  foreignObject.add(el);\n  return foreignObject;\n};\n\n// 格式化获取节点的概要数据\nexport const formatGetNodeGeneralization = data => {\n  const generalization = data.generalization;\n  if (generalization) {\n    return Array.isArray(generalization) ? generalization : [generalization];\n  } else {\n    return [];\n  }\n};","map":{"version":3,"names":["v4","uuidv4","nodeDataNoStylePropList","selfCloseTagList","MersenneTwister","ForeignObject","walk","root","parent","beforeCallback","afterCallback","isRoot","layerIndex","index","stop","children","length","_layerIndex","forEach","node","nodeIndex","bfsWalk","callback","stack","isStop","cur","shift","item","push","resizeImgSizeByOriginRatio","width","height","newWidth","newHeight","arr","nRatio","mRatio","resizeImgSize","maxWidth","maxHeight","resizeImg","imgUrl","Promise","resolve","reject","img","Image","src","onload","naturalWidth","naturalHeight","onerror","e","getStrWithBrFromHtml","str","replace","el","document","createElement","innerHTML","textContent","simpleDeepClone","data","JSON","parse","stringify","error","copyRenderTree","tree","removeActiveState","isActive","generalizationList","formatGetNodeGeneralization","copyNodeTree","removeId","nodeData","uid","createUid","imgToDataUrl","setAttribute","canvas","ctx","getContext","drawImage","toDataURL","parseDataUrl","test","typeStr","base64","split","res","exec","type","downloadFile","file","fileName","a","href","download","click","throttle","fn","time","timer","args","setTimeout","call","asyncRun","taskList","len","loop","degToRad","deg","Math","PI","camelCaseToHyphen","toLowerCase","measureTextContext","measureText","text","italic","bold","fontSize","fontFamily","font","joinFontStr","save","actualBoundingBoxAscent","actualBoundingBoxDescent","restore","nextTick","pending","timerFunc","handle","MutationObserver","counter","observer","textNode","createTextNode","observe","characterData","checkNodeOuter","mindMap","elRect","scaleX","scaleY","translateX","translateY","draw","transform","left","top","right","bottom","offsetLeft","offsetTop","isOuter","getTextFromHtmlEl","getTextFromHtml","html","readBlob","blob","reader","FileReader","evt","target","result","err","readAsDataURL","nodeToHTMLWrapEl","nodeToHTML","appendChild","getImageSize","loadImage","imgFile","fr","url","size","removeHTMLEntities","replaceAll","getType","Object","prototype","toString","slice","isUndef","undefined","removeHtmlStyle","addHtmlStyleEl","addHtmlStyle","tag","style","childNodes","nodeType","tagName","cssText","checkIsRichTextEl","checkIsRichText","c","i","replaceHtmlTextEl","replaceHtmlText","searchText","replaceText","replaceChild","nodeValue","removeHtmlNodeByClassEl","removeHtmlNodeByClass","selector","querySelector","parentNode","removeChild","isWhite","color","String","includes","isTransparent","getVisibleColorFromTheme","themeConfig","lineColor","second","list","fillColor","borderColor","removeFormulaTags","classList","contains","nodeRichTextToTextWithWrapEl","nodeRichTextToTextWithWrap","textToNodeRichTextWithWrapEl","textToNodeRichTextWithWrap","map","htmlEscape","join","removeRichTextStyesEl","removeRichTextStyes","formulaList","querySelectorAll","Array","from","placeholder","els","isMobile","navigator","userAgent","getObjectChangedProps","oldObject","newObject","keys","prop","oldVal","newVal","checkIsNodeStyleDataKey","key","mergerIconList","reduce","existingItem","find","x","newObj","existingObj","name","icon","getTopAncestorsFomNodeList","isAncestor","checkHasSupSubRelation","parseAddGeneralizationNodeList","cache","uidToParent","pUid","getIndexInBrothers","rangeList","sort","b","range","checkTwoRectIsOverlap","minx1","maxx1","miny1","maxy1","minx2","maxx2","miny2","maxy2","focusInput","selection","window","getSelection","createRange","selectNodeContents","collapse","removeAllRanges","addRange","selectAllInput","addDataToAppointNodes","appointNodes","createUidForAppointNodes","createNewId","formatDataToArray","isArray","getNodeDataIndex","findIndex","getNodeIndexInNodeList","nodeList","generateColorByContent","hash","charCodeAt","rng","h","genrand_int32","RegExp","isSameObject","keysa","keysb","isSame","itema","itemb","typea","typeb","setDataToClipboard","clipboard","writeText","getDataFromClipboard","readText","items","read","clipboardItem","types","removeFromParentNodeData","splice","handleSelfCloseTags","checkNodeListIsEqual","list1","list2","getChromeVersion","match","Number","parseFloat","createSmmFormatData","simpleMindMap","checkSmmFormatData","smmData","parsedData","isSmm","handleInputPasteText","preventDefault","rangeCount","deleteFromDocument","clipboardData","getData","getRangeAt","insertNode","collapseToEnd","transformTreeDataToObject","_findParentUid","targetUid","uids","isParent","childUid","transformObjectToTreeData","rootKey","parentUid","getTwoPointDistance","x1","y1","x2","y2","sqrt","pow","getRectRelativePosition","rect1","rect2","rect1CenterX","rect1CenterY","y","rect2CenterX","rect2CenterY","handleGetSvgDataExtraContent","addContentToHeader","addContentToFooter","cssTextList","header","headerHeight","footer","footerHeight","HTMLElement","foreignObject","createForeignObjectNode","getNodeTreeBoundingRect","paddingX","paddingY","excludeSelf","minX","Infinity","maxX","minY","maxY","group","findOne","rbox","_generalizationList","generalizationNode","getOnfullscreEnevt","documentElement","requestFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","fullscrrenEvent","fullScreen","element","exitFullScreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","add","generalization"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/utils/index.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid'\r\nimport {\r\n  nodeDataNoStylePropList,\r\n  selfCloseTagList\r\n} from '../constants/constant'\r\nimport MersenneTwister from './mersenneTwister'\r\nimport { ForeignObject } from '@svgdotjs/svg.js'\r\n\r\n//  深度优先遍历树\r\nexport const walk = (\r\n  root,\r\n  parent,\r\n  beforeCallback,\r\n  afterCallback,\r\n  isRoot,\r\n  layerIndex = 0,\r\n  index = 0\r\n) => {\r\n  let stop = false\r\n  if (beforeCallback) {\r\n    stop = beforeCallback(root, parent, isRoot, layerIndex, index)\r\n  }\r\n  if (!stop && root.children && root.children.length > 0) {\r\n    let _layerIndex = layerIndex + 1\r\n    root.children.forEach((node, nodeIndex) => {\r\n      walk(\r\n        node,\r\n        root,\r\n        beforeCallback,\r\n        afterCallback,\r\n        false,\r\n        _layerIndex,\r\n        nodeIndex\r\n      )\r\n    })\r\n  }\r\n  afterCallback && afterCallback(root, parent, isRoot, layerIndex, index)\r\n}\r\n\r\n//  广度优先遍历树\r\nexport const bfsWalk = (root, callback) => {\r\n  let stack = [root]\r\n  let isStop = false\r\n  if (callback(root, null) === 'stop') {\r\n    isStop = true\r\n  }\r\n  while (stack.length) {\r\n    if (isStop) {\r\n      break\r\n    }\r\n    let cur = stack.shift()\r\n    if (cur.children && cur.children.length) {\r\n      cur.children.forEach(item => {\r\n        if (isStop) return\r\n        stack.push(item)\r\n        if (callback(item, cur) === 'stop') {\r\n          isStop = true\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n// 按原比例缩放图片\r\nexport const resizeImgSizeByOriginRatio = (\r\n  width,\r\n  height,\r\n  newWidth,\r\n  newHeight\r\n) => {\r\n  let arr = []\r\n  let nRatio = width / height\r\n  let mRatio = newWidth / newHeight\r\n  if (nRatio > mRatio) {\r\n    // 固定高度\r\n    arr = [nRatio * newHeight, newHeight]\r\n  } else {\r\n    // 固定宽度\r\n    arr = [newWidth, newWidth / nRatio]\r\n  }\r\n  return arr\r\n}\r\n\r\n//  缩放图片尺寸\r\nexport const resizeImgSize = (width, height, maxWidth, maxHeight) => {\r\n  let nRatio = width / height\r\n  let arr = []\r\n  if (maxWidth && maxHeight) {\r\n    if (width <= maxWidth && height <= maxHeight) {\r\n      arr = [width, height]\r\n    } else {\r\n      let mRatio = maxWidth / maxHeight\r\n      if (nRatio > mRatio) {\r\n        // 固定高度\r\n        arr = [nRatio * maxHeight, maxHeight]\r\n      } else {\r\n        // 固定宽度\r\n        arr = [maxWidth, maxWidth / nRatio]\r\n      }\r\n    }\r\n  } else if (maxWidth) {\r\n    if (width <= maxWidth) {\r\n      arr = [width, height]\r\n    } else {\r\n      arr = [maxWidth, maxWidth / nRatio]\r\n    }\r\n  } else if (maxHeight) {\r\n    if (height <= maxHeight) {\r\n      arr = [width, height]\r\n    } else {\r\n      arr = [nRatio * maxHeight, maxHeight]\r\n    }\r\n  }\r\n  return arr\r\n}\r\n\r\n//  缩放图片\r\nexport const resizeImg = (imgUrl, maxWidth, maxHeight) => {\r\n  return new Promise((resolve, reject) => {\r\n    let img = new Image()\r\n    img.src = imgUrl\r\n    img.onload = () => {\r\n      let arr = resizeImgSize(\r\n        img.naturalWidth,\r\n        img.naturalHeight,\r\n        maxWidth,\r\n        maxHeight\r\n      )\r\n      resolve(arr)\r\n    }\r\n    img.onerror = e => {\r\n      reject(e)\r\n    }\r\n  })\r\n}\r\n\r\n//  从头html结构字符串里获取带换行符的字符串\r\nexport const getStrWithBrFromHtml = str => {\r\n  str = str.replace(/<br>/gim, '\\n')\r\n  let el = document.createElement('div')\r\n  el.innerHTML = str\r\n  str = el.textContent\r\n  return str\r\n}\r\n\r\n//  极简的深拷贝\r\nexport const simpleDeepClone = data => {\r\n  try {\r\n    return JSON.parse(JSON.stringify(data))\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n//  复制渲染树数据\r\nexport const copyRenderTree = (tree, root, removeActiveState = false) => {\r\n  tree.data = simpleDeepClone(root.data)\r\n  if (removeActiveState) {\r\n    tree.data.isActive = false\r\n    const generalizationList = formatGetNodeGeneralization(tree.data)\r\n    generalizationList.forEach(item => {\r\n      item.isActive = false\r\n    })\r\n  }\r\n  tree.children = []\r\n  if (root.children && root.children.length > 0) {\r\n    root.children.forEach((item, index) => {\r\n      tree.children[index] = copyRenderTree({}, item, removeActiveState)\r\n    })\r\n  }\r\n  return tree\r\n}\r\n\r\n//  复制节点树数据\r\nexport const copyNodeTree = (\r\n  tree,\r\n  root,\r\n  removeActiveState = false,\r\n  removeId = true\r\n) => {\r\n  tree.data = simpleDeepClone(root.nodeData ? root.nodeData.data : root.data)\r\n  // 移除节点uid\r\n  if (removeId) {\r\n    delete tree.data.uid\r\n  } else if (!tree.data.uid) {\r\n    // 否则保留或生成\r\n    tree.data.uid = createUid()\r\n  }\r\n  if (removeActiveState) {\r\n    tree.data.isActive = false\r\n  }\r\n  tree.children = []\r\n  if (root.children && root.children.length > 0) {\r\n    root.children.forEach((item, index) => {\r\n      tree.children[index] = copyNodeTree({}, item, removeActiveState, removeId)\r\n    })\r\n  } else if (\r\n    root.nodeData &&\r\n    root.nodeData.children &&\r\n    root.nodeData.children.length > 0\r\n  ) {\r\n    root.nodeData.children.forEach((item, index) => {\r\n      tree.children[index] = copyNodeTree({}, item, removeActiveState, removeId)\r\n    })\r\n  }\r\n  return tree\r\n}\r\n\r\n//  图片转成dataURL\r\nexport const imgToDataUrl = src => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    // 跨域图片需要添加这个属性，否则画布被污染了无法导出图片\r\n    img.setAttribute('crossOrigin', 'anonymous')\r\n    img.onload = () => {\r\n      try {\r\n        let canvas = document.createElement('canvas')\r\n        canvas.width = img.width\r\n        canvas.height = img.height\r\n        let ctx = canvas.getContext('2d')\r\n        // 图片绘制到canvas里\r\n        ctx.drawImage(img, 0, 0, img.width, img.height)\r\n        resolve(canvas.toDataURL())\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    }\r\n    img.onerror = e => {\r\n      reject(e)\r\n    }\r\n    img.src = src\r\n  })\r\n}\r\n\r\n// 解析dataUrl\r\nexport const parseDataUrl = data => {\r\n  if (!/^data:/.test(data)) return data\r\n  let [typeStr, base64] = data.split(',')\r\n  let res = /^data:[^/]+\\/([^;]+);/.exec(typeStr)\r\n  let type = res[1]\r\n  return {\r\n    type,\r\n    base64\r\n  }\r\n}\r\n\r\n//  下载文件\r\nexport const downloadFile = (file, fileName) => {\r\n  let a = document.createElement('a')\r\n  a.href = file\r\n  a.download = fileName\r\n  a.click()\r\n}\r\n\r\n//  节流函数\r\nexport const throttle = (fn, time = 300, ctx) => {\r\n  let timer = null\r\n  return (...args) => {\r\n    if (timer) {\r\n      return\r\n    }\r\n    timer = setTimeout(() => {\r\n      fn.call(ctx, ...args)\r\n      timer = null\r\n    }, time)\r\n  }\r\n}\r\n\r\n//  异步执行任务队列\r\nexport const asyncRun = (taskList, callback = () => {}) => {\r\n  let index = 0\r\n  let len = taskList.length\r\n  if (len <= 0) {\r\n    return callback()\r\n  }\r\n  let loop = () => {\r\n    if (index >= len) {\r\n      callback()\r\n      return\r\n    }\r\n    taskList[index]()\r\n    setTimeout(() => {\r\n      index++\r\n      loop()\r\n    }, 0)\r\n  }\r\n  loop()\r\n}\r\n\r\n// 角度转弧度\r\nexport const degToRad = deg => {\r\n  return deg * (Math.PI / 180)\r\n}\r\n\r\n// 驼峰转连字符\r\nexport const camelCaseToHyphen = str => {\r\n  return str.replace(/([a-z])([A-Z])/g, (...args) => {\r\n    return args[1] + '-' + args[2].toLowerCase()\r\n  })\r\n}\r\n\r\n//计算节点的文本长宽\r\nlet measureTextContext = null\r\nexport const measureText = (text, { italic, bold, fontSize, fontFamily }) => {\r\n  const font = joinFontStr({\r\n    italic,\r\n    bold,\r\n    fontSize,\r\n    fontFamily\r\n  })\r\n  if (!measureTextContext) {\r\n    const canvas = document.createElement('canvas')\r\n    measureTextContext = canvas.getContext('2d')\r\n  }\r\n  measureTextContext.save()\r\n  measureTextContext.font = font\r\n  const { width, actualBoundingBoxAscent, actualBoundingBoxDescent } =\r\n    measureTextContext.measureText(text)\r\n  measureTextContext.restore()\r\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent\r\n  return { width, height }\r\n}\r\n\r\n// 拼接font字符串\r\nexport const joinFontStr = ({ italic, bold, fontSize, fontFamily }) => {\r\n  return `${italic ? 'italic ' : ''} ${\r\n    bold ? 'bold ' : ''\r\n  } ${fontSize}px ${fontFamily} `\r\n}\r\n\r\n//  在下一个事件循环里执行任务\r\nexport const nextTick = function (fn, ctx) {\r\n  let pending = false\r\n  let timerFunc = null\r\n  let handle = () => {\r\n    pending = false\r\n    ctx ? fn.call(ctx) : fn()\r\n  }\r\n  // 支持MutationObserver接口的话使用MutationObserver\r\n  if (typeof MutationObserver !== 'undefined') {\r\n    let counter = 1\r\n    let observer = new MutationObserver(handle)\r\n    let textNode = document.createTextNode(counter)\r\n    observer.observe(textNode, {\r\n      characterData: true // 设为 true 表示监视指定目标节点或子节点树中节点所包含的字符数据的变化\r\n    })\r\n    timerFunc = function () {\r\n      counter = (counter + 1) % 2 // counter会在0和1两者循环变化\r\n      textNode.data = counter // 节点变化会触发回调handle，\r\n    }\r\n  } else {\r\n    // 否则使用定时器\r\n    timerFunc = setTimeout\r\n  }\r\n  return function () {\r\n    if (pending) return\r\n    pending = true\r\n    timerFunc(handle, 0)\r\n  }\r\n}\r\n\r\n// 检查节点是否超出画布\r\nexport const checkNodeOuter = (mindMap, node) => {\r\n  let elRect = mindMap.elRect\r\n  let { scaleX, scaleY, translateX, translateY } = mindMap.draw.transform()\r\n  let { left, top, width, height } = node\r\n  let right = (left + width) * scaleX + translateX\r\n  let bottom = (top + height) * scaleY + translateY\r\n  left = left * scaleX + translateX\r\n  top = top * scaleY + translateY\r\n  let offsetLeft = 0\r\n  let offsetTop = 0\r\n  if (left < 0) {\r\n    offsetLeft = -left\r\n  }\r\n  if (right > elRect.width) {\r\n    offsetLeft = -(right - elRect.width)\r\n  }\r\n  if (top < 0) {\r\n    offsetTop = -top\r\n  }\r\n  if (bottom > elRect.height) {\r\n    offsetTop = -(bottom - elRect.height)\r\n  }\r\n  return {\r\n    isOuter: offsetLeft !== 0 || offsetTop !== 0,\r\n    offsetLeft,\r\n    offsetTop\r\n  }\r\n}\r\n\r\n// 提取html字符串里的纯文本\r\nlet getTextFromHtmlEl = null\r\nexport const getTextFromHtml = html => {\r\n  if (!getTextFromHtmlEl) {\r\n    getTextFromHtmlEl = document.createElement('div')\r\n  }\r\n  getTextFromHtmlEl.innerHTML = html\r\n  return getTextFromHtmlEl.textContent\r\n}\r\n\r\n// 将blob转成data:url\r\nexport const readBlob = blob => {\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader()\r\n    reader.onload = evt => {\r\n      resolve(evt.target.result)\r\n    }\r\n    reader.onerror = err => {\r\n      reject(err)\r\n    }\r\n    reader.readAsDataURL(blob)\r\n  })\r\n}\r\n\r\n// 将dom节点转换成html字符串\r\nlet nodeToHTMLWrapEl = null\r\nexport const nodeToHTML = node => {\r\n  if (!nodeToHTMLWrapEl) {\r\n    nodeToHTMLWrapEl = document.createElement('div')\r\n  }\r\n  nodeToHTMLWrapEl.innerHTML = ''\r\n  nodeToHTMLWrapEl.appendChild(node)\r\n  return nodeToHTMLWrapEl.innerHTML\r\n}\r\n\r\n// 获取图片大小\r\nexport const getImageSize = src => {\r\n  return new Promise(resolve => {\r\n    let img = new Image()\r\n    img.src = src\r\n    img.onload = () => {\r\n      resolve({\r\n        width: img.width,\r\n        height: img.height\r\n      })\r\n    }\r\n    img.onerror = () => {\r\n      resolve({\r\n        width: 0,\r\n        height: 0\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n// 创建节点唯一的id\r\nexport const createUid = () => {\r\n  return uuidv4()\r\n}\r\n\r\n// 加载图片文件\r\nexport const loadImage = imgFile => {\r\n  return new Promise((resolve, reject) => {\r\n    let fr = new FileReader()\r\n    fr.readAsDataURL(imgFile)\r\n    fr.onload = async e => {\r\n      let url = e.target.result\r\n      let size = await getImageSize(url)\r\n      resolve({\r\n        url,\r\n        size\r\n      })\r\n    }\r\n    fr.onerror = error => {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\n// 移除字符串中的html实体\r\nexport const removeHTMLEntities = str => {\r\n  ;[['&nbsp;', '&#160;']].forEach(item => {\r\n    str = str.replaceAll(item[0], item[1])\r\n  })\r\n  return str\r\n}\r\n\r\n// 获取一个数据的类型\r\nexport const getType = data => {\r\n  return Object.prototype.toString.call(data).slice(8, -1)\r\n}\r\n\r\n// 判断一个数据是否是null和undefined和空字符串\r\nexport const isUndef = data => {\r\n  return data === null || data === undefined || data === ''\r\n}\r\n\r\n// 移除html字符串中节点的内联样式\r\nexport const removeHtmlStyle = html => {\r\n  return html.replaceAll(/(<[^\\s]+)\\s+style=[\"'][^'\"]+[\"']\\s*(>)/g, '$1$2')\r\n}\r\n\r\n// 给html标签中指定的标签添加内联样式\r\nlet addHtmlStyleEl = null\r\nexport const addHtmlStyle = (html, tag, style) => {\r\n  if (!addHtmlStyleEl) {\r\n    addHtmlStyleEl = document.createElement('div')\r\n  }\r\n  addHtmlStyleEl.innerHTML = html\r\n  let walk = root => {\r\n    let childNodes = root.childNodes\r\n    childNodes.forEach(node => {\r\n      if (node.nodeType === 1) {\r\n        // 元素节点\r\n        if (node.tagName.toLowerCase() === tag) {\r\n          node.style.cssText = style\r\n        } else {\r\n          walk(node)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  walk(addHtmlStyleEl)\r\n  return addHtmlStyleEl.innerHTML\r\n}\r\n\r\n// 检查一个字符串是否是富文本字符\r\nlet checkIsRichTextEl = null\r\nexport const checkIsRichText = str => {\r\n  if (!checkIsRichTextEl) {\r\n    checkIsRichTextEl = document.createElement('div')\r\n  }\r\n  checkIsRichTextEl.innerHTML = str\r\n  for (let c = checkIsRichTextEl.childNodes, i = c.length; i--; ) {\r\n    if (c[i].nodeType == 1) return true\r\n  }\r\n  return false\r\n}\r\n\r\n// 搜索和替换html字符串中指定的文本\r\nlet replaceHtmlTextEl = null\r\nexport const replaceHtmlText = (html, searchText, replaceText) => {\r\n  if (!replaceHtmlTextEl) {\r\n    replaceHtmlTextEl = document.createElement('div')\r\n  }\r\n  replaceHtmlTextEl.innerHTML = html\r\n  let walk = root => {\r\n    let childNodes = root.childNodes\r\n    childNodes.forEach(node => {\r\n      if (node.nodeType === 1) {\r\n        // 元素节点\r\n        walk(node)\r\n      } else if (node.nodeType === 3) {\r\n        // 文本节点\r\n        root.replaceChild(\r\n          document.createTextNode(\r\n            node.nodeValue.replaceAll(searchText, replaceText)\r\n          ),\r\n          node\r\n        )\r\n      }\r\n    })\r\n  }\r\n  walk(replaceHtmlTextEl)\r\n  return replaceHtmlTextEl.innerHTML\r\n}\r\n\r\n// 去除html字符串中指定选择器的节点，然后返回html字符串\r\nlet removeHtmlNodeByClassEl = null\r\nexport const removeHtmlNodeByClass = (html, selector) => {\r\n  if (!removeHtmlNodeByClassEl) {\r\n    removeHtmlNodeByClassEl = document.createElement('div')\r\n  }\r\n  removeHtmlNodeByClassEl.innerHTML = html\r\n  const node = removeHtmlNodeByClassEl.querySelector(selector)\r\n  if (node) {\r\n    node.parentNode.removeChild(node)\r\n  }\r\n  return removeHtmlNodeByClassEl.innerHTML\r\n}\r\n\r\n// 判断一个颜色是否是白色\r\nexport const isWhite = color => {\r\n  color = String(color).replaceAll(/\\s+/g, '')\r\n  return (\r\n    ['#fff', '#ffffff', '#FFF', '#FFFFFF', 'rgb(255,255,255)'].includes(\r\n      color\r\n    ) || /rgba\\(255,255,255,[^)]+\\)/.test(color)\r\n  )\r\n}\r\n\r\n// 判断一个颜色是否是透明\r\nexport const isTransparent = color => {\r\n  color = String(color).replaceAll(/\\s+/g, '')\r\n  return (\r\n    ['', 'transparent'].includes(color) || /rgba\\(\\d+,\\d+,\\d+,0\\)/.test(color)\r\n  )\r\n}\r\n\r\n// 从当前主题里获取一个非透明非白色的颜色\r\nexport const getVisibleColorFromTheme = themeConfig => {\r\n  let { lineColor, root, second, node } = themeConfig\r\n  let list = [\r\n    lineColor,\r\n    root.fillColor,\r\n    root.color,\r\n    second.fillColor,\r\n    second.color,\r\n    node.fillColor,\r\n    node.color,\r\n    root.borderColor,\r\n    second.borderColor,\r\n    node.borderColor\r\n  ]\r\n  for (let i = 0; i < list.length; i++) {\r\n    let color = list[i]\r\n    if (!isTransparent(color) && !isWhite(color)) {\r\n      return color\r\n    }\r\n  }\r\n}\r\n\r\n// 去掉DOM节点中的公式标签\r\nexport const removeFormulaTags = node => {\r\n  const walk = root => {\r\n    const childNodes = root.childNodes\r\n    childNodes.forEach(node => {\r\n      if (node.nodeType === 1) {\r\n        if (node.classList.contains('ql-formula')) {\r\n          node.parentNode.removeChild(node)\r\n        } else {\r\n          walk(node)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  walk(node)\r\n}\r\n\r\n// 将<p><span></span><p>形式的节点富文本内容转换成\\n换行的文本\r\n// 会过滤掉节点中的格式节点\r\nlet nodeRichTextToTextWithWrapEl = null\r\nexport const nodeRichTextToTextWithWrap = html => {\r\n  if (!nodeRichTextToTextWithWrapEl) {\r\n    nodeRichTextToTextWithWrapEl = document.createElement('div')\r\n  }\r\n  nodeRichTextToTextWithWrapEl.innerHTML = html\r\n  const childNodes = nodeRichTextToTextWithWrapEl.childNodes\r\n  let res = ''\r\n  for (let i = 0; i < childNodes.length; i++) {\r\n    const node = childNodes[i]\r\n    if (node.nodeType === 1) {\r\n      // 元素节点\r\n      removeFormulaTags(node)\r\n      if (node.tagName.toLowerCase() === 'p') {\r\n        res += node.textContent + '\\n'\r\n      } else {\r\n        res += node.textContent\r\n      }\r\n    } else if (node.nodeType === 3) {\r\n      // 文本节点\r\n      res += node.nodeValue\r\n    }\r\n  }\r\n  return res.replace(/\\n$/, '')\r\n}\r\n\r\n// 将<br>换行的文本转换成<p><span></span><p>形式的节点富文本内容\r\nlet textToNodeRichTextWithWrapEl = null\r\nexport const textToNodeRichTextWithWrap = html => {\r\n  if (!textToNodeRichTextWithWrapEl) {\r\n    textToNodeRichTextWithWrapEl = document.createElement('div')\r\n  }\r\n  textToNodeRichTextWithWrapEl.innerHTML = html\r\n  const childNodes = textToNodeRichTextWithWrapEl.childNodes\r\n  let list = []\r\n  let str = ''\r\n  for (let i = 0; i < childNodes.length; i++) {\r\n    const node = childNodes[i]\r\n    if (node.nodeType === 1) {\r\n      // 元素节点\r\n      if (node.tagName.toLowerCase() === 'br') {\r\n        list.push(str)\r\n        str = ''\r\n      } else {\r\n        str += node.textContent\r\n      }\r\n    } else if (node.nodeType === 3) {\r\n      // 文本节点\r\n      str += node.nodeValue\r\n    }\r\n  }\r\n  if (str) {\r\n    list.push(str)\r\n  }\r\n  return list\r\n    .map(item => {\r\n      return `<p><span>${htmlEscape(item)}</span></p>`\r\n    })\r\n    .join('')\r\n}\r\n\r\n// 去除富文本内容的样式，包括样式标签，比如strong、em、s等\r\n// 但要保留数学公式内容\r\nlet removeRichTextStyesEl = null\r\nexport const removeRichTextStyes = html => {\r\n  if (!removeRichTextStyesEl) {\r\n    removeRichTextStyesEl = document.createElement('div')\r\n  }\r\n  removeRichTextStyesEl.innerHTML = html\r\n  // 首先用占位文本替换掉所有的公式\r\n  const formulaList = removeRichTextStyesEl.querySelectorAll('.ql-formula')\r\n  Array.from(formulaList).forEach(el => {\r\n    const placeholder = document.createTextNode('$smmformula$')\r\n    el.parentNode.replaceChild(placeholder, el)\r\n  })\r\n  // 然后遍历每行节点，去掉内部的所有标签，转为文本\r\n  const childNodes = removeRichTextStyesEl.childNodes\r\n  let list = []\r\n  for (let i = 0; i < childNodes.length; i++) {\r\n    const node = childNodes[i]\r\n    if (node.nodeType === 1) {\r\n      // 元素节点\r\n      list.push(node.textContent)\r\n    } else if (node.nodeType === 3) {\r\n      // 文本节点\r\n      list.push(node.nodeValue)\r\n    }\r\n  }\r\n  // 拼接文本\r\n  html = list\r\n    .map(item => {\r\n      return `<p><span>${htmlEscape(item)}</span></p>`\r\n    })\r\n    .join('')\r\n  // 将公式添加回去\r\n  if (formulaList.length > 0) {\r\n    html = html.replace(/\\$smmformula\\$/g, '<span class=\"smmformula\"></span>')\r\n    removeRichTextStyesEl.innerHTML = html\r\n    const els = removeRichTextStyesEl.querySelectorAll('.smmformula')\r\n    Array.from(els).forEach((el, index) => {\r\n      el.parentNode.replaceChild(formulaList[index], el)\r\n    })\r\n    html = removeRichTextStyesEl.innerHTML\r\n  }\r\n  return html\r\n}\r\n\r\n// 判断是否是移动端环境\r\nexport const isMobile = () => {\r\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent\r\n  )\r\n}\r\n\r\n// 获取对象改变了的的属性\r\nexport const getObjectChangedProps = (oldObject, newObject) => {\r\n  const res = {}\r\n  Object.keys(newObject).forEach(prop => {\r\n    const oldVal = oldObject[prop]\r\n    const newVal = newObject[prop]\r\n    if (getType(oldVal) !== getType(newVal)) {\r\n      res[prop] = newVal\r\n      return\r\n    }\r\n    if (getType(oldVal) === 'Object') {\r\n      if (JSON.stringify(oldVal) !== JSON.stringify(newVal)) {\r\n        res[prop] = newVal\r\n        return\r\n      }\r\n    } else {\r\n      if (oldVal !== newVal) {\r\n        res[prop] = newVal\r\n        return\r\n      }\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\n// 判断一个字段是否是节点数据中的样式字段\r\nexport const checkIsNodeStyleDataKey = key => {\r\n  // 用户自定义字段\r\n  if (/^_/.test(key)) return false\r\n  // 不在节点非样式字段列表里，那么就是样式字段\r\n  if (!nodeDataNoStylePropList.includes(key)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\n// 合并图标数组\r\n// const data = [\r\n//   { type: 'priority', name: '优先级图标', list: [{ name: '1', icon: 'a' }, { name: 2, icon: 'b' }] },\r\n//   { type: 'priority', name: '优先级图标', list: [{ name: '2', icon: 'c' }, { name: 3, icon: 'd' }] },\r\n// ];\r\n\r\n// mergerIconList(data) 结果\r\n\r\n// [\r\n//   { type: 'priority', name: '优先级图标', list: [{ name: '1', icon: 'a' }, { name: 2, icon: 'c' }, { name: 3, icon: 'd' }] },\r\n// ]\r\nexport const mergerIconList = list => {\r\n  return list.reduce((result, item) => {\r\n    const existingItem = result.find(x => x.type === item.type)\r\n    if (existingItem) {\r\n      item.list.forEach(newObj => {\r\n        const existingObj = existingItem.list.find(x => x.name === newObj.name)\r\n        if (existingObj) {\r\n          existingObj.icon = newObj.icon\r\n        } else {\r\n          existingItem.list.push(newObj)\r\n        }\r\n      })\r\n    } else {\r\n      result.push({ ...item })\r\n    }\r\n    return result\r\n  }, [])\r\n}\r\n\r\n// 从节点实例列表里找出顶层的节点\r\nexport const getTopAncestorsFomNodeList = list => {\r\n  let res = []\r\n  list.forEach(node => {\r\n    if (\r\n      !list.find(item => {\r\n        return item.uid !== node.uid && item.isAncestor(node)\r\n      })\r\n    ) {\r\n      res.push(node)\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\n// 从给定的节点实例列表里判断是否存在上下级关系\r\nexport const checkHasSupSubRelation = list => {\r\n  for (let i = 0; i < list.length; i++) {\r\n    const cur = list[i]\r\n    if (\r\n      list.find(item => {\r\n        return item.uid !== cur.uid && cur.isAncestor(item)\r\n      })\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n// 解析要添加概要的节点实例列表\r\nexport const parseAddGeneralizationNodeList = list => {\r\n  const cache = {}\r\n  const uidToParent = {}\r\n  list.forEach(node => {\r\n    const parent = node.parent\r\n    if (parent) {\r\n      const pUid = parent.uid\r\n      uidToParent[pUid] = parent\r\n      const index = node.getIndexInBrothers()\r\n      const data = {\r\n        node,\r\n        index\r\n      }\r\n      if (cache[pUid]) {\r\n        if (\r\n          !cache[pUid].find(item => {\r\n            return item.index === data.index\r\n          })\r\n        ) {\r\n          cache[pUid].push(data)\r\n        }\r\n      } else {\r\n        cache[pUid] = [data]\r\n      }\r\n    }\r\n  })\r\n  const res = []\r\n  Object.keys(cache).forEach(uid => {\r\n    if (cache[uid].length > 1) {\r\n      const rangeList = cache[uid]\r\n        .map(item => {\r\n          return item.index\r\n        })\r\n        .sort((a, b) => {\r\n          return a - b\r\n        })\r\n      res.push({\r\n        node: uidToParent[uid],\r\n        range: [rangeList[0], rangeList[rangeList.length - 1]]\r\n      })\r\n    } else {\r\n      res.push({\r\n        node: cache[uid][0].node\r\n      })\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\n// 判断两个矩形是否重叠\r\nexport const checkTwoRectIsOverlap = (\r\n  minx1,\r\n  maxx1,\r\n  miny1,\r\n  maxy1,\r\n  minx2,\r\n  maxx2,\r\n  miny2,\r\n  maxy2\r\n) => {\r\n  return maxx1 > minx2 && maxx2 > minx1 && maxy1 > miny2 && maxy2 > miny1\r\n}\r\n\r\n// 聚焦指定输入框\r\nexport const focusInput = el => {\r\n  let selection = window.getSelection()\r\n  let range = document.createRange()\r\n  range.selectNodeContents(el)\r\n  range.collapse()\r\n  selection.removeAllRanges()\r\n  selection.addRange(range)\r\n}\r\n\r\n// 聚焦全选指定输入框\r\nexport const selectAllInput = el => {\r\n  let selection = window.getSelection()\r\n  let range = document.createRange()\r\n  range.selectNodeContents(el)\r\n  selection.removeAllRanges()\r\n  selection.addRange(range)\r\n}\r\n\r\n// 给指定的节点列表树数据添加附加数据，会修改原数据\r\nexport const addDataToAppointNodes = (appointNodes, data = {}) => {\r\n  const walk = list => {\r\n    list.forEach(node => {\r\n      node.data = {\r\n        ...node.data,\r\n        ...data\r\n      }\r\n      if (node.children && node.children.length > 0) {\r\n        walk(node.children)\r\n      }\r\n    })\r\n  }\r\n  walk(appointNodes)\r\n  return appointNodes\r\n}\r\n\r\n// 给指定的节点列表树数据添加uid，会修改原数据\r\n// createNewId默认为false，即如果节点不存在uid的话，会创建新的uid。如果传true，那么无论节点数据原来是否存在uid，都会创建新的uid\r\nexport const createUidForAppointNodes = (appointNodes, createNewId = false) => {\r\n  const walk = list => {\r\n    list.forEach(node => {\r\n      if (!node.data) {\r\n        node.data = {}\r\n      }\r\n      if (createNewId || isUndef(node.data.uid)) {\r\n        node.data.uid = createUid()\r\n      }\r\n      if (node.children && node.children.length > 0) {\r\n        walk(node.children)\r\n      }\r\n    })\r\n  }\r\n  walk(appointNodes)\r\n  return appointNodes\r\n}\r\n\r\n// 传入一个数据，如果该数据是数组，那么返回该数组，否则返回一个以该数据为成员的数组\r\nexport const formatDataToArray = data => {\r\n  if (!data) return []\r\n  return Array.isArray(data) ? data : [data]\r\n}\r\n\r\n//  获取节点在同级里的位置索引\r\nexport const getNodeDataIndex = node => {\r\n  return node.parent\r\n    ? node.parent.nodeData.children.findIndex(item => {\r\n        return item.data.uid === node.uid\r\n      })\r\n    : 0\r\n}\r\n\r\n// 从一个节点列表里找出某个节点的索引\r\nexport const getNodeIndexInNodeList = (node, nodeList) => {\r\n  return nodeList.findIndex(item => {\r\n    return item.uid === node.uid\r\n  })\r\n}\r\n\r\n// 根据内容生成颜色\r\nexport const generateColorByContent = str => {\r\n  let hash = 0\r\n  for (let i = 0; i < str.length; i++) {\r\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\r\n  }\r\n  // 这里使用伪随机数的原因是因为\r\n  // 1. 如果字符串的内容差不多，根据hash生产的颜色就比较相近，不好区分，比如v1.1 v1.2，所以需要加入随机数来使得颜色能够区分开\r\n  // 2. 普通的随机数每次数值不一样，就会导致每次新增标签原来的标签颜色就会发生改变，所以加入了这个方法，使得内容不变随机数也不变\r\n  const rng = new MersenneTwister(hash)\r\n  const h = rng.genrand_int32() % 360\r\n  return 'hsla(' + h + ', 50%, 50%, 1)'\r\n}\r\n\r\n//  html转义\r\nexport const htmlEscape = str => {\r\n  ;[\r\n    ['&', '&amp;'],\r\n    ['<', '&lt;'],\r\n    ['>', '&gt;']\r\n  ].forEach(item => {\r\n    str = str.replace(new RegExp(item[0], 'g'), item[1])\r\n  })\r\n  return str\r\n}\r\n\r\n// 判断两个对象是否相同，只处理对象或数组\r\nexport const isSameObject = (a, b) => {\r\n  const type = getType(a)\r\n  // a、b类型不一致，那么肯定不相同\r\n  if (type !== getType(b)) return false\r\n  // 如果都是对象\r\n  if (type === 'Object') {\r\n    const keysa = Object.keys(a)\r\n    const keysb = Object.keys(b)\r\n    // 对象字段数量不一样，肯定不相同\r\n    if (keysa.length !== keysb.length) return false\r\n    // 字段数量一样，那么需要遍历字段进行判断\r\n    for (let i = 0; i < keysa.length; i++) {\r\n      const key = keysa[i]\r\n      // b没有a的一个字段，那么肯定不相同\r\n      if (!keysb.includes(key)) return false\r\n      // 字段名称一样，那么需要递归判断它们的值\r\n      const isSame = isSameObject(a[key], b[key])\r\n      if (!isSame) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  } else if (type === 'Array') {\r\n    // 如果都是数组\r\n    // 数组长度不一样，肯定不相同\r\n    if (a.length !== b.length) return false\r\n    // 长度一样，那么需要遍历进行判断\r\n    for (let i = 0; i < a.length; i++) {\r\n      const itema = a[i]\r\n      const itemb = b[i]\r\n      const typea = getType(itema)\r\n      const typeb = getType(itemb)\r\n      if (typea !== typeb) return false\r\n      const isSame = isSameObject(itema, itemb)\r\n      if (!isSame) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  } else {\r\n    // 其他类型，直接全等判断\r\n    return a === b\r\n  }\r\n}\r\n\r\n// 将数据设置到用户剪切板中\r\nexport const setDataToClipboard = data => {\r\n  if (navigator.clipboard) {\r\n    navigator.clipboard.writeText(JSON.stringify(data))\r\n  }\r\n}\r\n\r\n// 从用户剪贴板中读取文字和图片\r\nexport const getDataFromClipboard = async () => {\r\n  let text = null\r\n  let img = null\r\n  if (navigator.clipboard) {\r\n    text = await navigator.clipboard.readText()\r\n    const items = await navigator.clipboard.read()\r\n    if (items && items.length > 0) {\r\n      for (const clipboardItem of items) {\r\n        for (const type of clipboardItem.types) {\r\n          if (/^image\\//.test(type)) {\r\n            img = await clipboardItem.getType(type)\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    text,\r\n    img\r\n  }\r\n}\r\n\r\n// 从节点的父节点的nodeData.children列表中移除该节点的数据\r\nexport const removeFromParentNodeData = node => {\r\n  if (!node || !node.parent) return\r\n  const index = getNodeDataIndex(node)\r\n  if (index === -1) return\r\n  node.parent.nodeData.children.splice(index, 1)\r\n}\r\n\r\n// 给html自闭合标签添加闭合状态\r\nexport const handleSelfCloseTags = str => {\r\n  selfCloseTagList.forEach(tagName => {\r\n    str = str.replaceAll(\r\n      new RegExp(`<${tagName}([^>]*)>`, 'g'),\r\n      `<${tagName} $1 />`\r\n    )\r\n  })\r\n  return str\r\n}\r\n\r\n// 检查两个节点列表是否包含的节点是一样的\r\nexport const checkNodeListIsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false\r\n  for (let i = 0; i < list1.length; i++) {\r\n    if (\r\n      !list2.find(item => {\r\n        return item.uid === list1[i].uid\r\n      })\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n// 获取浏览器的chrome内核版本\r\nexport const getChromeVersion = () => {\r\n  const match = navigator.userAgent.match(/\\s+Chrome\\/(.*)\\s+/)\r\n  if (match && match[1]) {\r\n    return Number.parseFloat(match[1])\r\n  }\r\n  return ''\r\n}\r\n\r\n// 创建smm粘贴的粘贴数据\r\nexport const createSmmFormatData = data => {\r\n  return {\r\n    simpleMindMap: true,\r\n    data\r\n  }\r\n}\r\n\r\n// 检查是否是smm粘贴格式的数据\r\nexport const checkSmmFormatData = data => {\r\n  let smmData = null\r\n  // 如果是字符串，则尝试解析为对象\r\n  if (typeof data === 'string') {\r\n    try {\r\n      const parsedData = JSON.parse(data)\r\n      // 判断是否是对象，且存在属性标志\r\n      if (typeof parsedData === 'object' && parsedData.simpleMindMap) {\r\n        smmData = parsedData.data\r\n      }\r\n    } catch (error) {}\r\n  } else if (typeof data === 'object' && data.simpleMindMap) {\r\n    // 否则如果是对象，则检查属性标志\r\n    smmData = data.data\r\n  }\r\n  const isSmm = !!smmData\r\n  return {\r\n    isSmm,\r\n    data: isSmm ? smmData : String(data)\r\n  }\r\n}\r\n\r\n// 处理输入框的粘贴事件，会去除文本的html格式、换行\r\nexport const handleInputPasteText = (e, text) => {\r\n  e.preventDefault()\r\n  const selection = window.getSelection()\r\n  if (!selection.rangeCount) return\r\n  selection.deleteFromDocument()\r\n  text = text || e.clipboardData.getData('text')\r\n  // 去除格式\r\n  text = getTextFromHtml(text)\r\n  // 去除换行\r\n  text = text.replaceAll(/\\n/g, '')\r\n  const node = document.createTextNode(text)\r\n  selection.getRangeAt(0).insertNode(node)\r\n  selection.collapseToEnd()\r\n}\r\n\r\n// 将思维导图树结构转平级对象\r\n/*\r\n    {\r\n        data: {\r\n            uid: 'xxx'\r\n        },\r\n        children: [\r\n            {\r\n                data: {\r\n                    uid: 'xxx'\r\n                },\r\n                children: []\r\n            }\r\n        ]\r\n    }\r\n    转为：\r\n    {\r\n        uid: {\r\n            children: [uid1, uid2],\r\n            data: {}\r\n        }\r\n    }\r\n  */\r\nexport const transformTreeDataToObject = data => {\r\n  const res = {}\r\n  const walk = (root, parent) => {\r\n    const uid = root.data.uid\r\n    if (parent) {\r\n      parent.children.push(uid)\r\n    }\r\n    res[uid] = {\r\n      isRoot: !parent,\r\n      data: {\r\n        ...root.data\r\n      },\r\n      children: []\r\n    }\r\n    if (root.children && root.children.length > 0) {\r\n      root.children.forEach(item => {\r\n        walk(item, res[uid])\r\n      })\r\n    }\r\n  }\r\n  walk(data, null)\r\n  return res\r\n}\r\n\r\n// 将平级对象转树结构\r\n// transformTreeDataToObject方法的反向操作\r\n// 找到父节点的uid\r\nconst _findParentUid = (data, targetUid) => {\r\n  const uids = Object.keys(data)\r\n  let res = ''\r\n  uids.forEach(uid => {\r\n    const children = data[uid].children\r\n    const isParent =\r\n      children.findIndex(childUid => {\r\n        return childUid === targetUid\r\n      }) !== -1\r\n    if (isParent) {\r\n      res = uid\r\n    }\r\n  })\r\n  return res\r\n}\r\nexport const transformObjectToTreeData = data => {\r\n  const uids = Object.keys(data)\r\n  if (uids.length <= 0) return null\r\n  const rootKey = uids.find(uid => {\r\n    return data[uid].isRoot\r\n  })\r\n  if (!rootKey || !data[rootKey]) return null\r\n  // 根节点\r\n  const res = {\r\n    data: simpleDeepClone(data[rootKey].data),\r\n    children: []\r\n  }\r\n  const map = {}\r\n  map[rootKey] = res\r\n  uids.forEach(uid => {\r\n    const parentUid = _findParentUid(data, uid)\r\n    const cur = data[uid]\r\n    const node = map[uid] || {\r\n      data: simpleDeepClone(cur.data),\r\n      children: []\r\n    }\r\n    if (!map[uid]) {\r\n      map[uid] = node\r\n    }\r\n    if (parentUid) {\r\n      const index = data[parentUid].children.findIndex(item => {\r\n        return item === uid\r\n      })\r\n      if (!map[parentUid]) {\r\n        map[parentUid] = {\r\n          data: simpleDeepClone(data[parentUid].data),\r\n          children: []\r\n        }\r\n      }\r\n      map[parentUid].children[index] = node\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\n// 计算两个点的直线距离\r\nexport const getTwoPointDistance = (x1, y1, x2, y2) => {\r\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\r\n}\r\n\r\n// 判断两个矩形的相对位置\r\n// 第一个矩形在第二个矩形的什么方向\r\nexport const getRectRelativePosition = (rect1, rect2) => {\r\n  // 获取第一个矩形的中心点坐标\r\n  const rect1CenterX = rect1.x + rect1.width / 2\r\n  const rect1CenterY = rect1.y + rect1.height / 2\r\n\r\n  // 获取第二个矩形的中心点坐标\r\n  const rect2CenterX = rect2.x + rect2.width / 2\r\n  const rect2CenterY = rect2.y + rect2.height / 2\r\n\r\n  // 判断第一个矩形在第二个矩形的哪个方向\r\n  if (rect1CenterX < rect2CenterX && rect1CenterY < rect2CenterY) {\r\n    return 'left-top'\r\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY < rect2CenterY) {\r\n    return 'right-top'\r\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY > rect2CenterY) {\r\n    return 'right-bottom'\r\n  } else if (rect1CenterX < rect2CenterX && rect1CenterY > rect2CenterY) {\r\n    return 'left-bottom'\r\n  } else if (rect1CenterX < rect2CenterX && rect1CenterY === rect2CenterY) {\r\n    return 'left'\r\n  } else if (rect1CenterX > rect2CenterX && rect1CenterY === rect2CenterY) {\r\n    return 'right'\r\n  } else if (rect1CenterX === rect2CenterX && rect1CenterY < rect2CenterY) {\r\n    return 'top'\r\n  } else if (rect1CenterX === rect2CenterX && rect1CenterY > rect2CenterY) {\r\n    return 'bottom'\r\n  } else {\r\n    return 'overlap'\r\n  }\r\n}\r\n\r\n// 处理获取svg内容时添加额外内容\r\nexport const handleGetSvgDataExtraContent = ({\r\n  addContentToHeader,\r\n  addContentToFooter\r\n}) => {\r\n  // 追加内容\r\n  const cssTextList = []\r\n  let header = null\r\n  let headerHeight = 0\r\n  let footer = null\r\n  let footerHeight = 0\r\n  const handle = (fn, callback) => {\r\n    if (typeof fn === 'function') {\r\n      const res = fn()\r\n      if (!res) return\r\n      const { el, cssText, height } = res\r\n      if (el instanceof HTMLElement) {\r\n        el.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml')\r\n        const foreignObject = createForeignObjectNode({ el, height })\r\n        callback(foreignObject, height)\r\n      }\r\n      if (cssText) {\r\n        cssTextList.push(cssText)\r\n      }\r\n    }\r\n  }\r\n  handle(addContentToHeader, (foreignObject, height) => {\r\n    header = foreignObject\r\n    headerHeight = height\r\n  })\r\n  handle(addContentToFooter, (foreignObject, height) => {\r\n    footer = foreignObject\r\n    footerHeight = height\r\n  })\r\n  return {\r\n    cssTextList,\r\n    header,\r\n    headerHeight,\r\n    footer,\r\n    footerHeight\r\n  }\r\n}\r\n\r\n// 获取指定节点的包围框信息\r\nexport const getNodeTreeBoundingRect = (\r\n  node,\r\n  x = 0,\r\n  y = 0,\r\n  paddingX = 0,\r\n  paddingY = 0,\r\n  excludeSelf = false\r\n) => {\r\n  let minX = Infinity\r\n  let maxX = -Infinity\r\n  let minY = Infinity\r\n  let maxY = -Infinity\r\n  const walk = (root, isRoot) => {\r\n    if (!(isRoot && excludeSelf)) {\r\n      const { x, y, width, height } = root.group\r\n        .findOne('.smm-node-shape')\r\n        .rbox()\r\n      if (x < minX) {\r\n        minX = x\r\n      }\r\n      if (x + width > maxX) {\r\n        maxX = x + width\r\n      }\r\n      if (y < minY) {\r\n        minY = y\r\n      }\r\n      if (y + height > maxY) {\r\n        maxY = y + height\r\n      }\r\n    }\r\n    if (root._generalizationList.length > 0) {\r\n      root._generalizationList.forEach(item => {\r\n        walk(item.generalizationNode)\r\n      })\r\n    }\r\n    if (root.children) {\r\n      root.children.forEach(item => {\r\n        walk(item)\r\n      })\r\n    }\r\n  }\r\n  walk(node, true)\r\n\r\n  minX = minX - x + paddingX\r\n  minY = minY - y + paddingY\r\n  maxX = maxX - x + paddingX\r\n  maxY = maxY - y + paddingY\r\n\r\n  return {\r\n    left: minX,\r\n    top: minY,\r\n    width: maxX - minX,\r\n    height: maxY - minY\r\n  }\r\n}\r\n\r\n// 全屏事件检测\r\nconst getOnfullscreEnevt = () => {\r\n  if (document.documentElement.requestFullScreen) {\r\n    return 'fullscreenchange'\r\n  } else if (document.documentElement.webkitRequestFullScreen) {\r\n    return 'webkitfullscreenchange'\r\n  } else if (document.documentElement.mozRequestFullScreen) {\r\n    return 'mozfullscreenchange'\r\n  } else if (document.documentElement.msRequestFullscreen) {\r\n    return 'msfullscreenchange'\r\n  }\r\n}\r\nexport const fullscrrenEvent = getOnfullscreEnevt()\r\n\r\n// 全屏\r\nexport const fullScreen = element => {\r\n  if (element.requestFullScreen) {\r\n    element.requestFullScreen()\r\n  } else if (element.webkitRequestFullScreen) {\r\n    element.webkitRequestFullScreen()\r\n  } else if (element.mozRequestFullScreen) {\r\n    element.mozRequestFullScreen()\r\n  }\r\n}\r\n\r\n// 退出全屏\r\nexport const exitFullScreen = () => {\r\n  if (document.exitFullscreen) {\r\n    document.exitFullscreen()\r\n  } else if (document.webkitExitFullscreen) {\r\n    document.webkitExitFullscreen()\r\n  } else if (document.mozCancelFullScreen) {\r\n    document.mozCancelFullScreen()\r\n  }\r\n}\r\n\r\n// 创建foreignObject节点\r\nexport const createForeignObjectNode = ({ el, width, height }) => {\r\n  const foreignObject = new ForeignObject()\r\n  if (width !== undefined) {\r\n    foreignObject.width(width)\r\n  }\r\n  if (height !== undefined) {\r\n    foreignObject.height(height)\r\n  }\r\n  foreignObject.add(el)\r\n  return foreignObject\r\n}\r\n\r\n// 格式化获取节点的概要数据\r\nexport const formatGetNodeGeneralization = data => {\r\n  const generalization = data.generalization\r\n  if (generalization) {\r\n    return Array.isArray(generalization) ? generalization : [generalization]\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}