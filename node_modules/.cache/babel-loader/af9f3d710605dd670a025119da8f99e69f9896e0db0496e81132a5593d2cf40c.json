{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport merge from 'deepmerge';\nimport LogicalStructure from '../../layouts/LogicalStructure';\nimport MindMap from '../../layouts/MindMap';\nimport CatalogOrganization from '../../layouts/CatalogOrganization';\nimport OrganizationStructure from '../../layouts/OrganizationStructure';\nimport Timeline from '../../layouts/Timeline';\nimport VerticalTimeline from '../../layouts/VerticalTimeline';\nimport Fishbone from '../../layouts/Fishbone';\nimport TextEdit from './TextEdit';\nimport { copyNodeTree, simpleDeepClone, walk, bfsWalk, loadImage, isUndef, getTopAncestorsFomNodeList, addDataToAppointNodes, createUidForAppointNodes, formatDataToArray, removeFromParentNodeData, createUid, getNodeDataIndex, getNodeIndexInNodeList, setDataToClipboard, getDataFromClipboard, htmlEscape, parseAddGeneralizationNodeList, checkNodeListIsEqual, createSmmFormatData, checkSmmFormatData, checkIsNodeStyleDataKey, removeRichTextStyes, formatGetNodeGeneralization } from '../../utils';\nimport { shapeList } from './node/Shape';\nimport { lineStyleProps } from '../../themes/default';\nimport { CONSTANTS, ERROR_TYPES } from '../../constants/constant';\nimport { Polygon } from '@svgdotjs/svg.js';\n\n// 布局列表\nconst layouts = {\n  // 逻辑结构图\n  [CONSTANTS.LAYOUT.LOGICAL_STRUCTURE]: LogicalStructure,\n  // 思维导图\n  [CONSTANTS.LAYOUT.MIND_MAP]: MindMap,\n  // 目录组织图\n  [CONSTANTS.LAYOUT.CATALOG_ORGANIZATION]: CatalogOrganization,\n  // 组织结构图\n  [CONSTANTS.LAYOUT.ORGANIZATION_STRUCTURE]: OrganizationStructure,\n  // 时间轴\n  [CONSTANTS.LAYOUT.TIMELINE]: Timeline,\n  // 时间轴2\n  [CONSTANTS.LAYOUT.TIMELINE2]: Timeline,\n  // 竖向时间轴\n  [CONSTANTS.LAYOUT.VERTICAL_TIMELINE]: VerticalTimeline,\n  // 鱼骨图\n  [CONSTANTS.LAYOUT.FISHBONE]: Fishbone\n};\n\n//  渲染\nclass Render {\n  //  构造函数\n  constructor(opt = {}) {\n    this.opt = opt;\n    this.mindMap = opt.mindMap;\n    this.themeConfig = this.mindMap.themeConfig;\n    // 渲染树，操作过程中修改的都是这里的数据\n    this.renderTree = this.mindMap.opt.data ? merge({}, this.mindMap.opt.data) : null;\n    // 是否重新渲染\n    this.reRender = false;\n    // 是否正在渲染中\n    this.isRendering = false;\n    // 是否存在等待渲染\n    this.hasWaitRendering = false;\n    this.waitRenderingParams = [];\n    // 用于缓存节点\n    this.nodeCache = {};\n    this.lastNodeCache = {};\n    // 触发render的来源\n    this.renderSource = '';\n    // 当前激活的节点列表\n    this.activeNodeList = [];\n    // 根节点\n    this.root = null;\n    // 文本编辑框，需要再bindEvent之前实例化，否则单击事件只能触发隐藏文本编辑框，而无法保存文本修改\n    this.textEdit = new TextEdit(this);\n    // 当前复制的数据\n    this.lastBeingCopyData = null;\n    this.beingCopyData = null;\n    this.beingPasteText = '';\n    this.beingPasteImgSize = 0;\n    this.currentBeingPasteType = '';\n    // 节点高亮框\n    this.highlightBoxNode = null;\n    // 上一次节点激活数据\n    this.lastActiveNode = null;\n    this.lastActiveNodeList = [];\n    // 布局\n    this.setLayout();\n    // 绑定事件\n    this.bindEvent();\n    // 注册命令\n    this.registerCommands();\n    // 注册快捷键\n    this.registerShortcutKeys();\n  }\n\n  //  设置布局结构\n  setLayout() {\n    this.layout = new (layouts[this.mindMap.opt.layout] ? layouts[this.mindMap.opt.layout] : layouts[CONSTANTS.LAYOUT.LOGICAL_STRUCTURE])(this, this.mindMap.opt.layout);\n  }\n\n  // 重新设置思维导图数据\n  setData(data) {\n    if (this.mindMap.richText) {\n      this.renderTree = data ? this.mindMap.richText.handleSetData(data) : null;\n    } else {\n      this.renderTree = data;\n    }\n  }\n\n  //   绑定事件\n  bindEvent() {\n    // 画布点击事件清除当前激活节点列表\n    this.mindMap.on('draw_click', e => {\n      this.clearActiveNodeListOnDrawClick(e, 'click');\n    });\n    // 画布右键事件事件清除当前激活节点列表\n    this.mindMap.on('contextmenu', e => {\n      this.clearActiveNodeListOnDrawClick(e, 'contextmenu');\n    });\n    // 鼠标双击回到根节点\n    this.mindMap.svg.on('dblclick', () => {\n      if (!this.mindMap.opt.enableDblclickBackToRootNode) return;\n      this.setRootNodeCenter();\n    });\n    // let timer = null\n    // this.mindMap.on('view_data_change', () => {\n    //   clearTimeout(timer)\n    //   timer = setTimeout(() => {\n    //     this.render()\n    //   }, 300)\n    // })\n  }\n\n  //  注册命令\n  registerCommands() {\n    // 全选\n    this.selectAll = this.selectAll.bind(this);\n    this.mindMap.command.add('SELECT_ALL', this.selectAll);\n    // 回退\n    this.back = this.back.bind(this);\n    this.mindMap.command.add('BACK', this.back);\n    // 前进\n    this.forward = this.forward.bind(this);\n    this.mindMap.command.add('FORWARD', this.forward);\n    // 插入同级节点\n    this.insertNode = this.insertNode.bind(this);\n    this.mindMap.command.add('INSERT_NODE', this.insertNode);\n    // 插入多个同级节点\n    this.insertMultiNode = this.insertMultiNode.bind(this);\n    this.mindMap.command.add('INSERT_MULTI_NODE', this.insertMultiNode);\n    // 插入子节点\n    this.insertChildNode = this.insertChildNode.bind(this);\n    this.mindMap.command.add('INSERT_CHILD_NODE', this.insertChildNode);\n    // 插入多个子节点\n    this.insertMultiChildNode = this.insertMultiChildNode.bind(this);\n    this.mindMap.command.add('INSERT_MULTI_CHILD_NODE', this.insertMultiChildNode);\n    // 插入父节点\n    this.insertParentNode = this.insertParentNode.bind(this);\n    this.mindMap.command.add('INSERT_PARENT_NODE', this.insertParentNode);\n    // 上移节点\n    this.upNode = this.upNode.bind(this);\n    this.mindMap.command.add('UP_NODE', this.upNode);\n    // 下移节点\n    this.downNode = this.downNode.bind(this);\n    this.mindMap.command.add('DOWN_NODE', this.downNode);\n    //  将一个节点上移一个层级\n    this.moveUpOneLevel = this.moveUpOneLevel.bind(this);\n    this.mindMap.command.add('MOVE_UP_ONE_LEVEL', this.moveUpOneLevel);\n    // 移动节点\n    this.insertAfter = this.insertAfter.bind(this);\n    this.mindMap.command.add('INSERT_AFTER', this.insertAfter);\n    this.insertBefore = this.insertBefore.bind(this);\n    this.mindMap.command.add('INSERT_BEFORE', this.insertBefore);\n    this.moveNodeTo = this.moveNodeTo.bind(this);\n    this.mindMap.command.add('MOVE_NODE_TO', this.moveNodeTo);\n    // 删除节点\n    this.removeNode = this.removeNode.bind(this);\n    this.mindMap.command.add('REMOVE_NODE', this.removeNode);\n    // 仅删除当前节点\n    this.removeCurrentNode = this.removeCurrentNode.bind(this);\n    this.mindMap.command.add('REMOVE_CURRENT_NODE', this.removeCurrentNode);\n    // 粘贴节点\n    this.pasteNode = this.pasteNode.bind(this);\n    this.mindMap.command.add('PASTE_NODE', this.pasteNode);\n    // 剪切节点\n    this.cutNode = this.cutNode.bind(this);\n    this.mindMap.command.add('CUT_NODE', this.cutNode);\n    // 修改节点单个样式\n    this.setNodeStyle = this.setNodeStyle.bind(this);\n    this.mindMap.command.add('SET_NODE_STYLE', this.setNodeStyle);\n    // 修改节点多个样式\n    this.setNodeStyles = this.setNodeStyles.bind(this);\n    this.mindMap.command.add('SET_NODE_STYLES', this.setNodeStyles);\n    // 切换节点是否激活\n    this.setNodeActive = this.setNodeActive.bind(this);\n    this.mindMap.command.add('SET_NODE_ACTIVE', this.setNodeActive);\n    // 清除所有激活节点\n    this.clearActiveNode = this.clearActiveNode.bind(this);\n    this.mindMap.command.add('CLEAR_ACTIVE_NODE', this.clearActiveNode);\n    // 切换节点是否展开\n    this.setNodeExpand = this.setNodeExpand.bind(this);\n    this.mindMap.command.add('SET_NODE_EXPAND', this.setNodeExpand);\n    // 展开所有节点\n    this.expandAllNode = this.expandAllNode.bind(this);\n    this.mindMap.command.add('EXPAND_ALL', this.expandAllNode);\n    // 收起所有节点\n    this.unexpandAllNode = this.unexpandAllNode.bind(this);\n    this.mindMap.command.add('UNEXPAND_ALL', this.unexpandAllNode);\n    // 展开到指定层级\n    this.expandToLevel = this.expandToLevel.bind(this);\n    this.mindMap.command.add('UNEXPAND_TO_LEVEL', this.expandToLevel);\n    // 设置节点数据\n    this.setNodeData = this.setNodeData.bind(this);\n    this.mindMap.command.add('SET_NODE_DATA', this.setNodeData);\n    // 设置节点文本\n    this.setNodeText = this.setNodeText.bind(this);\n    this.mindMap.command.add('SET_NODE_TEXT', this.setNodeText);\n    // 设置节点图片\n    this.setNodeImage = this.setNodeImage.bind(this);\n    this.mindMap.command.add('SET_NODE_IMAGE', this.setNodeImage);\n    // 设置节点图标\n    this.setNodeIcon = this.setNodeIcon.bind(this);\n    this.mindMap.command.add('SET_NODE_ICON', this.setNodeIcon);\n    // 设置节点超链接\n    this.setNodeHyperlink = this.setNodeHyperlink.bind(this);\n    this.mindMap.command.add('SET_NODE_HYPERLINK', this.setNodeHyperlink);\n    // 设置节点备注\n    this.setNodeNote = this.setNodeNote.bind(this);\n    this.mindMap.command.add('SET_NODE_NOTE', this.setNodeNote);\n    // 设置节点附件\n    this.setNodeAttachment = this.setNodeAttachment.bind(this);\n    this.mindMap.command.add('SET_NODE_ATTACHMENT', this.setNodeAttachment);\n    // 设置节点标签\n    this.setNodeTag = this.setNodeTag.bind(this);\n    this.mindMap.command.add('SET_NODE_TAG', this.setNodeTag);\n    // 设置节点公式\n    this.insertFormula = this.insertFormula.bind(this);\n    this.mindMap.command.add('INSERT_FORMULA', this.insertFormula);\n    // 添加节点概要\n    this.addGeneralization = this.addGeneralization.bind(this);\n    this.mindMap.command.add('ADD_GENERALIZATION', this.addGeneralization);\n    // 删除节点概要\n    this.removeGeneralization = this.removeGeneralization.bind(this);\n    this.mindMap.command.add('REMOVE_GENERALIZATION', this.removeGeneralization);\n    // 设置节点自定义位置\n    this.setNodeCustomPosition = this.setNodeCustomPosition.bind(this);\n    this.mindMap.command.add('SET_NODE_CUSTOM_POSITION', this.setNodeCustomPosition);\n    // 一键整理布局\n    this.resetLayout = this.resetLayout.bind(this);\n    this.mindMap.command.add('RESET_LAYOUT', this.resetLayout);\n    // 设置节点形状\n    this.setNodeShape = this.setNodeShape.bind(this);\n    this.mindMap.command.add('SET_NODE_SHAPE', this.setNodeShape);\n    // 定位节点\n    this.goTargetNode = this.goTargetNode.bind(this);\n    this.mindMap.command.add('GO_TARGET_NODE', this.goTargetNode);\n    // 一键去除节点自定义样式\n    this.removeCustomStyles = this.removeCustomStyles.bind(this);\n    this.mindMap.command.add('REMOVE_CUSTOM_STYLES', this.removeCustomStyles);\n    // 一键去除所有节点自定义样式\n    this.removeAllNodeCustomStyles = this.removeAllNodeCustomStyles.bind(this);\n    this.mindMap.command.add('REMOVE_ALL_NODE_CUSTOM_STYLES', this.removeAllNodeCustomStyles);\n  }\n\n  //  注册快捷键\n  registerShortcutKeys() {\n    // 插入下级节点\n    this.mindMap.keyCommand.addShortcut('Tab', () => {\n      this.mindMap.execCommand('INSERT_CHILD_NODE');\n    });\n    // 插入下级节点\n    this.mindMap.keyCommand.addShortcut('Insert', () => {\n      this.mindMap.execCommand('INSERT_CHILD_NODE');\n    });\n    // 插入同级节点\n    this.mindMap.keyCommand.addShortcut('Enter', () => {\n      this.mindMap.execCommand('INSERT_NODE');\n    });\n    // 插入父节点\n    this.mindMap.keyCommand.addShortcut('Shift+Tab', () => {\n      this.mindMap.execCommand('INSERT_PARENT_NODE');\n    });\n    // 插入概要\n    this.mindMap.keyCommand.addShortcut('Control+g', () => {\n      this.mindMap.execCommand('ADD_GENERALIZATION');\n    });\n    // 展开/收起节点\n    this.toggleActiveExpand = this.toggleActiveExpand.bind(this);\n    this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand);\n    // 删除节点\n    this.mindMap.keyCommand.addShortcut('Del|Backspace', () => {\n      this.mindMap.execCommand('REMOVE_NODE');\n    });\n    // 仅删除当前节点\n    this.mindMap.keyCommand.addShortcut('Shift+Backspace', () => {\n      this.mindMap.execCommand('REMOVE_CURRENT_NODE');\n    });\n    // 节点编辑时某些快捷键会存在冲突，需要暂时去除\n    this.mindMap.on('before_show_text_edit', () => {\n      this.startTextEdit();\n    });\n    this.mindMap.on('hide_text_edit', () => {\n      this.endTextEdit();\n    });\n    // 全选\n    this.mindMap.keyCommand.addShortcut('Control+a', () => {\n      this.mindMap.execCommand('SELECT_ALL');\n    });\n    // 一键整理布局\n    this.mindMap.keyCommand.addShortcut('Control+l', () => {\n      this.mindMap.execCommand('RESET_LAYOUT');\n    });\n    // 上移节点\n    this.mindMap.keyCommand.addShortcut('Control+Up', () => {\n      this.mindMap.execCommand('UP_NODE');\n    });\n    // 下移节点\n    this.mindMap.keyCommand.addShortcut('Control+Down', () => {\n      this.mindMap.execCommand('DOWN_NODE');\n    });\n    // 复制节点、\n    this.mindMap.keyCommand.addShortcut('Control+c', () => {\n      this.copy();\n    });\n    // 剪切节点\n    this.mindMap.keyCommand.addShortcut('Control+x', () => {\n      this.cut();\n    });\n    // 粘贴节点\n    this.mindMap.keyCommand.addShortcut('Control+v', () => {\n      this.paste();\n    });\n    // 根节点居中显示\n    this.mindMap.keyCommand.addShortcut('Control+Enter', () => {\n      this.setRootNodeCenter();\n    });\n  }\n\n  // 派发节点激活事件\n  emitNodeActiveEvent(node = null, activeNodeList = [...this.activeNodeList]) {\n    let isChange = false;\n    isChange = this.lastActiveNode !== node;\n    if (!isChange) {\n      isChange = !checkNodeListIsEqual(this.lastActiveNodeList, activeNodeList);\n    }\n    if (!isChange) return;\n    this.lastActiveNode = node;\n    this.lastActiveNodeList = [...activeNodeList];\n    this.mindMap.batchExecution.push('emitNodeActiveEvent', () => {\n      this.mindMap.emit('node_active', node, activeNodeList);\n    });\n  }\n\n  // 鼠标点击画布时清空当前激活节点列表\n  clearActiveNodeListOnDrawClick(e, eventType) {\n    if (this.activeNodeList.length <= 0) return;\n    // 清除激活状态\n    let isTrueClick = true;\n    // 是否是左键多选节点，右键拖动画布\n    const {\n      useLeftKeySelectionRightKeyDrag\n    } = this.mindMap.opt;\n    // 如果鼠标按下和松开的距离较大，则不认为是点击事件\n    if (eventType === 'contextmenu' ? !useLeftKeySelectionRightKeyDrag : useLeftKeySelectionRightKeyDrag) {\n      const mousedownPos = this.mindMap.event.mousedownPos;\n      isTrueClick = Math.abs(e.clientX - mousedownPos.x) <= 5 && Math.abs(e.clientY - mousedownPos.y) <= 5;\n    }\n    if (isTrueClick) {\n      this.mindMap.execCommand('CLEAR_ACTIVE_NODE');\n    }\n  }\n\n  //  开启文字编辑，会禁用回车键和删除键相关快捷键防止冲突\n  startTextEdit() {\n    this.mindMap.keyCommand.save();\n  }\n\n  //  结束文字编辑，会恢复回车键和删除键相关快捷键\n  endTextEdit() {\n    this.mindMap.keyCommand.restore();\n  }\n\n  // 清空节点缓存池\n  clearCache() {\n    this.layout.lru.clear();\n    this.nodeCache = {};\n    this.lastNodeCache = {};\n  }\n\n  //   渲染\n  render(callback = () => {}, source) {\n    // 切换主题时，被收起的节点需要添加样式复位的标注\n    if (source === CONSTANTS.CHANGE_THEME) {\n      this.resetUnExpandNodeStyle();\n    }\n    // 如果当前还没有渲染完毕，不再触发渲染\n    if (this.isRendering) {\n      // 等待当前渲染完毕后再进行一次渲染\n      this.hasWaitRendering = true;\n      this.waitRenderingParams = [callback, source];\n      return;\n    }\n    this.isRendering = true;\n    // 触发当前重新渲染的来源\n    this.renderSource = source;\n    // 节点缓存\n    this.lastNodeCache = this.nodeCache;\n    this.nodeCache = {};\n    // 重新渲染需要清除激活状态\n    if (this.reRender) {\n      this.clearActiveNodeList();\n    }\n    // 如果没有节点数据\n    if (!this.renderTree) {\n      this.isRendering = false;\n      this.mindMap.emit('node_tree_render_end');\n      return;\n    }\n    // 计算布局\n    this.layout.doLayout(root => {\n      // 删除本次渲染时不再需要的节点\n      Object.keys(this.lastNodeCache).forEach(uid => {\n        if (!this.nodeCache[uid]) {\n          // 从激活节点列表里删除\n          this.removeNodeFromActiveList(this.lastNodeCache[uid]);\n          this.emitNodeActiveEvent();\n          // 调用节点的销毁方法\n          this.lastNodeCache[uid].destroy();\n        }\n      });\n      // 更新根节点\n      this.root = root;\n      // 渲染节点\n      this.root.render(() => {\n        this.isRendering = false;\n        this.mindMap.emit('node_tree_render_end');\n        callback && callback();\n        if (this.hasWaitRendering) {\n          const params = this.waitRenderingParams;\n          this.hasWaitRendering = false;\n          this.waitRenderingParams = [];\n          this.render(...params);\n        } else {\n          this.renderSource = '';\n          if (this.reRender) {\n            this.reRender = false;\n          }\n          // 触发一次保存，因为修改了渲染树的数据\n          if (this.mindMap.richText && [CONSTANTS.CHANGE_THEME, CONSTANTS.SET_DATA].includes(source)) {\n            this.mindMap.command.addHistory();\n          }\n        }\n      });\n    });\n    this.emitNodeActiveEvent();\n  }\n\n  // 给当前被收起来的节点数据添加文本复位标志\n  resetUnExpandNodeStyle() {\n    if (!this.renderTree) return;\n    walk(this.renderTree, null, node => {\n      if (!node.data.expand) {\n        walk(node, null, node2 => {\n          node2.data.resetRichText = true;\n        });\n        return true;\n      }\n    });\n  }\n\n  //  清除当前所有激活节点，并会触发事件\n  clearActiveNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    this.clearActiveNodeList();\n    this.emitNodeActiveEvent(null, []);\n  }\n\n  //  清除当前激活的节点列表\n  clearActiveNodeList() {\n    this.activeNodeList.forEach(item => {\n      this.mindMap.execCommand('SET_NODE_ACTIVE', item, false);\n    });\n    this.activeNodeList = [];\n  }\n\n  // 添加节点到激活列表里\n  addNodeToActiveList(node, notEmitBeforeNodeActiveEvent = false) {\n    if (this.mindMap.opt.onlyOneEnableActiveNodeOnCooperate && node.userList.length > 0) return;\n    const index = this.findActiveNodeIndex(node);\n    if (index === -1) {\n      if (!notEmitBeforeNodeActiveEvent) {\n        this.mindMap.emit('before_node_active', node, this.activeNodeList);\n      }\n      this.mindMap.execCommand('SET_NODE_ACTIVE', node, true);\n      this.activeNodeList.push(node);\n    }\n  }\n\n  // 在激活列表里移除某个节点\n  removeNodeFromActiveList(node) {\n    let index = this.findActiveNodeIndex(node);\n    if (index === -1) {\n      return;\n    }\n    this.mindMap.execCommand('SET_NODE_ACTIVE', node, false);\n    this.activeNodeList.splice(index, 1);\n  }\n\n  //  检索某个节点在激活列表里的索引\n  findActiveNodeIndex(node) {\n    return getNodeIndexInNodeList(node, this.activeNodeList);\n  }\n\n  //  全选\n  selectAll() {\n    if (this.mindMap.opt.readonly) return;\n    walk(this.root, null, node => {\n      if (!node.getData('isActive')) {\n        this.addNodeToActiveList(node);\n      }\n    }, null, true, 0, 0);\n    this.emitNodeActiveEvent();\n  }\n\n  //  回退\n  back(step) {\n    this.backForward('back', step);\n  }\n\n  //  前进\n  forward(step) {\n    this.backForward('forward', step);\n  }\n\n  // 前进回退\n  backForward(type, step) {\n    this.mindMap.execCommand('CLEAR_ACTIVE_NODE');\n    const data = this.mindMap.command[type](step);\n    if (data) {\n      this.renderTree = data;\n      this.mindMap.render();\n    }\n  }\n\n  // 获取创建新节点的行为\n  getNewNodeBehavior(openEdit = false, handleMultiNodes = false) {\n    const {\n      createNewNodeBehavior\n    } = this.mindMap.opt;\n    let focusNewNode = false; // 是否激活新节点\n    let inserting = false; // 新节点是否进入编辑模式\n    switch (createNewNodeBehavior) {\n      // 默认会激活新创建的节点，并且进入编辑模式。如果同时创建了多个新节点，那么只会激活而不会进入编辑模式\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.DEFAULT:\n        focusNewNode = handleMultiNodes || !openEdit;\n        inserting = handleMultiNodes ? false : openEdit; // 如果同时对多个节点插入子节点，那么无需进入编辑模式\n        break;\n      // 不激活新创建的节点\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.NOT_ACTIVE:\n        focusNewNode = false;\n        inserting = false;\n        break;\n      // 只激活新创建的节点，不进入编辑模式\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.ACTIVE_ONLY:\n        focusNewNode = true;\n        inserting = false;\n        break;\n      default:\n        break;\n    }\n    return {\n      focusNewNode,\n      inserting\n    };\n  }\n\n  //  插入同级节点\n  insertNode(openEdit = true, appointNodes = [], appointData = null, appointChildren = []) {\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    this.textEdit.hideEditTextBox();\n    const {\n      defaultInsertSecondLevelNodeText,\n      defaultInsertBelowSecondLevelNodeText\n    } = this.mindMap.opt;\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    const handleMultiNodes = list.length > 1;\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode,\n      inserting\n    } = this.getNewNodeBehavior(openEdit, handleMultiNodes);\n    const params = {\n      expand: true,\n      richText: isRichText,\n      resetRichText: isRichText,\n      isActive: focusNewNode // 如果同时对多个节点插入子节点，那么需要把新增的节点设为激活状态。如果不进入编辑状态，那么也需要手动设为激活状态\n    };\n    // 动态指定的子节点数据也需要添加相关属性\n    appointChildren = addDataToAppointNodes(appointChildren, {\n      ...params\n    });\n    list.forEach(node => {\n      if (node.isGeneralization || node.isRoot) {\n        return;\n      }\n      const parent = node.parent;\n      const isOneLayer = node.layerIndex === 1;\n      // 新插入节点的默认文本\n      const text = isOneLayer ? defaultInsertSecondLevelNodeText : defaultInsertBelowSecondLevelNodeText;\n      // 计算插入位置\n      const index = getNodeDataIndex(node);\n      const newNodeData = {\n        inserting,\n        data: {\n          text: text,\n          ...params,\n          uid: createUid(),\n          ...(appointData || {})\n        },\n        children: [...createUidForAppointNodes(appointChildren)]\n      };\n      parent.nodeData.children.splice(index + 1, 0, newNodeData);\n    });\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render();\n  }\n\n  // 插入多个同级节点\n  insertMultiNode(appointNodes, nodeList) {\n    if (!nodeList || nodeList.length <= 0) return;\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    this.textEdit.hideEditTextBox();\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode\n    } = this.getNewNodeBehavior(false, true);\n    const params = {\n      expand: true,\n      richText: isRichText,\n      resetRichText: isRichText,\n      isActive: focusNewNode\n    };\n    nodeList = addDataToAppointNodes(nodeList, params);\n    list.forEach(node => {\n      if (node.isGeneralization || node.isRoot) {\n        return;\n      }\n      const parent = node.parent;\n      // 计算插入位置\n      const index = getNodeDataIndex(node);\n      const newNodeList = createUidForAppointNodes(simpleDeepClone(nodeList));\n      parent.nodeData.children.splice(index + 1, 0, ...newNodeList);\n    });\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render();\n  }\n\n  //  插入子节点\n  insertChildNode(openEdit = true, appointNodes = [], appointData = null, appointChildren = []) {\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    this.textEdit.hideEditTextBox();\n    const {\n      defaultInsertSecondLevelNodeText,\n      defaultInsertBelowSecondLevelNodeText\n    } = this.mindMap.opt;\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    const handleMultiNodes = list.length > 1;\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode,\n      inserting\n    } = this.getNewNodeBehavior(openEdit, handleMultiNodes);\n    const params = {\n      expand: true,\n      richText: isRichText,\n      resetRichText: isRichText,\n      isActive: focusNewNode\n    };\n    // 动态指定的子节点数据也需要添加相关属性\n    appointChildren = addDataToAppointNodes(appointChildren, {\n      ...params\n    });\n    list.forEach(node => {\n      if (node.isGeneralization) {\n        return;\n      }\n      if (!node.nodeData.children) {\n        node.nodeData.children = [];\n      }\n      const text = node.isRoot ? defaultInsertSecondLevelNodeText : defaultInsertBelowSecondLevelNodeText;\n      const newNode = {\n        inserting,\n        data: {\n          text: text,\n          uid: createUid(),\n          ...params,\n          ...(appointData || {})\n        },\n        children: [...createUidForAppointNodes(appointChildren)]\n      };\n      node.nodeData.children.push(newNode);\n      // 插入子节点时自动展开子节点\n      node.setData({\n        expand: true\n      });\n    });\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render();\n  }\n\n  // 插入多个子节点\n  insertMultiChildNode(appointNodes, childList) {\n    if (!childList || childList.length <= 0) return;\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    this.textEdit.hideEditTextBox();\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode\n    } = this.getNewNodeBehavior(false, true);\n    const params = {\n      expand: true,\n      richText: isRichText,\n      resetRichText: isRichText,\n      isActive: focusNewNode\n    };\n    childList = addDataToAppointNodes(childList, params);\n    list.forEach(node => {\n      if (node.isGeneralization) {\n        return;\n      }\n      if (!node.nodeData.children) {\n        node.nodeData.children = [];\n      }\n      childList = createUidForAppointNodes(childList);\n      node.nodeData.children.push(...childList);\n      // 插入子节点时自动展开子节点\n      node.setData({\n        expand: true\n      });\n    });\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render();\n  }\n\n  // 插入父节点\n  insertParentNode(openEdit = true, appointNodes, appointData) {\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    this.textEdit.hideEditTextBox();\n    const {\n      defaultInsertSecondLevelNodeText,\n      defaultInsertBelowSecondLevelNodeText\n    } = this.mindMap.opt;\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    const handleMultiNodes = list.length > 1;\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode,\n      inserting\n    } = this.getNewNodeBehavior(openEdit, handleMultiNodes);\n    const params = {\n      expand: true,\n      richText: isRichText,\n      resetRichText: isRichText,\n      isActive: focusNewNode\n    };\n    list.forEach(node => {\n      if (node.isGeneralization || node.isRoot) {\n        return;\n      }\n      const text = node.layerIndex === 1 ? defaultInsertSecondLevelNodeText : defaultInsertBelowSecondLevelNodeText;\n      const newNode = {\n        inserting,\n        data: {\n          text: text,\n          uid: createUid(),\n          ...params,\n          ...(appointData || {})\n        },\n        children: [node.nodeData]\n      };\n      node.setData({\n        resetRichText: true\n      });\n      const parent = node.parent;\n      // 获取当前节点所在位置\n      const index = getNodeDataIndex(node);\n      parent.nodeData.children.splice(index, 1, newNode);\n    });\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render();\n  }\n\n  //  上移节点，多个节点只会操作第一个节点\n  upNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    let node = this.activeNodeList[0];\n    if (node.isRoot) {\n      return;\n    }\n    let parent = node.parent;\n    let childList = parent.children;\n    let index = getNodeIndexInNodeList(node, childList);\n    if (index === -1 || index === 0) {\n      return;\n    }\n    let insertIndex = index - 1;\n    // 节点实例\n    childList.splice(index, 1);\n    childList.splice(insertIndex, 0, node);\n    // 节点数据\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n\n  //  下移节点，多个节点只会操作第一个节点\n  downNode() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    let node = this.activeNodeList[0];\n    if (node.isRoot) {\n      return;\n    }\n    let parent = node.parent;\n    let childList = parent.children;\n    let index = getNodeIndexInNodeList(node, childList);\n    if (index === -1 || index === childList.length - 1) {\n      return;\n    }\n    let insertIndex = index + 1;\n    // 节点实例\n    childList.splice(index, 1);\n    childList.splice(insertIndex, 0, node);\n    // 节点数据\n    parent.nodeData.children.splice(index, 1);\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData);\n    this.mindMap.render();\n  }\n\n  // 将节点上移一个层级，多个节点只会操作第一个节点\n  moveUpOneLevel(node) {\n    node = node || this.activeNodeList[0];\n    if (!node || node.isRoot || node.layerIndex <= 1) {\n      return;\n    }\n    const parent = node.parent;\n    const grandpa = parent.parent;\n    const index = getNodeIndexInNodeList(node, parent.children);\n    const parentIndex = getNodeIndexInNodeList(parent, grandpa.children);\n    // 节点数据\n    this.checkNodeLayerChange(node, parent);\n    parent.nodeData.children.splice(index, 1);\n    grandpa.nodeData.children.splice(parentIndex + 1, 0, node.nodeData);\n    this.mindMap.render();\n  }\n\n  // 移除节点数据的自定义样式的内部方法\n  _handleRemoveCustomStyles(nodeData) {\n    let hasCustomStyles = false;\n    Object.keys(nodeData).forEach(key => {\n      if (checkIsNodeStyleDataKey(key)) {\n        hasCustomStyles = true;\n        delete nodeData[key];\n      }\n    });\n    // 如果是富文本，那么还要处理富文本内容\n    if (hasCustomStyles && this.mindMap.richText) {\n      nodeData.resetRichText = true;\n      nodeData.text = removeRichTextStyes(nodeData.text);\n    }\n    return hasCustomStyles;\n  }\n\n  // 一键去除自定义样式\n  removeCustomStyles(node) {\n    node = node || this.activeNodeList[0];\n    if (!node) {\n      return;\n    }\n    const hasCustomStyles = this._handleRemoveCustomStyles(node.getData());\n    if (hasCustomStyles) {\n      this.reRenderNodeCheckChange(node);\n    }\n  }\n\n  // 一键去除所有节点自定义样式\n  removeAllNodeCustomStyles(appointNodes) {\n    appointNodes = formatDataToArray(appointNodes);\n    let hasCustomStyles = false;\n    // 指定了节点列表，那么遍历该节点列表\n    if (appointNodes.length > 0) {\n      appointNodes.forEach(node => {\n        const _hasCustomStyles = this._handleRemoveCustomStyles(node.getData());\n        if (_hasCustomStyles) hasCustomStyles = true;\n      });\n    } else {\n      // 否则遍历整棵树\n      if (!this.renderTree) return;\n      walk(this.renderTree, null, node => {\n        const _hasCustomStyles = this._handleRemoveCustomStyles(node.data);\n        if (_hasCustomStyles) hasCustomStyles = true;\n        // 不要忘记概要节点\n        const generalizationList = formatGetNodeGeneralization(node.data);\n        if (generalizationList.length > 0) {\n          generalizationList.forEach(generalizationData => {\n            const _hasCustomStyles = this._handleRemoveCustomStyles(generalizationData);\n            if (_hasCustomStyles) hasCustomStyles = true;\n          });\n        }\n      });\n    }\n    if (hasCustomStyles) {\n      this.mindMap.reRender();\n    }\n  }\n\n  // 复制节点\n  copy() {\n    this.beingCopyData = this.copyNode();\n    if (!this.beingCopyData) return;\n    setDataToClipboard(createSmmFormatData(this.beingCopyData));\n  }\n\n  // 剪切节点\n  cut() {\n    this.mindMap.execCommand('CUT_NODE', copyData => {\n      this.beingCopyData = copyData;\n      setDataToClipboard(createSmmFormatData(copyData));\n    });\n  }\n\n  // 粘贴\n  async paste() {\n    const {\n      errorHandler,\n      handleIsSplitByWrapOnPasteCreateNewNode,\n      handleNodePasteImg\n    } = this.mindMap.opt;\n    // 读取剪贴板的文字和图片\n    let text = null;\n    let img = null;\n    try {\n      const res = await getDataFromClipboard();\n      text = res.text;\n      img = res.img;\n    } catch (error) {\n      errorHandler(ERROR_TYPES.READ_CLIPBOARD_ERROR, error);\n    }\n    // 检查剪切板数据是否有变化\n    // 通过图片大小来判断图片是否发生变化，可能是不准确的，但是目前没有其他好方法\n    const imgSize = img ? img.size : 0;\n    if (this.beingPasteText !== text || this.beingPasteImgSize !== imgSize) {\n      this.currentBeingPasteType = CONSTANTS.PASTE_TYPE.CLIP_BOARD;\n      this.beingPasteText = text;\n      this.beingPasteImgSize = imgSize;\n    }\n    // 检查要粘贴的节点数据是否有变化，节点优先级高于剪切板\n    if (this.lastBeingCopyData !== this.beingCopyData) {\n      this.lastBeingCopyData = this.beingCopyData;\n      this.currentBeingPasteType = CONSTANTS.PASTE_TYPE.CANVAS;\n    }\n    // 粘贴剪切板的数据\n    if (this.currentBeingPasteType === CONSTANTS.PASTE_TYPE.CLIP_BOARD) {\n      // 存在文本，则创建子节点\n      if (text) {\n        // 判断粘贴的是否是simple-mind-map的数据\n        let smmData = null;\n        let useDefault = true;\n        // 用户自定义处理\n        if (this.mindMap.opt.customHandleClipboardText) {\n          try {\n            const res = await this.mindMap.opt.customHandleClipboardText(text);\n            if (!isUndef(res)) {\n              useDefault = false;\n              const checkRes = checkSmmFormatData(res);\n              if (checkRes.isSmm) {\n                smmData = checkRes.data;\n              } else {\n                text = checkRes.data;\n              }\n            }\n          } catch (error) {\n            errorHandler(ERROR_TYPES.CUSTOM_HANDLE_CLIPBOARD_TEXT_ERROR, error);\n          }\n        }\n        // 默认处理\n        if (useDefault) {\n          const checkRes = checkSmmFormatData(text);\n          if (checkRes.isSmm) {\n            smmData = checkRes.data;\n          } else {\n            text = checkRes.data;\n          }\n        }\n        if (smmData) {\n          this.mindMap.execCommand('INSERT_MULTI_CHILD_NODE', [], Array.isArray(smmData) ? smmData : [smmData]);\n        } else {\n          text = htmlEscape(text);\n          const textArr = text.split(new RegExp('\\r?\\n|(?<!\\n)\\r', 'g')).filter(item => {\n            return !!item;\n          });\n          // 判断是否需要根据换行自动分割节点\n          if (textArr.length > 1 && handleIsSplitByWrapOnPasteCreateNewNode) {\n            handleIsSplitByWrapOnPasteCreateNewNode().then(() => {\n              this.mindMap.execCommand('INSERT_MULTI_CHILD_NODE', [], textArr.map(item => {\n                return {\n                  data: {\n                    text: item\n                  },\n                  children: []\n                };\n              }));\n            }).catch(() => {\n              this.mindMap.execCommand('INSERT_CHILD_NODE', false, [], {\n                text\n              });\n            });\n          } else {\n            this.mindMap.execCommand('INSERT_CHILD_NODE', false, [], {\n              text\n            });\n          }\n        }\n      }\n      // 存在图片，则添加到当前激活节点\n      if (img) {\n        try {\n          let imgData = null;\n          // 自定义图片处理函数\n          if (handleNodePasteImg && typeof handleNodePasteImg === 'function') {\n            imgData = await handleNodePasteImg(img);\n          } else {\n            imgData = await loadImage(img);\n          }\n          if (this.activeNodeList.length > 0) {\n            this.activeNodeList.forEach(node => {\n              this.mindMap.execCommand('SET_NODE_IMAGE', node, {\n                url: imgData.url,\n                title: '',\n                width: imgData.size.width,\n                height: imgData.size.height\n              });\n            });\n          }\n        } catch (error) {\n          errorHandler(ERROR_TYPES.LOAD_CLIPBOARD_IMAGE_ERROR, error);\n        }\n      }\n    } else {\n      // 粘贴节点数据\n      if (this.beingCopyData) {\n        this.mindMap.execCommand('PASTE_NODE', this.beingCopyData);\n      }\n    }\n  }\n\n  //  将节点移动到另一个节点的前面\n  insertBefore(node, exist) {\n    this.insertTo(node, exist, 'before');\n  }\n\n  //  将节点移动到另一个节点的后面\n  insertAfter(node, exist) {\n    this.insertTo(node, exist, 'after');\n  }\n\n  // 将节点移动到另一个节点的前面或后面\n  insertTo(node, exist, dir = 'before') {\n    let nodeList = formatDataToArray(node);\n    nodeList = nodeList.filter(item => {\n      return !item.isRoot;\n    });\n    if (dir === 'after') {\n      nodeList.reverse();\n    }\n    nodeList.forEach(item => {\n      this.checkNodeLayerChange(item, exist);\n      // 移动节点\n      let nodeParent = item.parent;\n      let nodeBorthers = nodeParent.children;\n      let nodeIndex = getNodeIndexInNodeList(item, nodeBorthers);\n      if (nodeIndex === -1) {\n        return;\n      }\n      nodeBorthers.splice(nodeIndex, 1);\n      nodeParent.nodeData.children.splice(nodeIndex, 1);\n\n      // 目标节点\n      let existParent = exist.parent;\n      let existBorthers = existParent.children;\n      let existIndex = getNodeIndexInNodeList(exist, existBorthers);\n      if (existIndex === -1) {\n        return;\n      }\n      if (dir === 'after') {\n        existIndex++;\n      }\n      existBorthers.splice(existIndex, 0, item);\n      existParent.nodeData.children.splice(existIndex, 0, item.nodeData);\n    });\n    this.mindMap.render();\n  }\n\n  // 如果是富文本模式，那么某些层级变化需要更新样式\n  checkNodeLayerChange(node, toNode, toNodeIsParent = false) {\n    if (this.mindMap.richText) {\n      const toIndex = toNodeIsParent ? toNode.layerIndex + 1 : toNode.layerIndex;\n      let nodeLayerChanged = node.layerIndex === 1 && toIndex !== 1 || node.layerIndex !== 1 && toIndex === 1;\n      if (nodeLayerChanged) {\n        node.setData({\n          resetRichText: true\n        });\n      }\n    }\n  }\n\n  //  移除节点\n  removeNode(appointNodes = []) {\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    // 删除节点后需要激活的节点\n    let needActiveNode = null;\n    let isAppointNodes = appointNodes.length > 0;\n    let list = isAppointNodes ? appointNodes : this.activeNodeList;\n    let root = list.find(node => {\n      return node.isRoot;\n    });\n    if (root) {\n      this.clearActiveNodeList();\n      root.children = [];\n      root.nodeData.children = [];\n    } else {\n      // 如果只选中了一个节点，删除后激活其兄弟节点或者父节点\n      needActiveNode = this.getNextActiveNode(list);\n      for (let i = 0; i < list.length; i++) {\n        const node = list[i];\n        const currentEditNode = this.textEdit.getCurrentEditNode();\n        if (currentEditNode && currentEditNode.getData('uid') === node.getData('uid')) {\n          // 如果当前节点正在编辑中，那么先完成编辑\n          this.textEdit.hideEditTextBox();\n        }\n        if (isAppointNodes) list.splice(i, 1);\n        if (node.isGeneralization) {\n          this.deleteNodeGeneralization(node);\n          this.removeNodeFromActiveList(node);\n          i--;\n        } else {\n          this.removeNodeFromActiveList(node);\n          removeFromParentNodeData(node);\n          i--;\n        }\n      }\n    }\n    this.activeNodeList = [];\n    // 激活被删除节点的兄弟节点或父节点\n    if (needActiveNode) {\n      this.addNodeToActiveList(needActiveNode);\n    }\n    this.emitNodeActiveEvent();\n    this.mindMap.render();\n  }\n\n  // 删除概要节点，即从所属节点里删除该概要\n  deleteNodeGeneralization(node) {\n    const targetNode = node.generalizationBelongNode;\n    const index = targetNode.getGeneralizationNodeIndex(node);\n    let generalization = targetNode.getData('generalization');\n    if (Array.isArray(generalization)) {\n      generalization.splice(index, 1);\n    } else {\n      generalization = null;\n    }\n    // 删除概要节点\n    this.mindMap.execCommand('SET_NODE_DATA', targetNode, {\n      generalization\n    });\n    this.closeHighlightNode();\n  }\n\n  // 仅删除当前节点\n  removeCurrentNode(appointNodes = []) {\n    appointNodes = formatDataToArray(appointNodes);\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\n      return;\n    }\n    let isAppointNodes = appointNodes.length > 0;\n    let list = isAppointNodes ? appointNodes : this.activeNodeList;\n    list = list.filter(node => {\n      return !node.isRoot;\n    });\n    // 删除节点后需要激活的节点，如果只选中了一个节点，删除后激活其兄弟节点或者父节点\n    let needActiveNode = this.getNextActiveNode(list);\n    for (let i = 0; i < list.length; i++) {\n      let node = list[i];\n      if (node.isGeneralization) {\n        // 删除概要节点\n        this.deleteNodeGeneralization(node);\n      } else {\n        const parent = node.parent;\n        const index = getNodeDataIndex(node);\n        parent.nodeData.children.splice(index, 1, ...(node.nodeData.children || []));\n      }\n    }\n    this.activeNodeList = [];\n    // 激活被删除节点的兄弟节点或父节点\n    if (needActiveNode) {\n      this.addNodeToActiveList(needActiveNode);\n    }\n    this.emitNodeActiveEvent();\n    this.mindMap.render();\n  }\n\n  // 计算下一个可激活的节点\n  getNextActiveNode(deleteList) {\n    // 删除多个节点不自动激活相邻节点\n    if (deleteList.length !== 1) return null;\n    // 被删除的节点不在当前激活的节点列表里，不激活相邻节点\n    if (this.findActiveNodeIndex(deleteList[0]) === -1) return null;\n    let needActiveNode = null;\n    if (this.activeNodeList.length === 1 && !this.activeNodeList[0].isGeneralization && this.mindMap.opt.deleteNodeActive) {\n      const node = this.activeNodeList[0];\n      const broList = node.parent.children;\n      const nodeIndex = getNodeIndexInNodeList(node, broList);\n      // 如果后面有兄弟节点\n      if (nodeIndex < broList.length - 1) {\n        needActiveNode = broList[nodeIndex + 1];\n      } else {\n        // 如果前面有兄弟节点\n        if (nodeIndex > 0) {\n          needActiveNode = broList[nodeIndex - 1];\n        } else {\n          // 没有兄弟节点\n          needActiveNode = node.parent;\n        }\n      }\n    }\n    return needActiveNode;\n  }\n\n  //  复制节点\n  copyNode() {\n    if (this.activeNodeList.length <= 0) {\n      return null;\n    }\n    const nodeList = getTopAncestorsFomNodeList(this.activeNodeList);\n    return nodeList.map(node => {\n      return copyNodeTree({}, node, true);\n    });\n  }\n\n  //  剪切节点\n  cutNode(callback) {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    // 找出激活节点中的顶层节点列表，并过滤掉根节点\n    const nodeList = getTopAncestorsFomNodeList(this.activeNodeList).filter(node => {\n      return !node.isRoot;\n    });\n    // 复制数据\n    const copyData = nodeList.map(node => {\n      return copyNodeTree({}, node, true);\n    });\n    // 从父节点的数据中移除\n    nodeList.forEach(node => {\n      removeFromParentNodeData(node);\n    });\n    // 清空激活节点列表\n    this.clearActiveNodeList();\n    this.mindMap.render();\n    if (callback && typeof callback === 'function') {\n      callback(copyData);\n    }\n  }\n\n  //  移动节点作为另一个节点的子节点\n  moveNodeTo(node, toNode) {\n    let nodeList = formatDataToArray(node);\n    nodeList = nodeList.filter(item => {\n      return !item.isRoot;\n    });\n    nodeList.forEach(item => {\n      this.checkNodeLayerChange(item, toNode, true);\n      this.removeNodeFromActiveList(item);\n      removeFromParentNodeData(item);\n      toNode.nodeData.children.push(item.nodeData);\n    });\n    this.emitNodeActiveEvent();\n    this.mindMap.render();\n  }\n\n  //   粘贴节点到节点\n  pasteNode(data) {\n    data = formatDataToArray(data);\n    if (this.activeNodeList.length <= 0 || data.length <= 0) {\n      return;\n    }\n    this.activeNodeList.forEach(node => {\n      node.nodeData.children.push(...data.map(item => {\n        const newData = simpleDeepClone(item);\n        createUidForAppointNodes([newData], true);\n        return newData;\n      }));\n    });\n    this.mindMap.render();\n  }\n\n  //  设置节点样式\n  setNodeStyle(node, prop, value) {\n    let data = {\n      [prop]: value\n    };\n    // 如果开启了富文本，则需要应用到富文本上\n    if (this.mindMap.richText) {\n      this.mindMap.richText.setNotActiveNodeStyle(node, {\n        [prop]: value\n      });\n    }\n    this.setNodeDataRender(node, data);\n    // 更新了连线的样式\n    if (lineStyleProps.includes(prop)) {\n      ;\n      (node.parent || node).renderLine(true);\n    }\n  }\n\n  //  设置节点多个样式\n  setNodeStyles(node, style) {\n    let data = {\n      ...style\n    };\n    // 如果开启了富文本，则需要应用到富文本上\n    if (this.mindMap.richText) {\n      this.mindMap.richText.setNotActiveNodeStyle(node, style);\n    }\n    this.setNodeDataRender(node, data);\n    // 更新了连线的样式\n    let props = Object.keys(style);\n    let hasLineStyleProps = false;\n    props.forEach(key => {\n      if (lineStyleProps.includes(key)) {\n        hasLineStyleProps = true;\n      }\n    });\n    if (hasLineStyleProps) {\n      ;\n      (node.parent || node).renderLine(true);\n    }\n  }\n\n  //  设置节点是否激活\n  setNodeActive(node, active) {\n    this.mindMap.execCommand('SET_NODE_DATA', node, {\n      isActive: active\n    });\n    node.updateNodeByActive(active);\n  }\n\n  //  设置节点是否展开\n  setNodeExpand(node, expand) {\n    this.mindMap.execCommand('SET_NODE_DATA', node, {\n      expand\n    });\n    this.mindMap.render();\n  }\n\n  //  展开所有\n  expandAllNode() {\n    if (!this.renderTree) return;\n    walk(this.renderTree, null, node => {\n      if (!node.data.expand) {\n        node.data.expand = true;\n      }\n    }, null, true, 0, 0);\n    this.mindMap.render();\n  }\n\n  //  收起所有\n  unexpandAllNode(isSetRootNodeCenter = true) {\n    if (!this.renderTree) return;\n    walk(this.renderTree, null, (node, parent, isRoot) => {\n      if (!isRoot && node.children && node.children.length > 0) {\n        node.data.expand = false;\n      }\n    }, null, true, 0, 0);\n    this.mindMap.render(() => {\n      if (isSetRootNodeCenter) {\n        this.setRootNodeCenter();\n      }\n    });\n  }\n\n  //  展开到指定层级\n  expandToLevel(level) {\n    if (!this.renderTree) return;\n    walk(this.renderTree, null, (node, parent, isRoot, layerIndex) => {\n      const expand = layerIndex < level;\n      if (expand) {\n        node.data.expand = true;\n      } else if (!isRoot && node.children && node.children.length > 0) {\n        node.data.expand = false;\n      }\n    }, null, true, 0, 0);\n    this.mindMap.render();\n  }\n\n  //  切换激活节点的展开状态\n  toggleActiveExpand() {\n    this.activeNodeList.forEach(node => {\n      if (node.nodeData.children.length <= 0) {\n        return;\n      }\n      this.toggleNodeExpand(node);\n    });\n  }\n\n  //  切换节点展开状态\n  toggleNodeExpand(node) {\n    this.mindMap.execCommand('SET_NODE_EXPAND', node, !node.getData('expand'));\n  }\n\n  //  设置节点文本\n  setNodeText(node, text, richText, resetRichText) {\n    richText = richText === undefined ? node.getData('richText') : richText;\n    this.setNodeDataRender(node, {\n      text,\n      richText,\n      resetRichText\n    });\n  }\n\n  //  设置节点图片\n  setNodeImage(node, data) {\n    const {\n      url,\n      title,\n      width,\n      height,\n      custom = false\n    } = data || {\n      url: '',\n      title: '',\n      width: 0,\n      height: 0,\n      custom: false\n    };\n    this.setNodeDataRender(node, {\n      image: url,\n      imageTitle: title || '',\n      imageSize: {\n        width,\n        height,\n        custom\n      }\n    });\n  }\n\n  //  设置节点图标\n  setNodeIcon(node, icons) {\n    this.setNodeDataRender(node, {\n      icon: icons\n    });\n  }\n\n  //  设置节点超链接\n  setNodeHyperlink(node, link, title = '') {\n    this.setNodeDataRender(node, {\n      hyperlink: link,\n      hyperlinkTitle: title\n    });\n  }\n\n  //  设置节点备注\n  setNodeNote(node, note) {\n    this.setNodeDataRender(node, {\n      note\n    });\n  }\n\n  //  设置节点附件\n  setNodeAttachment(node, url, name = '') {\n    this.setNodeDataRender(node, {\n      attachmentUrl: url,\n      attachmentName: name\n    });\n  }\n\n  //  设置节点标签\n  setNodeTag(node, tag) {\n    this.setNodeDataRender(node, {\n      tag\n    });\n  }\n\n  // 设置节点公式\n  insertFormula(formula, appointNodes = []) {\n    // 只在富文本模式下可用，并且需要注册Formula插件\n    if (!this.mindMap.richText || !this.mindMap.formula) return;\n    appointNodes = formatDataToArray(appointNodes);\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList;\n    list.forEach(node => {\n      this.mindMap.formula.insertFormulaToNode(node, formula);\n    });\n  }\n\n  //  添加节点概要\n  addGeneralization(data, openEdit = true) {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    const nodeList = this.activeNodeList.filter(node => {\n      return !node.isRoot && !node.isGeneralization && !node.checkHasSelfGeneralization();\n    });\n    const list = parseAddGeneralizationNodeList(nodeList);\n    const isRichText = !!this.mindMap.richText;\n    const {\n      focusNewNode,\n      inserting\n    } = this.getNewNodeBehavior(openEdit, list.length > 1);\n    list.forEach(item => {\n      const newData = {\n        inserting,\n        ...(data || {\n          text: this.mindMap.opt.defaultGeneralizationText\n        }),\n        range: item.range || null,\n        uid: createUid(),\n        richText: isRichText,\n        resetRichText: isRichText,\n        isActive: focusNewNode\n      };\n      let generalization = item.node.getData('generalization');\n      if (generalization) {\n        if (Array.isArray(generalization)) {\n          generalization.push(newData);\n        } else {\n          generalization = [generalization, newData];\n        }\n      } else {\n        generalization = [newData];\n      }\n      this.mindMap.execCommand('SET_NODE_DATA', item.node, {\n        generalization\n      });\n      // 插入子节点时自动展开子节点\n      item.node.setData({\n        expand: true\n      });\n    });\n    // 需要清除原来激活的节点\n    if (focusNewNode) {\n      this.clearActiveNodeList();\n    }\n    this.mindMap.render(() => {\n      // 修复祖先节点存在概要时位置未更新的问题\n      // 修复同时给存在上下级关系的节点添加概要时重叠的问题\n      this.mindMap.render();\n    });\n  }\n\n  //  删除节点概要\n  removeGeneralization() {\n    if (this.activeNodeList.length <= 0) {\n      return;\n    }\n    this.activeNodeList.forEach(node => {\n      if (!node.checkHasGeneralization()) {\n        return;\n      }\n      this.mindMap.execCommand('SET_NODE_DATA', node, {\n        generalization: null\n      });\n    });\n    this.mindMap.render();\n    this.closeHighlightNode();\n  }\n\n  //  设置节点自定义位置\n  setNodeCustomPosition(node, left = undefined, top = undefined) {\n    let nodeList = [node] || this.activeNodeList;\n    nodeList.forEach(item => {\n      this.mindMap.execCommand('SET_NODE_DATA', item, {\n        customLeft: left,\n        customTop: top\n      });\n    });\n  }\n\n  //  一键整理布局，即去除自定义位置\n  resetLayout() {\n    walk(this.root, null, node => {\n      node.customLeft = undefined;\n      node.customTop = undefined;\n      this.mindMap.execCommand('SET_NODE_DATA', node, {\n        customLeft: undefined,\n        customTop: undefined\n      });\n      this.mindMap.render();\n    }, null, true, 0, 0);\n  }\n\n  //  设置节点形状\n  setNodeShape(node, shape) {\n    if (!shape || !shapeList.includes(shape)) {\n      return;\n    }\n    let nodeList = [node] || this.activeNodeList;\n    nodeList.forEach(item => {\n      this.setNodeStyle(item, 'shape', shape);\n    });\n  }\n\n  // 定位到指定节点\n  goTargetNode(node, callback = () => {}) {\n    let uid = typeof node === 'string' ? node : node.getData('uid');\n    if (!uid) return;\n    this.expandToNodeUid(uid, () => {\n      let targetNode = this.findNodeByUid(uid);\n      if (targetNode) {\n        targetNode.active();\n        this.moveNodeToCenter(targetNode);\n        callback(targetNode);\n      }\n    });\n  }\n\n  //  更新节点数据\n  setNodeData(node, data) {\n    Object.keys(data).forEach(key => {\n      node.nodeData.data[key] = data[key];\n    });\n  }\n\n  //  设置节点数据，并判断是否渲染\n  setNodeDataRender(node, data, notRender = false) {\n    this.mindMap.execCommand('SET_NODE_DATA', node, data);\n    this.reRenderNodeCheckChange(node, notRender);\n  }\n\n  // 重新节点某个节点，判断节点大小是否发生了改变，是的话触发重绘\n  reRenderNodeCheckChange(node, notRender) {\n    let changed = node.reRender();\n    if (changed) {\n      if (!notRender) this.mindMap.render();\n    } else {\n      this.mindMap.emit('node_tree_render_end');\n    }\n  }\n\n  //  移动节点到画布中心\n  moveNodeToCenter(node) {\n    const {\n      resetScaleOnMoveNodeToCenter\n    } = this.mindMap.opt;\n    let {\n      transform,\n      state\n    } = this.mindMap.view.getTransformData();\n    let {\n      left,\n      top,\n      width,\n      height\n    } = node;\n    if (!resetScaleOnMoveNodeToCenter) {\n      left *= transform.scaleX;\n      top *= transform.scaleY;\n      width *= transform.scaleX;\n      height *= transform.scaleY;\n    }\n    let halfWidth = this.mindMap.width / 2;\n    let halfHeight = this.mindMap.height / 2;\n    let nodeCenterX = left + width / 2;\n    let nodeCenterY = top + height / 2;\n    let targetX = halfWidth - state.x;\n    let targetY = halfHeight - state.y;\n    let offsetX = targetX - nodeCenterX;\n    let offsetY = targetY - nodeCenterY;\n    this.mindMap.view.translateX(offsetX);\n    this.mindMap.view.translateY(offsetY);\n    if (resetScaleOnMoveNodeToCenter) {\n      this.mindMap.view.setScale(1);\n    }\n  }\n\n  // 回到中心主题，即设置根节点到画布中心\n  setRootNodeCenter() {\n    this.moveNodeToCenter(this.root);\n  }\n\n  // 展开到指定uid的节点\n  expandToNodeUid(uid, callback = () => {}) {\n    if (!this.renderTree) {\n      callback();\n      return;\n    }\n    let parentsList = [];\n    let isGeneralization = false;\n    const cache = {};\n    bfsWalk(this.renderTree, (node, parent) => {\n      if (node.data.uid === uid) {\n        parentsList = parent ? [...cache[parent.data.uid], parent] : [];\n        return 'stop';\n      }\n      const generalizationList = formatGetNodeGeneralization(node.data);\n      generalizationList.forEach(item => {\n        if (item.uid === uid) {\n          parentsList = parent ? [...cache[parent.data.uid], parent] : [];\n          isGeneralization = true;\n        }\n      });\n      if (isGeneralization) {\n        return 'stop';\n      }\n      cache[node.data.uid] = parent ? [...cache[parent.data.uid], parent] : [];\n    });\n    let needRender = false;\n    parentsList.forEach(node => {\n      if (!node.data.expand) {\n        needRender = true;\n        node.data.expand = true;\n      }\n    });\n    // 如果是展开到概要节点，那么父节点下的所有节点都需要开\n    if (isGeneralization) {\n      const lastNode = parentsList[parentsList.length - 1];\n      if (lastNode) {\n        walk(lastNode, null, node => {\n          if (!node.data.expand) {\n            needRender = true;\n            node.data.expand = true;\n          }\n        });\n      }\n    }\n    if (needRender) {\n      this.mindMap.render(callback);\n    } else {\n      callback();\n    }\n  }\n\n  // 根据uid找到对应的节点实例\n  findNodeByUid(uid) {\n    let res = null;\n    walk(this.root, null, node => {\n      if (node.getData('uid') === uid) {\n        res = node;\n        return true;\n      }\n      // 概要节点\n      let isGeneralization = false;\n      (node._generalizationList || []).forEach(item => {\n        if (item.generalizationNode.getData('uid') === uid) {\n          res = item.generalizationNode;\n          isGeneralization = true;\n        }\n      });\n      if (isGeneralization) {\n        return true;\n      }\n    });\n    return res;\n  }\n\n  // 高亮节点或子节点\n  highlightNode(node, range) {\n    // 如果当前正在渲染，那么不进行高亮，因为节点位置可能不正确\n    if (this.isRendering) return;\n    const {\n      highlightNodeBoxStyle = {}\n    } = this.mindMap.opt;\n    if (!this.highlightBoxNode) {\n      this.highlightBoxNode = new Polygon().stroke({\n        color: highlightNodeBoxStyle.stroke || 'transparent'\n      }).fill({\n        color: highlightNodeBoxStyle.fill || 'transparent'\n      });\n    }\n    let minx = Infinity,\n      miny = Infinity,\n      maxx = -Infinity,\n      maxy = -Infinity;\n    if (range) {\n      const children = node.children.slice(range[0], range[1] + 1);\n      children.forEach(child => {\n        if (child.left < minx) {\n          minx = child.left;\n        }\n        if (child.top < miny) {\n          miny = child.top;\n        }\n        const right = child.left + child.width;\n        const bottom = child.top + child.height;\n        if (right > maxx) {\n          maxx = right;\n        }\n        if (bottom > maxy) {\n          maxy = bottom;\n        }\n      });\n    } else {\n      minx = node.left;\n      miny = node.top;\n      maxx = node.left + node.width;\n      maxy = node.top + node.height;\n    }\n    this.highlightBoxNode.plot([[minx, miny], [maxx, miny], [maxx, maxy], [minx, maxy]]);\n    this.mindMap.otherDraw.add(this.highlightBoxNode);\n  }\n\n  // 关闭高亮\n  closeHighlightNode() {\n    this.highlightBoxNode.remove();\n  }\n}\nexport default Render;","map":{"version":3,"names":["merge","LogicalStructure","MindMap","CatalogOrganization","OrganizationStructure","Timeline","VerticalTimeline","Fishbone","TextEdit","copyNodeTree","simpleDeepClone","walk","bfsWalk","loadImage","isUndef","getTopAncestorsFomNodeList","addDataToAppointNodes","createUidForAppointNodes","formatDataToArray","removeFromParentNodeData","createUid","getNodeDataIndex","getNodeIndexInNodeList","setDataToClipboard","getDataFromClipboard","htmlEscape","parseAddGeneralizationNodeList","checkNodeListIsEqual","createSmmFormatData","checkSmmFormatData","checkIsNodeStyleDataKey","removeRichTextStyes","formatGetNodeGeneralization","shapeList","lineStyleProps","CONSTANTS","ERROR_TYPES","Polygon","layouts","LAYOUT","LOGICAL_STRUCTURE","MIND_MAP","CATALOG_ORGANIZATION","ORGANIZATION_STRUCTURE","TIMELINE","TIMELINE2","VERTICAL_TIMELINE","FISHBONE","Render","constructor","opt","mindMap","themeConfig","renderTree","data","reRender","isRendering","hasWaitRendering","waitRenderingParams","nodeCache","lastNodeCache","renderSource","activeNodeList","root","textEdit","lastBeingCopyData","beingCopyData","beingPasteText","beingPasteImgSize","currentBeingPasteType","highlightBoxNode","lastActiveNode","lastActiveNodeList","setLayout","bindEvent","registerCommands","registerShortcutKeys","layout","setData","richText","handleSetData","on","e","clearActiveNodeListOnDrawClick","svg","enableDblclickBackToRootNode","setRootNodeCenter","selectAll","bind","command","add","back","forward","insertNode","insertMultiNode","insertChildNode","insertMultiChildNode","insertParentNode","upNode","downNode","moveUpOneLevel","insertAfter","insertBefore","moveNodeTo","removeNode","removeCurrentNode","pasteNode","cutNode","setNodeStyle","setNodeStyles","setNodeActive","clearActiveNode","setNodeExpand","expandAllNode","unexpandAllNode","expandToLevel","setNodeData","setNodeText","setNodeImage","setNodeIcon","setNodeHyperlink","setNodeNote","setNodeAttachment","setNodeTag","insertFormula","addGeneralization","removeGeneralization","setNodeCustomPosition","resetLayout","setNodeShape","goTargetNode","removeCustomStyles","removeAllNodeCustomStyles","keyCommand","addShortcut","execCommand","toggleActiveExpand","startTextEdit","endTextEdit","copy","cut","paste","emitNodeActiveEvent","node","isChange","batchExecution","push","emit","eventType","length","isTrueClick","useLeftKeySelectionRightKeyDrag","mousedownPos","event","Math","abs","clientX","x","clientY","y","save","restore","clearCache","lru","clear","render","callback","source","CHANGE_THEME","resetUnExpandNodeStyle","clearActiveNodeList","doLayout","Object","keys","forEach","uid","removeNodeFromActiveList","destroy","params","SET_DATA","includes","addHistory","expand","node2","resetRichText","item","addNodeToActiveList","notEmitBeforeNodeActiveEvent","onlyOneEnableActiveNodeOnCooperate","userList","index","findActiveNodeIndex","splice","readonly","getData","step","backForward","type","getNewNodeBehavior","openEdit","handleMultiNodes","createNewNodeBehavior","focusNewNode","inserting","CREATE_NEW_NODE_BEHAVIOR","DEFAULT","NOT_ACTIVE","ACTIVE_ONLY","appointNodes","appointData","appointChildren","hideEditTextBox","defaultInsertSecondLevelNodeText","defaultInsertBelowSecondLevelNodeText","list","isRichText","isActive","isGeneralization","isRoot","parent","isOneLayer","layerIndex","text","newNodeData","children","nodeData","nodeList","newNodeList","newNode","childList","insertIndex","grandpa","parentIndex","checkNodeLayerChange","_handleRemoveCustomStyles","hasCustomStyles","key","reRenderNodeCheckChange","_hasCustomStyles","generalizationList","generalizationData","copyNode","copyData","errorHandler","handleIsSplitByWrapOnPasteCreateNewNode","handleNodePasteImg","img","res","error","READ_CLIPBOARD_ERROR","imgSize","size","PASTE_TYPE","CLIP_BOARD","CANVAS","smmData","useDefault","customHandleClipboardText","checkRes","isSmm","CUSTOM_HANDLE_CLIPBOARD_TEXT_ERROR","Array","isArray","textArr","split","RegExp","filter","then","map","catch","imgData","url","title","width","height","LOAD_CLIPBOARD_IMAGE_ERROR","exist","insertTo","dir","reverse","nodeParent","nodeBorthers","nodeIndex","existParent","existBorthers","existIndex","toNode","toNodeIsParent","toIndex","nodeLayerChanged","needActiveNode","isAppointNodes","find","getNextActiveNode","i","currentEditNode","getCurrentEditNode","deleteNodeGeneralization","targetNode","generalizationBelongNode","getGeneralizationNodeIndex","generalization","closeHighlightNode","deleteList","deleteNodeActive","broList","newData","prop","value","setNotActiveNodeStyle","setNodeDataRender","renderLine","style","props","hasLineStyleProps","active","updateNodeByActive","isSetRootNodeCenter","level","toggleNodeExpand","undefined","custom","image","imageTitle","imageSize","icons","icon","link","hyperlink","hyperlinkTitle","note","name","attachmentUrl","attachmentName","tag","formula","insertFormulaToNode","checkHasSelfGeneralization","defaultGeneralizationText","range","checkHasGeneralization","left","top","customLeft","customTop","shape","expandToNodeUid","findNodeByUid","moveNodeToCenter","notRender","changed","resetScaleOnMoveNodeToCenter","transform","state","view","getTransformData","scaleX","scaleY","halfWidth","halfHeight","nodeCenterX","nodeCenterY","targetX","targetY","offsetX","offsetY","translateX","translateY","setScale","parentsList","cache","needRender","lastNode","_generalizationList","generalizationNode","highlightNode","highlightNodeBoxStyle","stroke","color","fill","minx","Infinity","miny","maxx","maxy","slice","child","right","bottom","plot","otherDraw","remove"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/Render.js"],"sourcesContent":["import merge from 'deepmerge'\r\nimport LogicalStructure from '../../layouts/LogicalStructure'\r\nimport MindMap from '../../layouts/MindMap'\r\nimport CatalogOrganization from '../../layouts/CatalogOrganization'\r\nimport OrganizationStructure from '../../layouts/OrganizationStructure'\r\nimport Timeline from '../../layouts/Timeline'\r\nimport VerticalTimeline from '../../layouts/VerticalTimeline'\r\nimport Fishbone from '../../layouts/Fishbone'\r\nimport TextEdit from './TextEdit'\r\nimport {\r\n  copyNodeTree,\r\n  simpleDeepClone,\r\n  walk,\r\n  bfsWalk,\r\n  loadImage,\r\n  isUndef,\r\n  getTopAncestorsFomNodeList,\r\n  addDataToAppointNodes,\r\n  createUidForAppointNodes,\r\n  formatDataToArray,\r\n  removeFromParentNodeData,\r\n  createUid,\r\n  getNodeDataIndex,\r\n  getNodeIndexInNodeList,\r\n  setDataToClipboard,\r\n  getDataFromClipboard,\r\n  htmlEscape,\r\n  parseAddGeneralizationNodeList,\r\n  checkNodeListIsEqual,\r\n  createSmmFormatData,\r\n  checkSmmFormatData,\r\n  checkIsNodeStyleDataKey,\r\n  removeRichTextStyes,\r\n  formatGetNodeGeneralization\r\n} from '../../utils'\r\nimport { shapeList } from './node/Shape'\r\nimport { lineStyleProps } from '../../themes/default'\r\nimport { CONSTANTS, ERROR_TYPES } from '../../constants/constant'\r\nimport { Polygon } from '@svgdotjs/svg.js'\r\n\r\n// 布局列表\r\nconst layouts = {\r\n  // 逻辑结构图\r\n  [CONSTANTS.LAYOUT.LOGICAL_STRUCTURE]: LogicalStructure,\r\n  // 思维导图\r\n  [CONSTANTS.LAYOUT.MIND_MAP]: MindMap,\r\n  // 目录组织图\r\n  [CONSTANTS.LAYOUT.CATALOG_ORGANIZATION]: CatalogOrganization,\r\n  // 组织结构图\r\n  [CONSTANTS.LAYOUT.ORGANIZATION_STRUCTURE]: OrganizationStructure,\r\n  // 时间轴\r\n  [CONSTANTS.LAYOUT.TIMELINE]: Timeline,\r\n  // 时间轴2\r\n  [CONSTANTS.LAYOUT.TIMELINE2]: Timeline,\r\n  // 竖向时间轴\r\n  [CONSTANTS.LAYOUT.VERTICAL_TIMELINE]: VerticalTimeline,\r\n  // 鱼骨图\r\n  [CONSTANTS.LAYOUT.FISHBONE]: Fishbone\r\n}\r\n\r\n//  渲染\r\nclass Render {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    this.opt = opt\r\n    this.mindMap = opt.mindMap\r\n    this.themeConfig = this.mindMap.themeConfig\r\n    // 渲染树，操作过程中修改的都是这里的数据\r\n    this.renderTree = this.mindMap.opt.data\r\n      ? merge({}, this.mindMap.opt.data)\r\n      : null\r\n    // 是否重新渲染\r\n    this.reRender = false\r\n    // 是否正在渲染中\r\n    this.isRendering = false\r\n    // 是否存在等待渲染\r\n    this.hasWaitRendering = false\r\n    this.waitRenderingParams = []\r\n    // 用于缓存节点\r\n    this.nodeCache = {}\r\n    this.lastNodeCache = {}\r\n    // 触发render的来源\r\n    this.renderSource = ''\r\n    // 当前激活的节点列表\r\n    this.activeNodeList = []\r\n    // 根节点\r\n    this.root = null\r\n    // 文本编辑框，需要再bindEvent之前实例化，否则单击事件只能触发隐藏文本编辑框，而无法保存文本修改\r\n    this.textEdit = new TextEdit(this)\r\n    // 当前复制的数据\r\n    this.lastBeingCopyData = null\r\n    this.beingCopyData = null\r\n    this.beingPasteText = ''\r\n    this.beingPasteImgSize = 0\r\n    this.currentBeingPasteType = ''\r\n    // 节点高亮框\r\n    this.highlightBoxNode = null\r\n    // 上一次节点激活数据\r\n    this.lastActiveNode = null\r\n    this.lastActiveNodeList = []\r\n    // 布局\r\n    this.setLayout()\r\n    // 绑定事件\r\n    this.bindEvent()\r\n    // 注册命令\r\n    this.registerCommands()\r\n    // 注册快捷键\r\n    this.registerShortcutKeys()\r\n  }\r\n\r\n  //  设置布局结构\r\n  setLayout() {\r\n    this.layout = new (\r\n      layouts[this.mindMap.opt.layout]\r\n        ? layouts[this.mindMap.opt.layout]\r\n        : layouts[CONSTANTS.LAYOUT.LOGICAL_STRUCTURE]\r\n    )(this, this.mindMap.opt.layout)\r\n  }\r\n\r\n  // 重新设置思维导图数据\r\n  setData(data) {\r\n    if (this.mindMap.richText) {\r\n      this.renderTree = data ? this.mindMap.richText.handleSetData(data) : null\r\n    } else {\r\n      this.renderTree = data\r\n    }\r\n  }\r\n\r\n  //   绑定事件\r\n  bindEvent() {\r\n    // 画布点击事件清除当前激活节点列表\r\n    this.mindMap.on('draw_click', e => {\r\n      this.clearActiveNodeListOnDrawClick(e, 'click')\r\n    })\r\n    // 画布右键事件事件清除当前激活节点列表\r\n    this.mindMap.on('contextmenu', e => {\r\n      this.clearActiveNodeListOnDrawClick(e, 'contextmenu')\r\n    })\r\n    // 鼠标双击回到根节点\r\n    this.mindMap.svg.on('dblclick', () => {\r\n      if (!this.mindMap.opt.enableDblclickBackToRootNode) return\r\n      this.setRootNodeCenter()\r\n    })\r\n    // let timer = null\r\n    // this.mindMap.on('view_data_change', () => {\r\n    //   clearTimeout(timer)\r\n    //   timer = setTimeout(() => {\r\n    //     this.render()\r\n    //   }, 300)\r\n    // })\r\n  }\r\n\r\n  //  注册命令\r\n  registerCommands() {\r\n    // 全选\r\n    this.selectAll = this.selectAll.bind(this)\r\n    this.mindMap.command.add('SELECT_ALL', this.selectAll)\r\n    // 回退\r\n    this.back = this.back.bind(this)\r\n    this.mindMap.command.add('BACK', this.back)\r\n    // 前进\r\n    this.forward = this.forward.bind(this)\r\n    this.mindMap.command.add('FORWARD', this.forward)\r\n    // 插入同级节点\r\n    this.insertNode = this.insertNode.bind(this)\r\n    this.mindMap.command.add('INSERT_NODE', this.insertNode)\r\n    // 插入多个同级节点\r\n    this.insertMultiNode = this.insertMultiNode.bind(this)\r\n    this.mindMap.command.add('INSERT_MULTI_NODE', this.insertMultiNode)\r\n    // 插入子节点\r\n    this.insertChildNode = this.insertChildNode.bind(this)\r\n    this.mindMap.command.add('INSERT_CHILD_NODE', this.insertChildNode)\r\n    // 插入多个子节点\r\n    this.insertMultiChildNode = this.insertMultiChildNode.bind(this)\r\n    this.mindMap.command.add(\r\n      'INSERT_MULTI_CHILD_NODE',\r\n      this.insertMultiChildNode\r\n    )\r\n    // 插入父节点\r\n    this.insertParentNode = this.insertParentNode.bind(this)\r\n    this.mindMap.command.add('INSERT_PARENT_NODE', this.insertParentNode)\r\n    // 上移节点\r\n    this.upNode = this.upNode.bind(this)\r\n    this.mindMap.command.add('UP_NODE', this.upNode)\r\n    // 下移节点\r\n    this.downNode = this.downNode.bind(this)\r\n    this.mindMap.command.add('DOWN_NODE', this.downNode)\r\n    //  将一个节点上移一个层级\r\n    this.moveUpOneLevel = this.moveUpOneLevel.bind(this)\r\n    this.mindMap.command.add('MOVE_UP_ONE_LEVEL', this.moveUpOneLevel)\r\n    // 移动节点\r\n    this.insertAfter = this.insertAfter.bind(this)\r\n    this.mindMap.command.add('INSERT_AFTER', this.insertAfter)\r\n    this.insertBefore = this.insertBefore.bind(this)\r\n    this.mindMap.command.add('INSERT_BEFORE', this.insertBefore)\r\n    this.moveNodeTo = this.moveNodeTo.bind(this)\r\n    this.mindMap.command.add('MOVE_NODE_TO', this.moveNodeTo)\r\n    // 删除节点\r\n    this.removeNode = this.removeNode.bind(this)\r\n    this.mindMap.command.add('REMOVE_NODE', this.removeNode)\r\n    // 仅删除当前节点\r\n    this.removeCurrentNode = this.removeCurrentNode.bind(this)\r\n    this.mindMap.command.add('REMOVE_CURRENT_NODE', this.removeCurrentNode)\r\n    // 粘贴节点\r\n    this.pasteNode = this.pasteNode.bind(this)\r\n    this.mindMap.command.add('PASTE_NODE', this.pasteNode)\r\n    // 剪切节点\r\n    this.cutNode = this.cutNode.bind(this)\r\n    this.mindMap.command.add('CUT_NODE', this.cutNode)\r\n    // 修改节点单个样式\r\n    this.setNodeStyle = this.setNodeStyle.bind(this)\r\n    this.mindMap.command.add('SET_NODE_STYLE', this.setNodeStyle)\r\n    // 修改节点多个样式\r\n    this.setNodeStyles = this.setNodeStyles.bind(this)\r\n    this.mindMap.command.add('SET_NODE_STYLES', this.setNodeStyles)\r\n    // 切换节点是否激活\r\n    this.setNodeActive = this.setNodeActive.bind(this)\r\n    this.mindMap.command.add('SET_NODE_ACTIVE', this.setNodeActive)\r\n    // 清除所有激活节点\r\n    this.clearActiveNode = this.clearActiveNode.bind(this)\r\n    this.mindMap.command.add('CLEAR_ACTIVE_NODE', this.clearActiveNode)\r\n    // 切换节点是否展开\r\n    this.setNodeExpand = this.setNodeExpand.bind(this)\r\n    this.mindMap.command.add('SET_NODE_EXPAND', this.setNodeExpand)\r\n    // 展开所有节点\r\n    this.expandAllNode = this.expandAllNode.bind(this)\r\n    this.mindMap.command.add('EXPAND_ALL', this.expandAllNode)\r\n    // 收起所有节点\r\n    this.unexpandAllNode = this.unexpandAllNode.bind(this)\r\n    this.mindMap.command.add('UNEXPAND_ALL', this.unexpandAllNode)\r\n    // 展开到指定层级\r\n    this.expandToLevel = this.expandToLevel.bind(this)\r\n    this.mindMap.command.add('UNEXPAND_TO_LEVEL', this.expandToLevel)\r\n    // 设置节点数据\r\n    this.setNodeData = this.setNodeData.bind(this)\r\n    this.mindMap.command.add('SET_NODE_DATA', this.setNodeData)\r\n    // 设置节点文本\r\n    this.setNodeText = this.setNodeText.bind(this)\r\n    this.mindMap.command.add('SET_NODE_TEXT', this.setNodeText)\r\n    // 设置节点图片\r\n    this.setNodeImage = this.setNodeImage.bind(this)\r\n    this.mindMap.command.add('SET_NODE_IMAGE', this.setNodeImage)\r\n    // 设置节点图标\r\n    this.setNodeIcon = this.setNodeIcon.bind(this)\r\n    this.mindMap.command.add('SET_NODE_ICON', this.setNodeIcon)\r\n    // 设置节点超链接\r\n    this.setNodeHyperlink = this.setNodeHyperlink.bind(this)\r\n    this.mindMap.command.add('SET_NODE_HYPERLINK', this.setNodeHyperlink)\r\n    // 设置节点备注\r\n    this.setNodeNote = this.setNodeNote.bind(this)\r\n    this.mindMap.command.add('SET_NODE_NOTE', this.setNodeNote)\r\n    // 设置节点附件\r\n    this.setNodeAttachment = this.setNodeAttachment.bind(this)\r\n    this.mindMap.command.add('SET_NODE_ATTACHMENT', this.setNodeAttachment)\r\n    // 设置节点标签\r\n    this.setNodeTag = this.setNodeTag.bind(this)\r\n    this.mindMap.command.add('SET_NODE_TAG', this.setNodeTag)\r\n    // 设置节点公式\r\n    this.insertFormula = this.insertFormula.bind(this)\r\n    this.mindMap.command.add('INSERT_FORMULA', this.insertFormula)\r\n    // 添加节点概要\r\n    this.addGeneralization = this.addGeneralization.bind(this)\r\n    this.mindMap.command.add('ADD_GENERALIZATION', this.addGeneralization)\r\n    // 删除节点概要\r\n    this.removeGeneralization = this.removeGeneralization.bind(this)\r\n    this.mindMap.command.add('REMOVE_GENERALIZATION', this.removeGeneralization)\r\n    // 设置节点自定义位置\r\n    this.setNodeCustomPosition = this.setNodeCustomPosition.bind(this)\r\n    this.mindMap.command.add(\r\n      'SET_NODE_CUSTOM_POSITION',\r\n      this.setNodeCustomPosition\r\n    )\r\n    // 一键整理布局\r\n    this.resetLayout = this.resetLayout.bind(this)\r\n    this.mindMap.command.add('RESET_LAYOUT', this.resetLayout)\r\n    // 设置节点形状\r\n    this.setNodeShape = this.setNodeShape.bind(this)\r\n    this.mindMap.command.add('SET_NODE_SHAPE', this.setNodeShape)\r\n    // 定位节点\r\n    this.goTargetNode = this.goTargetNode.bind(this)\r\n    this.mindMap.command.add('GO_TARGET_NODE', this.goTargetNode)\r\n    // 一键去除节点自定义样式\r\n    this.removeCustomStyles = this.removeCustomStyles.bind(this)\r\n    this.mindMap.command.add('REMOVE_CUSTOM_STYLES', this.removeCustomStyles)\r\n    // 一键去除所有节点自定义样式\r\n    this.removeAllNodeCustomStyles = this.removeAllNodeCustomStyles.bind(this)\r\n    this.mindMap.command.add(\r\n      'REMOVE_ALL_NODE_CUSTOM_STYLES',\r\n      this.removeAllNodeCustomStyles\r\n    )\r\n  }\r\n\r\n  //  注册快捷键\r\n  registerShortcutKeys() {\r\n    // 插入下级节点\r\n    this.mindMap.keyCommand.addShortcut('Tab', () => {\r\n      this.mindMap.execCommand('INSERT_CHILD_NODE')\r\n    })\r\n    // 插入下级节点\r\n    this.mindMap.keyCommand.addShortcut('Insert', () => {\r\n      this.mindMap.execCommand('INSERT_CHILD_NODE')\r\n    })\r\n    // 插入同级节点\r\n    this.mindMap.keyCommand.addShortcut('Enter', () => {\r\n      this.mindMap.execCommand('INSERT_NODE')\r\n    })\r\n    // 插入父节点\r\n    this.mindMap.keyCommand.addShortcut('Shift+Tab', () => {\r\n      this.mindMap.execCommand('INSERT_PARENT_NODE')\r\n    })\r\n    // 插入概要\r\n    this.mindMap.keyCommand.addShortcut('Control+g', () => {\r\n      this.mindMap.execCommand('ADD_GENERALIZATION')\r\n    })\r\n    // 展开/收起节点\r\n    this.toggleActiveExpand = this.toggleActiveExpand.bind(this)\r\n    this.mindMap.keyCommand.addShortcut('/', this.toggleActiveExpand)\r\n    // 删除节点\r\n    this.mindMap.keyCommand.addShortcut('Del|Backspace', () => {\r\n      this.mindMap.execCommand('REMOVE_NODE')\r\n    })\r\n    // 仅删除当前节点\r\n    this.mindMap.keyCommand.addShortcut('Shift+Backspace', () => {\r\n      this.mindMap.execCommand('REMOVE_CURRENT_NODE')\r\n    })\r\n    // 节点编辑时某些快捷键会存在冲突，需要暂时去除\r\n    this.mindMap.on('before_show_text_edit', () => {\r\n      this.startTextEdit()\r\n    })\r\n    this.mindMap.on('hide_text_edit', () => {\r\n      this.endTextEdit()\r\n    })\r\n    // 全选\r\n    this.mindMap.keyCommand.addShortcut('Control+a', () => {\r\n      this.mindMap.execCommand('SELECT_ALL')\r\n    })\r\n    // 一键整理布局\r\n    this.mindMap.keyCommand.addShortcut('Control+l', () => {\r\n      this.mindMap.execCommand('RESET_LAYOUT')\r\n    })\r\n    // 上移节点\r\n    this.mindMap.keyCommand.addShortcut('Control+Up', () => {\r\n      this.mindMap.execCommand('UP_NODE')\r\n    })\r\n    // 下移节点\r\n    this.mindMap.keyCommand.addShortcut('Control+Down', () => {\r\n      this.mindMap.execCommand('DOWN_NODE')\r\n    })\r\n    // 复制节点、\r\n    this.mindMap.keyCommand.addShortcut('Control+c', () => {\r\n      this.copy()\r\n    })\r\n    // 剪切节点\r\n    this.mindMap.keyCommand.addShortcut('Control+x', () => {\r\n      this.cut()\r\n    })\r\n    // 粘贴节点\r\n    this.mindMap.keyCommand.addShortcut('Control+v', () => {\r\n      this.paste()\r\n    })\r\n    // 根节点居中显示\r\n    this.mindMap.keyCommand.addShortcut('Control+Enter', () => {\r\n      this.setRootNodeCenter()\r\n    })\r\n  }\r\n\r\n  // 派发节点激活事件\r\n  emitNodeActiveEvent(node = null, activeNodeList = [...this.activeNodeList]) {\r\n    let isChange = false\r\n    isChange = this.lastActiveNode !== node\r\n    if (!isChange) {\r\n      isChange = !checkNodeListIsEqual(this.lastActiveNodeList, activeNodeList)\r\n    }\r\n    if (!isChange) return\r\n    this.lastActiveNode = node\r\n    this.lastActiveNodeList = [...activeNodeList]\r\n    this.mindMap.batchExecution.push('emitNodeActiveEvent', () => {\r\n      this.mindMap.emit('node_active', node, activeNodeList)\r\n    })\r\n  }\r\n\r\n  // 鼠标点击画布时清空当前激活节点列表\r\n  clearActiveNodeListOnDrawClick(e, eventType) {\r\n    if (this.activeNodeList.length <= 0) return\r\n    // 清除激活状态\r\n    let isTrueClick = true\r\n    // 是否是左键多选节点，右键拖动画布\r\n    const { useLeftKeySelectionRightKeyDrag } = this.mindMap.opt\r\n    // 如果鼠标按下和松开的距离较大，则不认为是点击事件\r\n    if (\r\n      eventType === 'contextmenu'\r\n        ? !useLeftKeySelectionRightKeyDrag\r\n        : useLeftKeySelectionRightKeyDrag\r\n    ) {\r\n      const mousedownPos = this.mindMap.event.mousedownPos\r\n      isTrueClick =\r\n        Math.abs(e.clientX - mousedownPos.x) <= 5 &&\r\n        Math.abs(e.clientY - mousedownPos.y) <= 5\r\n    }\r\n    if (isTrueClick) {\r\n      this.mindMap.execCommand('CLEAR_ACTIVE_NODE')\r\n    }\r\n  }\r\n\r\n  //  开启文字编辑，会禁用回车键和删除键相关快捷键防止冲突\r\n  startTextEdit() {\r\n    this.mindMap.keyCommand.save()\r\n  }\r\n\r\n  //  结束文字编辑，会恢复回车键和删除键相关快捷键\r\n  endTextEdit() {\r\n    this.mindMap.keyCommand.restore()\r\n  }\r\n\r\n  // 清空节点缓存池\r\n  clearCache() {\r\n    this.layout.lru.clear()\r\n    this.nodeCache = {}\r\n    this.lastNodeCache = {}\r\n  }\r\n\r\n  //   渲染\r\n  render(callback = () => {}, source) {\r\n    // 切换主题时，被收起的节点需要添加样式复位的标注\r\n    if (source === CONSTANTS.CHANGE_THEME) {\r\n      this.resetUnExpandNodeStyle()\r\n    }\r\n    // 如果当前还没有渲染完毕，不再触发渲染\r\n    if (this.isRendering) {\r\n      // 等待当前渲染完毕后再进行一次渲染\r\n      this.hasWaitRendering = true\r\n      this.waitRenderingParams = [callback, source]\r\n      return\r\n    }\r\n    this.isRendering = true\r\n    // 触发当前重新渲染的来源\r\n    this.renderSource = source\r\n    // 节点缓存\r\n    this.lastNodeCache = this.nodeCache\r\n    this.nodeCache = {}\r\n    // 重新渲染需要清除激活状态\r\n    if (this.reRender) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    // 如果没有节点数据\r\n    if (!this.renderTree) {\r\n      this.isRendering = false\r\n      this.mindMap.emit('node_tree_render_end')\r\n      return\r\n    }\r\n    // 计算布局\r\n    this.layout.doLayout(root => {\r\n      // 删除本次渲染时不再需要的节点\r\n      Object.keys(this.lastNodeCache).forEach(uid => {\r\n        if (!this.nodeCache[uid]) {\r\n          // 从激活节点列表里删除\r\n          this.removeNodeFromActiveList(this.lastNodeCache[uid])\r\n          this.emitNodeActiveEvent()\r\n          // 调用节点的销毁方法\r\n          this.lastNodeCache[uid].destroy()\r\n        }\r\n      })\r\n      // 更新根节点\r\n      this.root = root\r\n      // 渲染节点\r\n      this.root.render(() => {\r\n        this.isRendering = false\r\n        this.mindMap.emit('node_tree_render_end')\r\n        callback && callback()\r\n        if (this.hasWaitRendering) {\r\n          const params = this.waitRenderingParams\r\n          this.hasWaitRendering = false\r\n          this.waitRenderingParams = []\r\n          this.render(...params)\r\n        } else {\r\n          this.renderSource = ''\r\n          if (this.reRender) {\r\n            this.reRender = false\r\n          }\r\n          // 触发一次保存，因为修改了渲染树的数据\r\n          if (\r\n            this.mindMap.richText &&\r\n            [CONSTANTS.CHANGE_THEME, CONSTANTS.SET_DATA].includes(source)\r\n          ) {\r\n            this.mindMap.command.addHistory()\r\n          }\r\n        }\r\n      })\r\n    })\r\n    this.emitNodeActiveEvent()\r\n  }\r\n\r\n  // 给当前被收起来的节点数据添加文本复位标志\r\n  resetUnExpandNodeStyle() {\r\n    if (!this.renderTree) return\r\n    walk(this.renderTree, null, node => {\r\n      if (!node.data.expand) {\r\n        walk(node, null, node2 => {\r\n          node2.data.resetRichText = true\r\n        })\r\n        return true\r\n      }\r\n    })\r\n  }\r\n\r\n  //  清除当前所有激活节点，并会触发事件\r\n  clearActiveNode() {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    this.clearActiveNodeList()\r\n    this.emitNodeActiveEvent(null, [])\r\n  }\r\n\r\n  //  清除当前激活的节点列表\r\n  clearActiveNodeList() {\r\n    this.activeNodeList.forEach(item => {\r\n      this.mindMap.execCommand('SET_NODE_ACTIVE', item, false)\r\n    })\r\n    this.activeNodeList = []\r\n  }\r\n\r\n  // 添加节点到激活列表里\r\n  addNodeToActiveList(node, notEmitBeforeNodeActiveEvent = false) {\r\n    if (\r\n      this.mindMap.opt.onlyOneEnableActiveNodeOnCooperate &&\r\n      node.userList.length > 0\r\n    )\r\n      return\r\n    const index = this.findActiveNodeIndex(node)\r\n    if (index === -1) {\r\n      if (!notEmitBeforeNodeActiveEvent) {\r\n        this.mindMap.emit('before_node_active', node, this.activeNodeList)\r\n      }\r\n      this.mindMap.execCommand('SET_NODE_ACTIVE', node, true)\r\n      this.activeNodeList.push(node)\r\n    }\r\n  }\r\n\r\n  // 在激活列表里移除某个节点\r\n  removeNodeFromActiveList(node) {\r\n    let index = this.findActiveNodeIndex(node)\r\n    if (index === -1) {\r\n      return\r\n    }\r\n    this.mindMap.execCommand('SET_NODE_ACTIVE', node, false)\r\n    this.activeNodeList.splice(index, 1)\r\n  }\r\n\r\n  //  检索某个节点在激活列表里的索引\r\n  findActiveNodeIndex(node) {\r\n    return getNodeIndexInNodeList(node, this.activeNodeList)\r\n  }\r\n\r\n  //  全选\r\n  selectAll() {\r\n    if (this.mindMap.opt.readonly) return\r\n    walk(\r\n      this.root,\r\n      null,\r\n      node => {\r\n        if (!node.getData('isActive')) {\r\n          this.addNodeToActiveList(node)\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0,\r\n      0\r\n    )\r\n    this.emitNodeActiveEvent()\r\n  }\r\n\r\n  //  回退\r\n  back(step) {\r\n    this.backForward('back', step)\r\n  }\r\n\r\n  //  前进\r\n  forward(step) {\r\n    this.backForward('forward', step)\r\n  }\r\n\r\n  // 前进回退\r\n  backForward(type, step) {\r\n    this.mindMap.execCommand('CLEAR_ACTIVE_NODE')\r\n    const data = this.mindMap.command[type](step)\r\n    if (data) {\r\n      this.renderTree = data\r\n      this.mindMap.render()\r\n    }\r\n  }\r\n\r\n  // 获取创建新节点的行为\r\n  getNewNodeBehavior(openEdit = false, handleMultiNodes = false) {\r\n    const { createNewNodeBehavior } = this.mindMap.opt\r\n    let focusNewNode = false // 是否激活新节点\r\n    let inserting = false // 新节点是否进入编辑模式\r\n    switch (createNewNodeBehavior) {\r\n      // 默认会激活新创建的节点，并且进入编辑模式。如果同时创建了多个新节点，那么只会激活而不会进入编辑模式\r\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.DEFAULT:\r\n        focusNewNode = handleMultiNodes || !openEdit\r\n        inserting = handleMultiNodes ? false : openEdit // 如果同时对多个节点插入子节点，那么无需进入编辑模式\r\n        break\r\n      // 不激活新创建的节点\r\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.NOT_ACTIVE:\r\n        focusNewNode = false\r\n        inserting = false\r\n        break\r\n      // 只激活新创建的节点，不进入编辑模式\r\n      case CONSTANTS.CREATE_NEW_NODE_BEHAVIOR.ACTIVE_ONLY:\r\n        focusNewNode = true\r\n        inserting = false\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    return {\r\n      focusNewNode,\r\n      inserting\r\n    }\r\n  }\r\n\r\n  //  插入同级节点\r\n  insertNode(\r\n    openEdit = true,\r\n    appointNodes = [],\r\n    appointData = null,\r\n    appointChildren = []\r\n  ) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    this.textEdit.hideEditTextBox()\r\n    const {\r\n      defaultInsertSecondLevelNodeText,\r\n      defaultInsertBelowSecondLevelNodeText\r\n    } = this.mindMap.opt\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    const handleMultiNodes = list.length > 1\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode, inserting } = this.getNewNodeBehavior(\r\n      openEdit,\r\n      handleMultiNodes\r\n    )\r\n    const params = {\r\n      expand: true,\r\n      richText: isRichText,\r\n      resetRichText: isRichText,\r\n      isActive: focusNewNode // 如果同时对多个节点插入子节点，那么需要把新增的节点设为激活状态。如果不进入编辑状态，那么也需要手动设为激活状态\r\n    }\r\n    // 动态指定的子节点数据也需要添加相关属性\r\n    appointChildren = addDataToAppointNodes(appointChildren, {\r\n      ...params\r\n    })\r\n    list.forEach(node => {\r\n      if (node.isGeneralization || node.isRoot) {\r\n        return\r\n      }\r\n      const parent = node.parent\r\n      const isOneLayer = node.layerIndex === 1\r\n      // 新插入节点的默认文本\r\n      const text = isOneLayer\r\n        ? defaultInsertSecondLevelNodeText\r\n        : defaultInsertBelowSecondLevelNodeText\r\n      // 计算插入位置\r\n      const index = getNodeDataIndex(node)\r\n      const newNodeData = {\r\n        inserting,\r\n        data: {\r\n          text: text,\r\n          ...params,\r\n          uid: createUid(),\r\n          ...(appointData || {})\r\n        },\r\n        children: [...createUidForAppointNodes(appointChildren)]\r\n      }\r\n      parent.nodeData.children.splice(index + 1, 0, newNodeData)\r\n    })\r\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 插入多个同级节点\r\n  insertMultiNode(appointNodes, nodeList) {\r\n    if (!nodeList || nodeList.length <= 0) return\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    this.textEdit.hideEditTextBox()\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode } = this.getNewNodeBehavior(false, true)\r\n    const params = {\r\n      expand: true,\r\n      richText: isRichText,\r\n      resetRichText: isRichText,\r\n      isActive: focusNewNode\r\n    }\r\n    nodeList = addDataToAppointNodes(nodeList, params)\r\n    list.forEach(node => {\r\n      if (node.isGeneralization || node.isRoot) {\r\n        return\r\n      }\r\n      const parent = node.parent\r\n      // 计算插入位置\r\n      const index = getNodeDataIndex(node)\r\n      const newNodeList = createUidForAppointNodes(simpleDeepClone(nodeList))\r\n      parent.nodeData.children.splice(index + 1, 0, ...newNodeList)\r\n    })\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  插入子节点\r\n  insertChildNode(\r\n    openEdit = true,\r\n    appointNodes = [],\r\n    appointData = null,\r\n    appointChildren = []\r\n  ) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    this.textEdit.hideEditTextBox()\r\n    const {\r\n      defaultInsertSecondLevelNodeText,\r\n      defaultInsertBelowSecondLevelNodeText\r\n    } = this.mindMap.opt\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    const handleMultiNodes = list.length > 1\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode, inserting } = this.getNewNodeBehavior(\r\n      openEdit,\r\n      handleMultiNodes\r\n    )\r\n    const params = {\r\n      expand: true,\r\n      richText: isRichText,\r\n      resetRichText: isRichText,\r\n      isActive: focusNewNode\r\n    }\r\n    // 动态指定的子节点数据也需要添加相关属性\r\n    appointChildren = addDataToAppointNodes(appointChildren, {\r\n      ...params\r\n    })\r\n    list.forEach(node => {\r\n      if (node.isGeneralization) {\r\n        return\r\n      }\r\n      if (!node.nodeData.children) {\r\n        node.nodeData.children = []\r\n      }\r\n      const text = node.isRoot\r\n        ? defaultInsertSecondLevelNodeText\r\n        : defaultInsertBelowSecondLevelNodeText\r\n      const newNode = {\r\n        inserting,\r\n        data: {\r\n          text: text,\r\n          uid: createUid(),\r\n          ...params,\r\n          ...(appointData || {})\r\n        },\r\n        children: [...createUidForAppointNodes(appointChildren)]\r\n      }\r\n      node.nodeData.children.push(newNode)\r\n      // 插入子节点时自动展开子节点\r\n      node.setData({\r\n        expand: true\r\n      })\r\n    })\r\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 插入多个子节点\r\n  insertMultiChildNode(appointNodes, childList) {\r\n    if (!childList || childList.length <= 0) return\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    this.textEdit.hideEditTextBox()\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode } = this.getNewNodeBehavior(false, true)\r\n    const params = {\r\n      expand: true,\r\n      richText: isRichText,\r\n      resetRichText: isRichText,\r\n      isActive: focusNewNode\r\n    }\r\n    childList = addDataToAppointNodes(childList, params)\r\n    list.forEach(node => {\r\n      if (node.isGeneralization) {\r\n        return\r\n      }\r\n      if (!node.nodeData.children) {\r\n        node.nodeData.children = []\r\n      }\r\n      childList = createUidForAppointNodes(childList)\r\n      node.nodeData.children.push(...childList)\r\n      // 插入子节点时自动展开子节点\r\n      node.setData({\r\n        expand: true\r\n      })\r\n    })\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 插入父节点\r\n  insertParentNode(openEdit = true, appointNodes, appointData) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    this.textEdit.hideEditTextBox()\r\n    const {\r\n      defaultInsertSecondLevelNodeText,\r\n      defaultInsertBelowSecondLevelNodeText\r\n    } = this.mindMap.opt\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    const handleMultiNodes = list.length > 1\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode, inserting } = this.getNewNodeBehavior(\r\n      openEdit,\r\n      handleMultiNodes\r\n    )\r\n    const params = {\r\n      expand: true,\r\n      richText: isRichText,\r\n      resetRichText: isRichText,\r\n      isActive: focusNewNode\r\n    }\r\n    list.forEach(node => {\r\n      if (node.isGeneralization || node.isRoot) {\r\n        return\r\n      }\r\n      const text =\r\n        node.layerIndex === 1\r\n          ? defaultInsertSecondLevelNodeText\r\n          : defaultInsertBelowSecondLevelNodeText\r\n      const newNode = {\r\n        inserting,\r\n        data: {\r\n          text: text,\r\n          uid: createUid(),\r\n          ...params,\r\n          ...(appointData || {})\r\n        },\r\n        children: [node.nodeData]\r\n      }\r\n      node.setData({\r\n        resetRichText: true\r\n      })\r\n      const parent = node.parent\r\n      // 获取当前节点所在位置\r\n      const index = getNodeDataIndex(node)\r\n      parent.nodeData.children.splice(index, 1, newNode)\r\n    })\r\n    // 如果同时对多个节点插入子节点，需要清除原来激活的节点\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  上移节点，多个节点只会操作第一个节点\r\n  upNode() {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    let node = this.activeNodeList[0]\r\n    if (node.isRoot) {\r\n      return\r\n    }\r\n    let parent = node.parent\r\n    let childList = parent.children\r\n    let index = getNodeIndexInNodeList(node, childList)\r\n    if (index === -1 || index === 0) {\r\n      return\r\n    }\r\n    let insertIndex = index - 1\r\n    // 节点实例\r\n    childList.splice(index, 1)\r\n    childList.splice(insertIndex, 0, node)\r\n    // 节点数据\r\n    parent.nodeData.children.splice(index, 1)\r\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData)\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  下移节点，多个节点只会操作第一个节点\r\n  downNode() {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    let node = this.activeNodeList[0]\r\n    if (node.isRoot) {\r\n      return\r\n    }\r\n    let parent = node.parent\r\n    let childList = parent.children\r\n    let index = getNodeIndexInNodeList(node, childList)\r\n    if (index === -1 || index === childList.length - 1) {\r\n      return\r\n    }\r\n    let insertIndex = index + 1\r\n    // 节点实例\r\n    childList.splice(index, 1)\r\n    childList.splice(insertIndex, 0, node)\r\n    // 节点数据\r\n    parent.nodeData.children.splice(index, 1)\r\n    parent.nodeData.children.splice(insertIndex, 0, node.nodeData)\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 将节点上移一个层级，多个节点只会操作第一个节点\r\n  moveUpOneLevel(node) {\r\n    node = node || this.activeNodeList[0]\r\n    if (!node || node.isRoot || node.layerIndex <= 1) {\r\n      return\r\n    }\r\n    const parent = node.parent\r\n    const grandpa = parent.parent\r\n    const index = getNodeIndexInNodeList(node, parent.children)\r\n    const parentIndex = getNodeIndexInNodeList(parent, grandpa.children)\r\n    // 节点数据\r\n    this.checkNodeLayerChange(node, parent)\r\n    parent.nodeData.children.splice(index, 1)\r\n    grandpa.nodeData.children.splice(parentIndex + 1, 0, node.nodeData)\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 移除节点数据的自定义样式的内部方法\r\n  _handleRemoveCustomStyles(nodeData) {\r\n    let hasCustomStyles = false\r\n    Object.keys(nodeData).forEach(key => {\r\n      if (checkIsNodeStyleDataKey(key)) {\r\n        hasCustomStyles = true\r\n        delete nodeData[key]\r\n      }\r\n    })\r\n    // 如果是富文本，那么还要处理富文本内容\r\n    if (hasCustomStyles && this.mindMap.richText) {\r\n      nodeData.resetRichText = true\r\n      nodeData.text = removeRichTextStyes(nodeData.text)\r\n    }\r\n    return hasCustomStyles\r\n  }\r\n\r\n  // 一键去除自定义样式\r\n  removeCustomStyles(node) {\r\n    node = node || this.activeNodeList[0]\r\n    if (!node) {\r\n      return\r\n    }\r\n    const hasCustomStyles = this._handleRemoveCustomStyles(node.getData())\r\n    if (hasCustomStyles) {\r\n      this.reRenderNodeCheckChange(node)\r\n    }\r\n  }\r\n\r\n  // 一键去除所有节点自定义样式\r\n  removeAllNodeCustomStyles(appointNodes) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    let hasCustomStyles = false\r\n    // 指定了节点列表，那么遍历该节点列表\r\n    if (appointNodes.length > 0) {\r\n      appointNodes.forEach(node => {\r\n        const _hasCustomStyles = this._handleRemoveCustomStyles(node.getData())\r\n        if (_hasCustomStyles) hasCustomStyles = true\r\n      })\r\n    } else {\r\n      // 否则遍历整棵树\r\n      if (!this.renderTree) return\r\n      walk(this.renderTree, null, node => {\r\n        const _hasCustomStyles = this._handleRemoveCustomStyles(node.data)\r\n        if (_hasCustomStyles) hasCustomStyles = true\r\n        // 不要忘记概要节点\r\n        const generalizationList = formatGetNodeGeneralization(node.data)\r\n        if (generalizationList.length > 0) {\r\n          generalizationList.forEach(generalizationData => {\r\n            const _hasCustomStyles =\r\n              this._handleRemoveCustomStyles(generalizationData)\r\n            if (_hasCustomStyles) hasCustomStyles = true\r\n          })\r\n        }\r\n      })\r\n    }\r\n    if (hasCustomStyles) {\r\n      this.mindMap.reRender()\r\n    }\r\n  }\r\n\r\n  // 复制节点\r\n  copy() {\r\n    this.beingCopyData = this.copyNode()\r\n    if (!this.beingCopyData) return\r\n    setDataToClipboard(createSmmFormatData(this.beingCopyData))\r\n  }\r\n\r\n  // 剪切节点\r\n  cut() {\r\n    this.mindMap.execCommand('CUT_NODE', copyData => {\r\n      this.beingCopyData = copyData\r\n      setDataToClipboard(createSmmFormatData(copyData))\r\n    })\r\n  }\r\n\r\n  // 粘贴\r\n  async paste() {\r\n    const {\r\n      errorHandler,\r\n      handleIsSplitByWrapOnPasteCreateNewNode,\r\n      handleNodePasteImg\r\n    } = this.mindMap.opt\r\n    // 读取剪贴板的文字和图片\r\n    let text = null\r\n    let img = null\r\n    try {\r\n      const res = await getDataFromClipboard()\r\n      text = res.text\r\n      img = res.img\r\n    } catch (error) {\r\n      errorHandler(ERROR_TYPES.READ_CLIPBOARD_ERROR, error)\r\n    }\r\n    // 检查剪切板数据是否有变化\r\n    // 通过图片大小来判断图片是否发生变化，可能是不准确的，但是目前没有其他好方法\r\n    const imgSize = img ? img.size : 0\r\n    if (this.beingPasteText !== text || this.beingPasteImgSize !== imgSize) {\r\n      this.currentBeingPasteType = CONSTANTS.PASTE_TYPE.CLIP_BOARD\r\n      this.beingPasteText = text\r\n      this.beingPasteImgSize = imgSize\r\n    }\r\n    // 检查要粘贴的节点数据是否有变化，节点优先级高于剪切板\r\n    if (this.lastBeingCopyData !== this.beingCopyData) {\r\n      this.lastBeingCopyData = this.beingCopyData\r\n      this.currentBeingPasteType = CONSTANTS.PASTE_TYPE.CANVAS\r\n    }\r\n    // 粘贴剪切板的数据\r\n    if (this.currentBeingPasteType === CONSTANTS.PASTE_TYPE.CLIP_BOARD) {\r\n      // 存在文本，则创建子节点\r\n      if (text) {\r\n        // 判断粘贴的是否是simple-mind-map的数据\r\n        let smmData = null\r\n        let useDefault = true\r\n        // 用户自定义处理\r\n        if (this.mindMap.opt.customHandleClipboardText) {\r\n          try {\r\n            const res = await this.mindMap.opt.customHandleClipboardText(text)\r\n            if (!isUndef(res)) {\r\n              useDefault = false\r\n              const checkRes = checkSmmFormatData(res)\r\n              if (checkRes.isSmm) {\r\n                smmData = checkRes.data\r\n              } else {\r\n                text = checkRes.data\r\n              }\r\n            }\r\n          } catch (error) {\r\n            errorHandler(ERROR_TYPES.CUSTOM_HANDLE_CLIPBOARD_TEXT_ERROR, error)\r\n          }\r\n        }\r\n        // 默认处理\r\n        if (useDefault) {\r\n          const checkRes = checkSmmFormatData(text)\r\n          if (checkRes.isSmm) {\r\n            smmData = checkRes.data\r\n          } else {\r\n            text = checkRes.data\r\n          }\r\n        }\r\n        if (smmData) {\r\n          this.mindMap.execCommand(\r\n            'INSERT_MULTI_CHILD_NODE',\r\n            [],\r\n            Array.isArray(smmData) ? smmData : [smmData]\r\n          )\r\n        } else {\r\n          text = htmlEscape(text)\r\n          const textArr = text\r\n            .split(new RegExp('\\r?\\n|(?<!\\n)\\r', 'g'))\r\n            .filter(item => {\r\n              return !!item\r\n            })\r\n          // 判断是否需要根据换行自动分割节点\r\n          if (textArr.length > 1 && handleIsSplitByWrapOnPasteCreateNewNode) {\r\n            handleIsSplitByWrapOnPasteCreateNewNode()\r\n              .then(() => {\r\n                this.mindMap.execCommand(\r\n                  'INSERT_MULTI_CHILD_NODE',\r\n                  [],\r\n                  textArr.map(item => {\r\n                    return {\r\n                      data: {\r\n                        text: item\r\n                      },\r\n                      children: []\r\n                    }\r\n                  })\r\n                )\r\n              })\r\n              .catch(() => {\r\n                this.mindMap.execCommand('INSERT_CHILD_NODE', false, [], {\r\n                  text\r\n                })\r\n              })\r\n          } else {\r\n            this.mindMap.execCommand('INSERT_CHILD_NODE', false, [], {\r\n              text\r\n            })\r\n          }\r\n        }\r\n      }\r\n      // 存在图片，则添加到当前激活节点\r\n      if (img) {\r\n        try {\r\n          let imgData = null\r\n          // 自定义图片处理函数\r\n          if (handleNodePasteImg && typeof handleNodePasteImg === 'function') {\r\n            imgData = await handleNodePasteImg(img)\r\n          } else {\r\n            imgData = await loadImage(img)\r\n          }\r\n          if (this.activeNodeList.length > 0) {\r\n            this.activeNodeList.forEach(node => {\r\n              this.mindMap.execCommand('SET_NODE_IMAGE', node, {\r\n                url: imgData.url,\r\n                title: '',\r\n                width: imgData.size.width,\r\n                height: imgData.size.height\r\n              })\r\n            })\r\n          }\r\n        } catch (error) {\r\n          errorHandler(ERROR_TYPES.LOAD_CLIPBOARD_IMAGE_ERROR, error)\r\n        }\r\n      }\r\n    } else {\r\n      // 粘贴节点数据\r\n      if (this.beingCopyData) {\r\n        this.mindMap.execCommand('PASTE_NODE', this.beingCopyData)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  将节点移动到另一个节点的前面\r\n  insertBefore(node, exist) {\r\n    this.insertTo(node, exist, 'before')\r\n  }\r\n\r\n  //  将节点移动到另一个节点的后面\r\n  insertAfter(node, exist) {\r\n    this.insertTo(node, exist, 'after')\r\n  }\r\n\r\n  // 将节点移动到另一个节点的前面或后面\r\n  insertTo(node, exist, dir = 'before') {\r\n    let nodeList = formatDataToArray(node)\r\n    nodeList = nodeList.filter(item => {\r\n      return !item.isRoot\r\n    })\r\n    if (dir === 'after') {\r\n      nodeList.reverse()\r\n    }\r\n    nodeList.forEach(item => {\r\n      this.checkNodeLayerChange(item, exist)\r\n      // 移动节点\r\n      let nodeParent = item.parent\r\n      let nodeBorthers = nodeParent.children\r\n      let nodeIndex = getNodeIndexInNodeList(item, nodeBorthers)\r\n      if (nodeIndex === -1) {\r\n        return\r\n      }\r\n      nodeBorthers.splice(nodeIndex, 1)\r\n      nodeParent.nodeData.children.splice(nodeIndex, 1)\r\n\r\n      // 目标节点\r\n      let existParent = exist.parent\r\n      let existBorthers = existParent.children\r\n      let existIndex = getNodeIndexInNodeList(exist, existBorthers)\r\n      if (existIndex === -1) {\r\n        return\r\n      }\r\n      if (dir === 'after') {\r\n        existIndex++\r\n      }\r\n      existBorthers.splice(existIndex, 0, item)\r\n      existParent.nodeData.children.splice(existIndex, 0, item.nodeData)\r\n    })\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 如果是富文本模式，那么某些层级变化需要更新样式\r\n  checkNodeLayerChange(node, toNode, toNodeIsParent = false) {\r\n    if (this.mindMap.richText) {\r\n      const toIndex = toNodeIsParent ? toNode.layerIndex + 1 : toNode.layerIndex\r\n      let nodeLayerChanged =\r\n        (node.layerIndex === 1 && toIndex !== 1) ||\r\n        (node.layerIndex !== 1 && toIndex === 1)\r\n      if (nodeLayerChanged) {\r\n        node.setData({\r\n          resetRichText: true\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  //  移除节点\r\n  removeNode(appointNodes = []) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    // 删除节点后需要激活的节点\r\n    let needActiveNode = null\r\n    let isAppointNodes = appointNodes.length > 0\r\n    let list = isAppointNodes ? appointNodes : this.activeNodeList\r\n    let root = list.find(node => {\r\n      return node.isRoot\r\n    })\r\n    if (root) {\r\n      this.clearActiveNodeList()\r\n      root.children = []\r\n      root.nodeData.children = []\r\n    } else {\r\n      // 如果只选中了一个节点，删除后激活其兄弟节点或者父节点\r\n      needActiveNode = this.getNextActiveNode(list)\r\n      for (let i = 0; i < list.length; i++) {\r\n        const node = list[i]\r\n        const currentEditNode = this.textEdit.getCurrentEditNode()\r\n        if (\r\n          currentEditNode &&\r\n          currentEditNode.getData('uid') === node.getData('uid')\r\n        ) {\r\n          // 如果当前节点正在编辑中，那么先完成编辑\r\n          this.textEdit.hideEditTextBox()\r\n        }\r\n        if (isAppointNodes) list.splice(i, 1)\r\n        if (node.isGeneralization) {\r\n          this.deleteNodeGeneralization(node)\r\n          this.removeNodeFromActiveList(node)\r\n          i--\r\n        } else {\r\n          this.removeNodeFromActiveList(node)\r\n          removeFromParentNodeData(node)\r\n          i--\r\n        }\r\n      }\r\n    }\r\n    this.activeNodeList = []\r\n    // 激活被删除节点的兄弟节点或父节点\r\n    if (needActiveNode) {\r\n      this.addNodeToActiveList(needActiveNode)\r\n    }\r\n    this.emitNodeActiveEvent()\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 删除概要节点，即从所属节点里删除该概要\r\n  deleteNodeGeneralization(node) {\r\n    const targetNode = node.generalizationBelongNode\r\n    const index = targetNode.getGeneralizationNodeIndex(node)\r\n    let generalization = targetNode.getData('generalization')\r\n    if (Array.isArray(generalization)) {\r\n      generalization.splice(index, 1)\r\n    } else {\r\n      generalization = null\r\n    }\r\n    // 删除概要节点\r\n    this.mindMap.execCommand('SET_NODE_DATA', targetNode, {\r\n      generalization\r\n    })\r\n    this.closeHighlightNode()\r\n  }\r\n\r\n  // 仅删除当前节点\r\n  removeCurrentNode(appointNodes = []) {\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    if (this.activeNodeList.length <= 0 && appointNodes.length <= 0) {\r\n      return\r\n    }\r\n    let isAppointNodes = appointNodes.length > 0\r\n    let list = isAppointNodes ? appointNodes : this.activeNodeList\r\n    list = list.filter(node => {\r\n      return !node.isRoot\r\n    })\r\n    // 删除节点后需要激活的节点，如果只选中了一个节点，删除后激活其兄弟节点或者父节点\r\n    let needActiveNode = this.getNextActiveNode(list)\r\n    for (let i = 0; i < list.length; i++) {\r\n      let node = list[i]\r\n      if (node.isGeneralization) {\r\n        // 删除概要节点\r\n        this.deleteNodeGeneralization(node)\r\n      } else {\r\n        const parent = node.parent\r\n        const index = getNodeDataIndex(node)\r\n        parent.nodeData.children.splice(\r\n          index,\r\n          1,\r\n          ...(node.nodeData.children || [])\r\n        )\r\n      }\r\n    }\r\n    this.activeNodeList = []\r\n    // 激活被删除节点的兄弟节点或父节点\r\n    if (needActiveNode) {\r\n      this.addNodeToActiveList(needActiveNode)\r\n    }\r\n    this.emitNodeActiveEvent()\r\n    this.mindMap.render()\r\n  }\r\n\r\n  // 计算下一个可激活的节点\r\n  getNextActiveNode(deleteList) {\r\n    // 删除多个节点不自动激活相邻节点\r\n    if (deleteList.length !== 1) return null\r\n    // 被删除的节点不在当前激活的节点列表里，不激活相邻节点\r\n    if (this.findActiveNodeIndex(deleteList[0]) === -1) return null\r\n    let needActiveNode = null\r\n    if (\r\n      this.activeNodeList.length === 1 &&\r\n      !this.activeNodeList[0].isGeneralization &&\r\n      this.mindMap.opt.deleteNodeActive\r\n    ) {\r\n      const node = this.activeNodeList[0]\r\n      const broList = node.parent.children\r\n      const nodeIndex = getNodeIndexInNodeList(node, broList)\r\n      // 如果后面有兄弟节点\r\n      if (nodeIndex < broList.length - 1) {\r\n        needActiveNode = broList[nodeIndex + 1]\r\n      } else {\r\n        // 如果前面有兄弟节点\r\n        if (nodeIndex > 0) {\r\n          needActiveNode = broList[nodeIndex - 1]\r\n        } else {\r\n          // 没有兄弟节点\r\n          needActiveNode = node.parent\r\n        }\r\n      }\r\n    }\r\n    return needActiveNode\r\n  }\r\n\r\n  //  复制节点\r\n  copyNode() {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return null\r\n    }\r\n    const nodeList = getTopAncestorsFomNodeList(this.activeNodeList)\r\n    return nodeList.map(node => {\r\n      return copyNodeTree({}, node, true)\r\n    })\r\n  }\r\n\r\n  //  剪切节点\r\n  cutNode(callback) {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    // 找出激活节点中的顶层节点列表，并过滤掉根节点\r\n    const nodeList = getTopAncestorsFomNodeList(this.activeNodeList).filter(\r\n      node => {\r\n        return !node.isRoot\r\n      }\r\n    )\r\n    // 复制数据\r\n    const copyData = nodeList.map(node => {\r\n      return copyNodeTree({}, node, true)\r\n    })\r\n    // 从父节点的数据中移除\r\n    nodeList.forEach(node => {\r\n      removeFromParentNodeData(node)\r\n    })\r\n    // 清空激活节点列表\r\n    this.clearActiveNodeList()\r\n    this.mindMap.render()\r\n    if (callback && typeof callback === 'function') {\r\n      callback(copyData)\r\n    }\r\n  }\r\n\r\n  //  移动节点作为另一个节点的子节点\r\n  moveNodeTo(node, toNode) {\r\n    let nodeList = formatDataToArray(node)\r\n    nodeList = nodeList.filter(item => {\r\n      return !item.isRoot\r\n    })\r\n    nodeList.forEach(item => {\r\n      this.checkNodeLayerChange(item, toNode, true)\r\n      this.removeNodeFromActiveList(item)\r\n      removeFromParentNodeData(item)\r\n      toNode.nodeData.children.push(item.nodeData)\r\n    })\r\n    this.emitNodeActiveEvent()\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //   粘贴节点到节点\r\n  pasteNode(data) {\r\n    data = formatDataToArray(data)\r\n    if (this.activeNodeList.length <= 0 || data.length <= 0) {\r\n      return\r\n    }\r\n    this.activeNodeList.forEach(node => {\r\n      node.nodeData.children.push(\r\n        ...data.map(item => {\r\n          const newData = simpleDeepClone(item)\r\n          createUidForAppointNodes([newData], true)\r\n          return newData\r\n        })\r\n      )\r\n    })\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  设置节点样式\r\n  setNodeStyle(node, prop, value) {\r\n    let data = {\r\n      [prop]: value\r\n    }\r\n    // 如果开启了富文本，则需要应用到富文本上\r\n    if (this.mindMap.richText) {\r\n      this.mindMap.richText.setNotActiveNodeStyle(node, {\r\n        [prop]: value\r\n      })\r\n    }\r\n    this.setNodeDataRender(node, data)\r\n    // 更新了连线的样式\r\n    if (lineStyleProps.includes(prop)) {\r\n      ;(node.parent || node).renderLine(true)\r\n    }\r\n  }\r\n\r\n  //  设置节点多个样式\r\n  setNodeStyles(node, style) {\r\n    let data = { ...style }\r\n    // 如果开启了富文本，则需要应用到富文本上\r\n    if (this.mindMap.richText) {\r\n      this.mindMap.richText.setNotActiveNodeStyle(node, style)\r\n    }\r\n    this.setNodeDataRender(node, data)\r\n    // 更新了连线的样式\r\n    let props = Object.keys(style)\r\n    let hasLineStyleProps = false\r\n    props.forEach(key => {\r\n      if (lineStyleProps.includes(key)) {\r\n        hasLineStyleProps = true\r\n      }\r\n    })\r\n    if (hasLineStyleProps) {\r\n      ;(node.parent || node).renderLine(true)\r\n    }\r\n  }\r\n\r\n  //  设置节点是否激活\r\n  setNodeActive(node, active) {\r\n    this.mindMap.execCommand('SET_NODE_DATA', node, {\r\n      isActive: active\r\n    })\r\n    node.updateNodeByActive(active)\r\n  }\r\n\r\n  //  设置节点是否展开\r\n  setNodeExpand(node, expand) {\r\n    this.mindMap.execCommand('SET_NODE_DATA', node, {\r\n      expand\r\n    })\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  展开所有\r\n  expandAllNode() {\r\n    if (!this.renderTree) return\r\n    walk(\r\n      this.renderTree,\r\n      null,\r\n      node => {\r\n        if (!node.data.expand) {\r\n          node.data.expand = true\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0,\r\n      0\r\n    )\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  收起所有\r\n  unexpandAllNode(isSetRootNodeCenter = true) {\r\n    if (!this.renderTree) return\r\n    walk(\r\n      this.renderTree,\r\n      null,\r\n      (node, parent, isRoot) => {\r\n        if (!isRoot && node.children && node.children.length > 0) {\r\n          node.data.expand = false\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0,\r\n      0\r\n    )\r\n    this.mindMap.render(() => {\r\n      if (isSetRootNodeCenter) {\r\n        this.setRootNodeCenter()\r\n      }\r\n    })\r\n  }\r\n\r\n  //  展开到指定层级\r\n  expandToLevel(level) {\r\n    if (!this.renderTree) return\r\n    walk(\r\n      this.renderTree,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        const expand = layerIndex < level\r\n        if (expand) {\r\n          node.data.expand = true\r\n        } else if (!isRoot && node.children && node.children.length > 0) {\r\n          node.data.expand = false\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0,\r\n      0\r\n    )\r\n    this.mindMap.render()\r\n  }\r\n\r\n  //  切换激活节点的展开状态\r\n  toggleActiveExpand() {\r\n    this.activeNodeList.forEach(node => {\r\n      if (node.nodeData.children.length <= 0) {\r\n        return\r\n      }\r\n      this.toggleNodeExpand(node)\r\n    })\r\n  }\r\n\r\n  //  切换节点展开状态\r\n  toggleNodeExpand(node) {\r\n    this.mindMap.execCommand('SET_NODE_EXPAND', node, !node.getData('expand'))\r\n  }\r\n\r\n  //  设置节点文本\r\n  setNodeText(node, text, richText, resetRichText) {\r\n    richText = richText === undefined ? node.getData('richText') : richText\r\n    this.setNodeDataRender(node, {\r\n      text,\r\n      richText,\r\n      resetRichText\r\n    })\r\n  }\r\n\r\n  //  设置节点图片\r\n  setNodeImage(node, data) {\r\n    const {\r\n      url,\r\n      title,\r\n      width,\r\n      height,\r\n      custom = false\r\n    } = data || { url: '', title: '', width: 0, height: 0, custom: false }\r\n    this.setNodeDataRender(node, {\r\n      image: url,\r\n      imageTitle: title || '',\r\n      imageSize: {\r\n        width,\r\n        height,\r\n        custom\r\n      }\r\n    })\r\n  }\r\n\r\n  //  设置节点图标\r\n  setNodeIcon(node, icons) {\r\n    this.setNodeDataRender(node, {\r\n      icon: icons\r\n    })\r\n  }\r\n\r\n  //  设置节点超链接\r\n  setNodeHyperlink(node, link, title = '') {\r\n    this.setNodeDataRender(node, {\r\n      hyperlink: link,\r\n      hyperlinkTitle: title\r\n    })\r\n  }\r\n\r\n  //  设置节点备注\r\n  setNodeNote(node, note) {\r\n    this.setNodeDataRender(node, {\r\n      note\r\n    })\r\n  }\r\n\r\n  //  设置节点附件\r\n  setNodeAttachment(node, url, name = '') {\r\n    this.setNodeDataRender(node, {\r\n      attachmentUrl: url,\r\n      attachmentName: name\r\n    })\r\n  }\r\n\r\n  //  设置节点标签\r\n  setNodeTag(node, tag) {\r\n    this.setNodeDataRender(node, {\r\n      tag\r\n    })\r\n  }\r\n\r\n  // 设置节点公式\r\n  insertFormula(formula, appointNodes = []) {\r\n    // 只在富文本模式下可用，并且需要注册Formula插件\r\n    if (!this.mindMap.richText || !this.mindMap.formula) return\r\n    appointNodes = formatDataToArray(appointNodes)\r\n    const list = appointNodes.length > 0 ? appointNodes : this.activeNodeList\r\n    list.forEach(node => {\r\n      this.mindMap.formula.insertFormulaToNode(node, formula)\r\n    })\r\n  }\r\n\r\n  //  添加节点概要\r\n  addGeneralization(data, openEdit = true) {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    const nodeList = this.activeNodeList.filter(node => {\r\n      return (\r\n        !node.isRoot &&\r\n        !node.isGeneralization &&\r\n        !node.checkHasSelfGeneralization()\r\n      )\r\n    })\r\n    const list = parseAddGeneralizationNodeList(nodeList)\r\n    const isRichText = !!this.mindMap.richText\r\n    const { focusNewNode, inserting } = this.getNewNodeBehavior(\r\n      openEdit,\r\n      list.length > 1\r\n    )\r\n    list.forEach(item => {\r\n      const newData = {\r\n        inserting,\r\n        ...(data || {\r\n          text: this.mindMap.opt.defaultGeneralizationText\r\n        }),\r\n        range: item.range || null,\r\n        uid: createUid(),\r\n        richText: isRichText,\r\n        resetRichText: isRichText,\r\n        isActive: focusNewNode\r\n      }\r\n      let generalization = item.node.getData('generalization')\r\n      if (generalization) {\r\n        if (Array.isArray(generalization)) {\r\n          generalization.push(newData)\r\n        } else {\r\n          generalization = [generalization, newData]\r\n        }\r\n      } else {\r\n        generalization = [newData]\r\n      }\r\n      this.mindMap.execCommand('SET_NODE_DATA', item.node, {\r\n        generalization\r\n      })\r\n      // 插入子节点时自动展开子节点\r\n      item.node.setData({\r\n        expand: true\r\n      })\r\n    })\r\n    // 需要清除原来激活的节点\r\n    if (focusNewNode) {\r\n      this.clearActiveNodeList()\r\n    }\r\n    this.mindMap.render(() => {\r\n      // 修复祖先节点存在概要时位置未更新的问题\r\n      // 修复同时给存在上下级关系的节点添加概要时重叠的问题\r\n      this.mindMap.render()\r\n    })\r\n  }\r\n\r\n  //  删除节点概要\r\n  removeGeneralization() {\r\n    if (this.activeNodeList.length <= 0) {\r\n      return\r\n    }\r\n    this.activeNodeList.forEach(node => {\r\n      if (!node.checkHasGeneralization()) {\r\n        return\r\n      }\r\n      this.mindMap.execCommand('SET_NODE_DATA', node, {\r\n        generalization: null\r\n      })\r\n    })\r\n    this.mindMap.render()\r\n    this.closeHighlightNode()\r\n  }\r\n\r\n  //  设置节点自定义位置\r\n  setNodeCustomPosition(node, left = undefined, top = undefined) {\r\n    let nodeList = [node] || this.activeNodeList\r\n    nodeList.forEach(item => {\r\n      this.mindMap.execCommand('SET_NODE_DATA', item, {\r\n        customLeft: left,\r\n        customTop: top\r\n      })\r\n    })\r\n  }\r\n\r\n  //  一键整理布局，即去除自定义位置\r\n  resetLayout() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      node => {\r\n        node.customLeft = undefined\r\n        node.customTop = undefined\r\n        this.mindMap.execCommand('SET_NODE_DATA', node, {\r\n          customLeft: undefined,\r\n          customTop: undefined\r\n        })\r\n        this.mindMap.render()\r\n      },\r\n      null,\r\n      true,\r\n      0,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  设置节点形状\r\n  setNodeShape(node, shape) {\r\n    if (!shape || !shapeList.includes(shape)) {\r\n      return\r\n    }\r\n    let nodeList = [node] || this.activeNodeList\r\n    nodeList.forEach(item => {\r\n      this.setNodeStyle(item, 'shape', shape)\r\n    })\r\n  }\r\n\r\n  // 定位到指定节点\r\n  goTargetNode(node, callback = () => {}) {\r\n    let uid = typeof node === 'string' ? node : node.getData('uid')\r\n    if (!uid) return\r\n    this.expandToNodeUid(uid, () => {\r\n      let targetNode = this.findNodeByUid(uid)\r\n      if (targetNode) {\r\n        targetNode.active()\r\n        this.moveNodeToCenter(targetNode)\r\n        callback(targetNode)\r\n      }\r\n    })\r\n  }\r\n\r\n  //  更新节点数据\r\n  setNodeData(node, data) {\r\n    Object.keys(data).forEach(key => {\r\n      node.nodeData.data[key] = data[key]\r\n    })\r\n  }\r\n\r\n  //  设置节点数据，并判断是否渲染\r\n  setNodeDataRender(node, data, notRender = false) {\r\n    this.mindMap.execCommand('SET_NODE_DATA', node, data)\r\n    this.reRenderNodeCheckChange(node, notRender)\r\n  }\r\n\r\n  // 重新节点某个节点，判断节点大小是否发生了改变，是的话触发重绘\r\n  reRenderNodeCheckChange(node, notRender) {\r\n    let changed = node.reRender()\r\n    if (changed) {\r\n      if (!notRender) this.mindMap.render()\r\n    } else {\r\n      this.mindMap.emit('node_tree_render_end')\r\n    }\r\n  }\r\n\r\n  //  移动节点到画布中心\r\n  moveNodeToCenter(node) {\r\n    const { resetScaleOnMoveNodeToCenter } = this.mindMap.opt\r\n    let { transform, state } = this.mindMap.view.getTransformData()\r\n    let { left, top, width, height } = node\r\n    if (!resetScaleOnMoveNodeToCenter) {\r\n      left *= transform.scaleX\r\n      top *= transform.scaleY\r\n      width *= transform.scaleX\r\n      height *= transform.scaleY\r\n    }\r\n    let halfWidth = this.mindMap.width / 2\r\n    let halfHeight = this.mindMap.height / 2\r\n    let nodeCenterX = left + width / 2\r\n    let nodeCenterY = top + height / 2\r\n    let targetX = halfWidth - state.x\r\n    let targetY = halfHeight - state.y\r\n    let offsetX = targetX - nodeCenterX\r\n    let offsetY = targetY - nodeCenterY\r\n    this.mindMap.view.translateX(offsetX)\r\n    this.mindMap.view.translateY(offsetY)\r\n    if (resetScaleOnMoveNodeToCenter) {\r\n      this.mindMap.view.setScale(1)\r\n    }\r\n  }\r\n\r\n  // 回到中心主题，即设置根节点到画布中心\r\n  setRootNodeCenter() {\r\n    this.moveNodeToCenter(this.root)\r\n  }\r\n\r\n  // 展开到指定uid的节点\r\n  expandToNodeUid(uid, callback = () => {}) {\r\n    if (!this.renderTree) {\r\n      callback()\r\n      return\r\n    }\r\n    let parentsList = []\r\n    let isGeneralization = false\r\n    const cache = {}\r\n    bfsWalk(this.renderTree, (node, parent) => {\r\n      if (node.data.uid === uid) {\r\n        parentsList = parent ? [...cache[parent.data.uid], parent] : []\r\n        return 'stop'\r\n      }\r\n      const generalizationList = formatGetNodeGeneralization(node.data)\r\n      generalizationList.forEach(item => {\r\n        if (item.uid === uid) {\r\n          parentsList = parent ? [...cache[parent.data.uid], parent] : []\r\n          isGeneralization = true\r\n        }\r\n      })\r\n      if (isGeneralization) {\r\n        return 'stop'\r\n      }\r\n      cache[node.data.uid] = parent ? [...cache[parent.data.uid], parent] : []\r\n    })\r\n    let needRender = false\r\n    parentsList.forEach(node => {\r\n      if (!node.data.expand) {\r\n        needRender = true\r\n        node.data.expand = true\r\n      }\r\n    })\r\n    // 如果是展开到概要节点，那么父节点下的所有节点都需要开\r\n    if (isGeneralization) {\r\n      const lastNode = parentsList[parentsList.length - 1]\r\n      if (lastNode) {\r\n        walk(lastNode, null, node => {\r\n          if (!node.data.expand) {\r\n            needRender = true\r\n            node.data.expand = true\r\n          }\r\n        })\r\n      }\r\n    }\r\n    if (needRender) {\r\n      this.mindMap.render(callback)\r\n    } else {\r\n      callback()\r\n    }\r\n  }\r\n\r\n  // 根据uid找到对应的节点实例\r\n  findNodeByUid(uid) {\r\n    let res = null\r\n    walk(this.root, null, node => {\r\n      if (node.getData('uid') === uid) {\r\n        res = node\r\n        return true\r\n      }\r\n      // 概要节点\r\n      let isGeneralization = false\r\n      ;(node._generalizationList || []).forEach(item => {\r\n        if (item.generalizationNode.getData('uid') === uid) {\r\n          res = item.generalizationNode\r\n          isGeneralization = true\r\n        }\r\n      })\r\n      if (isGeneralization) {\r\n        return true\r\n      }\r\n    })\r\n    return res\r\n  }\r\n\r\n  // 高亮节点或子节点\r\n  highlightNode(node, range) {\r\n    // 如果当前正在渲染，那么不进行高亮，因为节点位置可能不正确\r\n    if (this.isRendering) return\r\n    const { highlightNodeBoxStyle = {} } = this.mindMap.opt\r\n    if (!this.highlightBoxNode) {\r\n      this.highlightBoxNode = new Polygon()\r\n        .stroke({\r\n          color: highlightNodeBoxStyle.stroke || 'transparent'\r\n        })\r\n        .fill({\r\n          color: highlightNodeBoxStyle.fill || 'transparent'\r\n        })\r\n    }\r\n    let minx = Infinity,\r\n      miny = Infinity,\r\n      maxx = -Infinity,\r\n      maxy = -Infinity\r\n    if (range) {\r\n      const children = node.children.slice(range[0], range[1] + 1)\r\n      children.forEach(child => {\r\n        if (child.left < minx) {\r\n          minx = child.left\r\n        }\r\n        if (child.top < miny) {\r\n          miny = child.top\r\n        }\r\n        const right = child.left + child.width\r\n        const bottom = child.top + child.height\r\n        if (right > maxx) {\r\n          maxx = right\r\n        }\r\n        if (bottom > maxy) {\r\n          maxy = bottom\r\n        }\r\n      })\r\n    } else {\r\n      minx = node.left\r\n      miny = node.top\r\n      maxx = node.left + node.width\r\n      maxy = node.top + node.height\r\n    }\r\n    this.highlightBoxNode.plot([\r\n      [minx, miny],\r\n      [maxx, miny],\r\n      [maxx, maxy],\r\n      [minx, maxy]\r\n    ])\r\n    this.mindMap.otherDraw.add(this.highlightBoxNode)\r\n  }\r\n\r\n  // 关闭高亮\r\n  closeHighlightNode() {\r\n    this.highlightBoxNode.remove()\r\n  }\r\n}\r\n\r\nexport default Render\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}