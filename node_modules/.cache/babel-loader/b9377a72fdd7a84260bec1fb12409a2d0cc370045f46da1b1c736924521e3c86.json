{"ast":null,"code":"import Base from './Base';\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils';\n\n//  逻辑结构图\nclass LogicalStructure extends Base {\n  //  构造函数\n  constructor(opt = {}) {\n    super(opt);\n  }\n\n  //  布局\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedTopValue();\n    }, () => {\n      this.adjustTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n\n  //  遍历数据计算节点的left、width、height\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex) => {\n      let newNode = this.createNode(cur, parent, isRoot, layerIndex);\n      // 根节点定位在画布中心位置\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        // 定位到父节点右侧\n        newNode.left = parent._node.left + parent._node.width + this.getMarginX(layerIndex);\n      }\n      if (!cur.data.expand) {\n        return true;\n      }\n    }, (cur, parent, isRoot, layerIndex) => {\n      // 返回时计算节点的areaHeight，也就是子节点所占的高度之和，包括外边距\n      let len = cur.data.expand === false ? 0 : cur._node.children.length;\n      cur._node.childrenAreaHeight = len ? cur._node.children.reduce((h, item) => {\n        return h + item.height;\n      }, 0) + (len + 1) * this.getMarginY(layerIndex + 1) : 0;\n      // 如果存在概要，则和概要的高度取最大值\n      let generalizationNodeHeight = cur._node.checkHasGeneralization() ? cur._node._generalizationNodeHeight + this.getMarginY(layerIndex + 1) : 0;\n      cur._node.childrenAreaHeight2 = Math.max(cur._node.childrenAreaHeight, generalizationNodeHeight);\n    }, true, 0);\n  }\n\n  //  遍历节点树计算节点的top\n  computedTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (node.getData('expand') && node.children && node.children.length) {\n        let marginY = this.getMarginY(layerIndex + 1);\n        // 第一个子节点的top值 = 该节点中心的top值 - 子节点的高度之和的一半\n        let top = node.top + node.height / 2 - node.childrenAreaHeight / 2;\n        let totalTop = top + marginY;\n        node.children.forEach(cur => {\n          cur.top = totalTop;\n          totalTop += cur.height + marginY;\n        });\n      }\n    }, null, true);\n  }\n\n  //  调整节点top\n  adjustTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.getData('expand')) {\n        return;\n      }\n      // 判断子节点所占的高度之和是否大于该节点自身，大于则需要调整位置\n      let difference = node.childrenAreaHeight2 - this.getMarginY(layerIndex + 1) * 2 - node.height;\n      if (difference > 0) {\n        this.updateBrothers(node, difference / 2);\n      }\n    }, null, true);\n  }\n\n  //  更新兄弟节点的top\n  updateBrothers(node, addHeight) {\n    if (node.parent) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.uid === node.uid || item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n        let _offset = 0;\n        // 上面的节点往上移\n        if (_index < index) {\n          _offset = -addHeight;\n        } else if (_index > index) {\n          // 下面的节点往下移\n          _offset = addHeight;\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothers(node.parent, addHeight);\n    }\n  }\n\n  //  绘制连线，连接该节点到其子节点\n  renderLine(node, lines, style, lineStyle) {\n    if (lineStyle === 'curve') {\n      this.renderLineCurve(node, lines, style);\n    } else if (lineStyle === 'direct') {\n      this.renderLineDirect(node, lines, style);\n    } else {\n      this.renderLineStraight(node, lines, style);\n    }\n  }\n\n  //  直线风格连线\n  renderLineStraight(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    let marginX = this.getMarginX(node.layerIndex + 1);\n    let s1 = (marginX - expandBtnSize) * 0.6;\n    let nodeUseLineStyle = this.mindMap.themeConfig.nodeUseLineStyle;\n    node.children.forEach((item, index) => {\n      let x1 = node.layerIndex === 0 ? left + width : left + width + expandBtnSize;\n      let y1 = top + height / 2;\n      let x2 = item.left;\n      let y2 = item.top + item.height / 2;\n      // 节点使用横线风格，需要额外渲染横线\n      let nodeUseLineStyleOffset = nodeUseLineStyle ? item.width : 0;\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1;\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2;\n      let path = this.createFoldLine([[x1, y1], [x1 + s1, y1], [x1 + s1, y2], [x2 + nodeUseLineStyleOffset, y2]]);\n      this.setLineStyle(style, lines[index], path, item);\n    });\n  }\n\n  //  直连风格\n  renderLineDirect(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    const {\n      nodeUseLineStyle\n    } = this.mindMap.themeConfig;\n    node.children.forEach((item, index) => {\n      if (node.layerIndex === 0) {\n        expandBtnSize = 0;\n      }\n      let x1 = left + width + expandBtnSize;\n      let y1 = top + height / 2;\n      let x2 = item.left;\n      let y2 = item.top + item.height / 2;\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1;\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2;\n      // 节点使用横线风格，需要额外渲染横线\n      let nodeUseLineStylePath = nodeUseLineStyle ? ` L ${item.left + item.width},${y2}` : '';\n      let path = `M ${x1},${y1} L ${x2},${y2}` + nodeUseLineStylePath;\n      this.setLineStyle(style, lines[index], path, item);\n    });\n  }\n\n  //  曲线风格连线\n  renderLineCurve(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    const {\n      nodeUseLineStyle,\n      rootLineStartPositionKeepSameInCurve,\n      rootLineKeepSameInCurve\n    } = this.mindMap.themeConfig;\n    node.children.forEach((item, index) => {\n      if (node.layerIndex === 0) {\n        expandBtnSize = 0;\n      }\n      let x1 = node.layerIndex === 0 && !rootLineStartPositionKeepSameInCurve ? left + width / 2 : left + width + expandBtnSize;\n      let y1 = top + height / 2;\n      let x2 = item.left;\n      let y2 = item.top + item.height / 2;\n      let path = '';\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1;\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2;\n      // 节点使用横线风格，需要额外渲染横线\n      let nodeUseLineStylePath = nodeUseLineStyle ? ` L ${item.left + item.width},${y2}` : '';\n      if (node.isRoot && !rootLineKeepSameInCurve) {\n        path = this.quadraticCurvePath(x1, y1, x2, y2) + nodeUseLineStylePath;\n      } else {\n        path = this.cubicBezierPath(x1, y1, x2, y2) + nodeUseLineStylePath;\n      }\n      this.setLineStyle(style, lines[index], path, item);\n    });\n  }\n\n  //  渲染按钮\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height\n    } = node;\n    let {\n      translateX,\n      translateY\n    } = btn.transform();\n    // 节点使用横线风格，需要调整展开收起按钮位置\n    let nodeUseLineStyleOffset = this.mindMap.themeConfig.nodeUseLineStyle ? height / 2 : 0;\n    // 位置没有变化则返回\n    let _x = width;\n    let _y = height / 2 + nodeUseLineStyleOffset;\n    if (_x === translateX && _y === translateY) {\n      return;\n    }\n    btn.translate(_x - translateX, _y - translateY);\n  }\n\n  //  创建概要节点\n  renderGeneralization(list) {\n    list.forEach(item => {\n      let {\n        top,\n        bottom,\n        right,\n        generalizationLineMargin,\n        generalizationNodeMargin\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h');\n      let x1 = right + generalizationLineMargin;\n      let y1 = top;\n      let x2 = right + generalizationLineMargin;\n      let y2 = bottom;\n      let cx = x1 + 20;\n      let cy = y1 + (y2 - y1) / 2;\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n      item.generalizationLine.plot(path);\n      item.generalizationNode.left = right + generalizationNodeMargin;\n      item.generalizationNode.top = top + (bottom - top - item.generalizationNode.height) / 2;\n    });\n  }\n\n  // 渲染展开收起按钮的隐藏占位元素\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\n    rect.size(expandBtnSize, height).x(width).y(0);\n  }\n}\nexport default LogicalStructure;","map":{"version":3,"names":["Base","walk","asyncRun","getNodeIndexInNodeList","LogicalStructure","constructor","opt","doLayout","callback","task","computedBaseValue","computedTopValue","adjustTopValue","root","renderer","renderTree","cur","parent","isRoot","layerIndex","newNode","createNode","setNodeCenter","left","_node","width","getMarginX","data","expand","len","children","length","childrenAreaHeight","reduce","h","item","height","getMarginY","generalizationNodeHeight","checkHasGeneralization","_generalizationNodeHeight","childrenAreaHeight2","Math","max","node","getData","marginY","top","totalTop","forEach","difference","updateBrothers","addHeight","childrenList","index","_index","uid","hasCustomPosition","_offset","updateChildren","renderLine","lines","style","lineStyle","renderLineCurve","renderLineDirect","renderLineStraight","expandBtnSize","mindMap","alwaysShowExpandBtn","marginX","s1","nodeUseLineStyle","themeConfig","x1","y1","x2","y2","nodeUseLineStyleOffset","path","createFoldLine","setLineStyle","nodeUseLineStylePath","rootLineStartPositionKeepSameInCurve","rootLineKeepSameInCurve","quadraticCurvePath","cubicBezierPath","renderExpandBtn","btn","translateX","translateY","transform","_x","_y","translate","renderGeneralization","list","bottom","right","generalizationLineMargin","generalizationNodeMargin","getNodeGeneralizationRenderBoundaries","cx","cy","generalizationLine","plot","generalizationNode","renderExpandBtnRect","rect","size","x","y"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/LogicalStructure.js"],"sourcesContent":["import Base from './Base'\r\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils'\r\n\r\n//  逻辑结构图\r\nclass LogicalStructure extends Base {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    super(opt)\r\n  }\r\n\r\n  //  布局\r\n  doLayout(callback) {\r\n    let task = [\r\n      () => {\r\n        this.computedBaseValue()\r\n      },\r\n      () => {\r\n        this.computedTopValue()\r\n      },\r\n      () => {\r\n        this.adjustTopValue()\r\n      },\r\n      () => {\r\n        callback(this.root)\r\n      }\r\n    ]\r\n    asyncRun(task)\r\n  }\r\n\r\n  //  遍历数据计算节点的left、width、height\r\n  computedBaseValue() {\r\n    walk(\r\n      this.renderer.renderTree,\r\n      null,\r\n      (cur, parent, isRoot, layerIndex) => {\r\n        let newNode = this.createNode(cur, parent, isRoot, layerIndex)\r\n        // 根节点定位在画布中心位置\r\n        if (isRoot) {\r\n          this.setNodeCenter(newNode)\r\n        } else {\r\n          // 非根节点\r\n          // 定位到父节点右侧\r\n          newNode.left =\r\n            parent._node.left + parent._node.width + this.getMarginX(layerIndex)\r\n        }\r\n        if (!cur.data.expand) {\r\n          return true\r\n        }\r\n      },\r\n      (cur, parent, isRoot, layerIndex) => {\r\n        // 返回时计算节点的areaHeight，也就是子节点所占的高度之和，包括外边距\r\n        let len = cur.data.expand === false ? 0 : cur._node.children.length\r\n        cur._node.childrenAreaHeight = len\r\n          ? cur._node.children.reduce((h, item) => {\r\n              return h + item.height\r\n            }, 0) +\r\n            (len + 1) * this.getMarginY(layerIndex + 1)\r\n          : 0\r\n        // 如果存在概要，则和概要的高度取最大值\r\n        let generalizationNodeHeight = cur._node.checkHasGeneralization()\r\n          ? cur._node._generalizationNodeHeight +\r\n            this.getMarginY(layerIndex + 1)\r\n          : 0\r\n        cur._node.childrenAreaHeight2 = Math.max(\r\n          cur._node.childrenAreaHeight,\r\n          generalizationNodeHeight\r\n        )\r\n      },\r\n      true,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  遍历节点树计算节点的top\r\n  computedTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (node.getData('expand') && node.children && node.children.length) {\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          // 第一个子节点的top值 = 该节点中心的top值 - 子节点的高度之和的一半\r\n          let top = node.top + node.height / 2 - node.childrenAreaHeight / 2\r\n          let totalTop = top + marginY\r\n          node.children.forEach(cur => {\r\n            cur.top = totalTop\r\n            totalTop += cur.height + marginY\r\n          })\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整节点top\r\n  adjustTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (!node.getData('expand')) {\r\n          return\r\n        }\r\n        // 判断子节点所占的高度之和是否大于该节点自身，大于则需要调整位置\r\n        let difference =\r\n          node.childrenAreaHeight2 -\r\n          this.getMarginY(layerIndex + 1) * 2 -\r\n          node.height\r\n        if (difference > 0) {\r\n          this.updateBrothers(node, difference / 2)\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  更新兄弟节点的top\r\n  updateBrothers(node, addHeight) {\r\n    if (node.parent) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.uid === node.uid || item.hasCustomPosition()) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        let _offset = 0\r\n        // 上面的节点往上移\r\n        if (_index < index) {\r\n          _offset = -addHeight\r\n        } else if (_index > index) {\r\n          // 下面的节点往下移\r\n          _offset = addHeight\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothers(node.parent, addHeight)\r\n    }\r\n  }\r\n\r\n  //  绘制连线，连接该节点到其子节点\r\n  renderLine(node, lines, style, lineStyle) {\r\n    if (lineStyle === 'curve') {\r\n      this.renderLineCurve(node, lines, style)\r\n    } else if (lineStyle === 'direct') {\r\n      this.renderLineDirect(node, lines, style)\r\n    } else {\r\n      this.renderLineStraight(node, lines, style)\r\n    }\r\n  }\r\n\r\n  //  直线风格连线\r\n  renderLineStraight(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    let marginX = this.getMarginX(node.layerIndex + 1)\r\n    let s1 = (marginX - expandBtnSize) * 0.6\r\n    let nodeUseLineStyle = this.mindMap.themeConfig.nodeUseLineStyle\r\n    node.children.forEach((item, index) => {\r\n      let x1 =\r\n        node.layerIndex === 0 ? left + width : left + width + expandBtnSize\r\n      let y1 = top + height / 2\r\n      let x2 = item.left\r\n      let y2 = item.top + item.height / 2\r\n      // 节点使用横线风格，需要额外渲染横线\r\n      let nodeUseLineStyleOffset = nodeUseLineStyle ? item.width : 0\r\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1\r\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2\r\n      let path = this.createFoldLine([\r\n        [x1, y1],\r\n        [x1 + s1, y1],\r\n        [x1 + s1, y2],\r\n        [x2 + nodeUseLineStyleOffset, y2]\r\n      ])\r\n      this.setLineStyle(style, lines[index], path, item)\r\n    })\r\n  }\r\n\r\n  //  直连风格\r\n  renderLineDirect(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    const { nodeUseLineStyle } = this.mindMap.themeConfig\r\n    node.children.forEach((item, index) => {\r\n      if (node.layerIndex === 0) {\r\n        expandBtnSize = 0\r\n      }\r\n      let x1 = left + width + expandBtnSize\r\n      let y1 = top + height / 2\r\n      let x2 = item.left\r\n      let y2 = item.top + item.height / 2\r\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1\r\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2\r\n      // 节点使用横线风格，需要额外渲染横线\r\n      let nodeUseLineStylePath = nodeUseLineStyle\r\n        ? ` L ${item.left + item.width},${y2}`\r\n        : ''\r\n      let path = `M ${x1},${y1} L ${x2},${y2}` + nodeUseLineStylePath\r\n      this.setLineStyle(style, lines[index], path, item)\r\n    })\r\n  }\r\n\r\n  //  曲线风格连线\r\n  renderLineCurve(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    const {\r\n      nodeUseLineStyle,\r\n      rootLineStartPositionKeepSameInCurve,\r\n      rootLineKeepSameInCurve\r\n    } = this.mindMap.themeConfig\r\n    node.children.forEach((item, index) => {\r\n      if (node.layerIndex === 0) {\r\n        expandBtnSize = 0\r\n      }\r\n      let x1 =\r\n        node.layerIndex === 0 && !rootLineStartPositionKeepSameInCurve\r\n          ? left + width / 2\r\n          : left + width + expandBtnSize\r\n      let y1 = top + height / 2\r\n      let x2 = item.left\r\n      let y2 = item.top + item.height / 2\r\n      let path = ''\r\n      y1 = nodeUseLineStyle && !node.isRoot ? y1 + height / 2 : y1\r\n      y2 = nodeUseLineStyle ? y2 + item.height / 2 : y2\r\n      // 节点使用横线风格，需要额外渲染横线\r\n      let nodeUseLineStylePath = nodeUseLineStyle\r\n        ? ` L ${item.left + item.width},${y2}`\r\n        : ''\r\n      if (node.isRoot && !rootLineKeepSameInCurve) {\r\n        path = this.quadraticCurvePath(x1, y1, x2, y2) + nodeUseLineStylePath\r\n      } else {\r\n        path = this.cubicBezierPath(x1, y1, x2, y2) + nodeUseLineStylePath\r\n      }\r\n      this.setLineStyle(style, lines[index], path, item)\r\n    })\r\n  }\r\n\r\n  //  渲染按钮\r\n  renderExpandBtn(node, btn) {\r\n    let { width, height } = node\r\n    let { translateX, translateY } = btn.transform()\r\n    // 节点使用横线风格，需要调整展开收起按钮位置\r\n    let nodeUseLineStyleOffset = this.mindMap.themeConfig.nodeUseLineStyle\r\n      ? height / 2\r\n      : 0\r\n    // 位置没有变化则返回\r\n    let _x = width\r\n    let _y = height / 2 + nodeUseLineStyleOffset\r\n    if (_x === translateX && _y === translateY) {\r\n      return\r\n    }\r\n    btn.translate(_x - translateX, _y - translateY)\r\n  }\r\n\r\n  //  创建概要节点\r\n  renderGeneralization(list) {\r\n    list.forEach(item => {\r\n      let {\r\n        top,\r\n        bottom,\r\n        right,\r\n        generalizationLineMargin,\r\n        generalizationNodeMargin\r\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h')\r\n      let x1 = right + generalizationLineMargin\r\n      let y1 = top\r\n      let x2 = right + generalizationLineMargin\r\n      let y2 = bottom\r\n      let cx = x1 + 20\r\n      let cy = y1 + (y2 - y1) / 2\r\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\r\n      item.generalizationLine.plot(path)\r\n      item.generalizationNode.left = right + generalizationNodeMargin\r\n      item.generalizationNode.top =\r\n        top + (bottom - top - item.generalizationNode.height) / 2\r\n    })\r\n  }\r\n\r\n  // 渲染展开收起按钮的隐藏占位元素\r\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\r\n    rect.size(expandBtnSize, height).x(width).y(0)\r\n  }\r\n}\r\n\r\nexport default LogicalStructure\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}