{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Base from './Base';\nimport { walk, asyncRun, degToRad, getNodeIndexInNodeList } from '../utils';\nimport { CONSTANTS } from '../constants/constant';\nimport utils from './fishboneUtils';\n\n//  鱼骨图\nclass Fishbone extends Base {\n  //  构造函数\n  constructor(opt = {}) {\n    super(opt);\n    this.indent = 0.3;\n    this.childIndent = 0.5;\n  }\n\n  //  布局\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedLeftTopValue();\n    }, () => {\n      this.adjustLeftTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (node, parent, isRoot, layerIndex, index) => {\n      // 创建节点\n      let newNode = this.createNode(node, parent, isRoot, layerIndex);\n      // 根节点定位在画布中心位置\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        // 三级及以下节点以上级方向为准\n        if (parent._node.dir) {\n          newNode.dir = parent._node.dir;\n        } else {\n          // 节点生长方向\n          newNode.dir = index % 2 === 0 ? CONSTANTS.LAYOUT_GROW_DIR.TOP : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM;\n        }\n        // 计算二级节点的top值\n        if (parent._node.isRoot) {\n          let marginY = this.getMarginY(layerIndex);\n          if (this.checkIsTop(newNode)) {\n            newNode.top = parent._node.top - newNode.height - marginY;\n          } else {\n            newNode.top = parent._node.top + parent._node.height + marginY;\n          }\n        }\n      }\n      if (!node.data.expand) {\n        return true;\n      }\n    }, null, true, 0);\n  }\n\n  //  遍历节点树计算节点的left、top\n  computedLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (node.isRoot) {\n        let marginX = this.getMarginX(layerIndex + 1);\n        let topTotalLeft = node.left + node.width + node.height + marginX;\n        let bottomTotalLeft = node.left + node.width + node.height + marginX;\n        node.children.forEach(item => {\n          if (this.checkIsTop(item)) {\n            item.left = topTotalLeft;\n            topTotalLeft += item.width + marginX;\n          } else {\n            item.left = bottomTotalLeft + 20;\n            bottomTotalLeft += item.width + marginX;\n          }\n        });\n      }\n      let params = {\n        layerIndex,\n        node,\n        ctx: this\n      };\n      if (this.checkIsTop(node)) {\n        utils.top.computedLeftTopValue(params);\n      } else {\n        utils.bottom.computedLeftTopValue(params);\n      }\n    }, null, true);\n  }\n\n  //  调整节点left、top\n  adjustLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.getData('expand')) {\n        return;\n      }\n      let params = {\n        node,\n        parent,\n        layerIndex,\n        ctx: this\n      };\n      if (this.checkIsTop(node)) {\n        utils.top.adjustLeftTopValueBefore(params);\n      } else {\n        utils.bottom.adjustLeftTopValueBefore(params);\n      }\n    }, (node, parent) => {\n      let params = {\n        parent,\n        node,\n        ctx: this\n      };\n      if (this.checkIsTop(node)) {\n        utils.top.adjustLeftTopValueAfter(params);\n      } else {\n        utils.bottom.adjustLeftTopValueAfter(params);\n      }\n      // 调整二级节点的子节点的left值\n      if (node.isRoot) {\n        let topTotalLeft = 0;\n        let bottomTotalLeft = 0;\n        node.children.forEach(item => {\n          if (this.checkIsTop(item)) {\n            item.left += topTotalLeft;\n            this.updateChildren(item.children, 'left', topTotalLeft);\n            let {\n              left,\n              right\n            } = this.getNodeBoundaries(item, 'h');\n            topTotalLeft += right - left;\n          } else {\n            item.left += bottomTotalLeft;\n            this.updateChildren(item.children, 'left', bottomTotalLeft);\n            let {\n              left,\n              right\n            } = this.getNodeBoundaries(item, 'h');\n            bottomTotalLeft += right - left;\n          }\n        });\n      }\n    }, true);\n  }\n\n  //  递归计算节点的宽度\n  getNodeAreaHeight(node) {\n    let totalHeight = 0;\n    let loop = node => {\n      let marginY = this.getMarginY(node.layerIndex);\n      totalHeight += node.height + (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) + marginY;\n      if (node.children.length) {\n        node.children.forEach(item => {\n          loop(item);\n        });\n      }\n    };\n    loop(node);\n    return totalHeight;\n  }\n\n  //  调整兄弟节点的left\n  updateBrothersLeft(node) {\n    let childrenList = node.children;\n    let totalAddWidth = 0;\n    childrenList.forEach(item => {\n      item.left += totalAddWidth;\n      if (item.children && item.children.length) {\n        this.updateChildren(item.children, 'left', totalAddWidth);\n      }\n      let {\n        left,\n        right\n      } = this.getNodeBoundaries(item, 'h');\n      let areaWidth = right - left;\n      let difference = areaWidth - item.width;\n      if (difference > 0) {\n        totalAddWidth += difference;\n      }\n    });\n  }\n\n  //  调整兄弟节点的top\n  updateBrothersTop(node, addHeight) {\n    if (node.parent && !node.parent.isRoot) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n        let _offset = 0;\n        // 下面的节点往下移\n        if (_index > index) {\n          _offset = addHeight;\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      if (this.checkIsTop(node)) {\n        this.updateBrothersTop(node.parent, addHeight);\n      } else {\n        this.updateBrothersTop(node.parent, node.layerIndex === 3 ? 0 : addHeight);\n      }\n    }\n  }\n\n  // 检查节点是否是上方节点\n  checkIsTop(node) {\n    return node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP;\n  }\n\n  //  绘制连线，连接该节点到其子节点\n  renderLine(node, lines, style) {\n    if (node.layerIndex !== 1 && node.children.length <= 0) {\n      return [];\n    }\n    let {\n      top,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    let len = node.children.length;\n    if (node.isRoot) {\n      // 当前节点是根节点\n      // 根节点的子节点是和根节点同一水平线排列\n      let maxx = -Infinity;\n      node.children.forEach(item => {\n        if (item.left > maxx) {\n          maxx = item.left;\n        }\n        // 水平线段到二级节点的连线\n        let marginY = this.getMarginY(item.layerIndex);\n        let nodeLineX = item.left;\n        let offset = node.height / 2 + marginY;\n        let offsetX = offset / Math.tan(degToRad(this.mindMap.opt.fishboneDeg));\n        let line = this.lineDraw.path();\n        if (this.checkIsTop(item)) {\n          line.plot(this.transformPath(`M ${nodeLineX - offsetX},${item.top + item.height + offset} L ${item.left},${item.top + item.height}`));\n        } else {\n          line.plot(this.transformPath(`M ${nodeLineX - offsetX},${item.top - offset} L ${nodeLineX},${item.top}`));\n        }\n        node.style.line(line);\n        node._lines.push(line);\n        style && style(line, node);\n      });\n      // 从根节点出发的水平线\n      let nodeHalfTop = node.top + node.height / 2;\n      let offset = node.height / 2 + this.getMarginY(node.layerIndex + 1);\n      let line = this.lineDraw.path();\n      line.plot(this.transformPath(`M ${node.left + node.width},${nodeHalfTop} L ${maxx - offset / Math.tan(degToRad(this.mindMap.opt.fishboneDeg))},${nodeHalfTop}`));\n      node.style.line(line);\n      node._lines.push(line);\n      style && style(line, node);\n    } else {\n      // 当前节点为非根节点\n      let maxy = -Infinity;\n      let miny = Infinity;\n      let maxx = -Infinity;\n      let x = node.left + node.width * this.indent;\n      node.children.forEach((item, index) => {\n        if (item.left > maxx) {\n          maxx = item.left;\n        }\n        let y = item.top + item.height / 2;\n        if (y > maxy) {\n          maxy = y;\n        }\n        if (y < miny) {\n          miny = y;\n        }\n        // 水平线\n        if (node.layerIndex > 1) {\n          let path = `M ${x},${y} L ${item.left},${y}`;\n          this.setLineStyle(style, lines[index], path, item);\n        }\n      });\n      // 斜线\n      if (len >= 0) {\n        let line = this.lineDraw.path();\n        expandBtnSize = len > 0 ? expandBtnSize : 0;\n        let lineLength = maxx - node.left - node.width * this.indent;\n        lineLength = Math.max(lineLength, 0);\n        let params = {\n          node,\n          line,\n          top,\n          x,\n          lineLength,\n          height,\n          expandBtnSize,\n          maxy,\n          miny,\n          ctx: this\n        };\n        if (this.checkIsTop(node)) {\n          utils.top.renderLine(params);\n        } else {\n          utils.bottom.renderLine(params);\n        }\n        node.style.line(line);\n        node._lines.push(line);\n        style && style(line, node);\n      }\n    }\n  }\n\n  //  渲染按钮\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height,\n      expandBtnSize,\n      isRoot\n    } = node;\n    if (!isRoot) {\n      let {\n        translateX,\n        translateY\n      } = btn.transform();\n      let params = {\n        node,\n        btn,\n        expandBtnSize,\n        translateX,\n        translateY,\n        width,\n        height\n      };\n      if (this.checkIsTop(node)) {\n        utils.top.renderExpandBtn(params);\n      } else {\n        utils.bottom.renderExpandBtn(params);\n      }\n    }\n  }\n\n  //  创建概要节点\n  renderGeneralization(list) {\n    list.forEach(item => {\n      let {\n        top,\n        bottom,\n        right,\n        generalizationLineMargin,\n        generalizationNodeMargin\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h');\n      let x1 = right + generalizationLineMargin;\n      let y1 = top;\n      let x2 = right + generalizationLineMargin;\n      let y2 = bottom;\n      let cx = x1 + 20;\n      let cy = y1 + (y2 - y1) / 2;\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n      item.generalizationLine.plot(this.transformPath(path));\n      item.generalizationNode.left = right + generalizationNodeMargin;\n      item.generalizationNode.top = top + (bottom - top - item.generalizationNode.height) / 2;\n    });\n  }\n\n  // 渲染展开收起按钮的隐藏占位元素\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\n    let dir = '';\n    if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n      dir = node.layerIndex === 1 ? CONSTANTS.LAYOUT_GROW_DIR.TOP : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM;\n    } else {\n      dir = node.layerIndex === 1 ? CONSTANTS.LAYOUT_GROW_DIR.BOTTOM : CONSTANTS.LAYOUT_GROW_DIR.TOP;\n    }\n    if (dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n      rect.size(width, expandBtnSize).x(0).y(-expandBtnSize);\n    } else {\n      rect.size(width, expandBtnSize).x(0).y(height);\n    }\n  }\n}\nexport default Fishbone;","map":{"version":3,"names":["Base","walk","asyncRun","degToRad","getNodeIndexInNodeList","CONSTANTS","utils","Fishbone","constructor","opt","indent","childIndent","doLayout","callback","task","computedBaseValue","computedLeftTopValue","adjustLeftTopValue","root","renderer","renderTree","node","parent","isRoot","layerIndex","index","newNode","createNode","setNodeCenter","_node","dir","LAYOUT_GROW_DIR","TOP","BOTTOM","marginY","getMarginY","checkIsTop","top","height","data","expand","marginX","getMarginX","topTotalLeft","left","width","bottomTotalLeft","children","forEach","item","params","ctx","bottom","getData","adjustLeftTopValueBefore","adjustLeftTopValueAfter","updateChildren","right","getNodeBoundaries","getNodeAreaHeight","totalHeight","loop","getNodeActChildrenLength","expandBtnSize","length","updateBrothersLeft","childrenList","totalAddWidth","areaWidth","difference","updateBrothersTop","addHeight","_index","hasCustomPosition","_offset","renderLine","lines","style","mindMap","alwaysShowExpandBtn","len","maxx","Infinity","nodeLineX","offset","offsetX","Math","tan","fishboneDeg","line","lineDraw","path","plot","transformPath","_lines","push","nodeHalfTop","maxy","miny","x","y","setLineStyle","lineLength","max","renderExpandBtn","btn","translateX","translateY","transform","renderGeneralization","list","generalizationLineMargin","generalizationNodeMargin","getNodeGeneralizationRenderBoundaries","x1","y1","x2","y2","cx","cy","generalizationLine","generalizationNode","renderExpandBtnRect","rect","size"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/Fishbone.js"],"sourcesContent":["import Base from './Base'\r\nimport { walk, asyncRun, degToRad, getNodeIndexInNodeList } from '../utils'\r\nimport { CONSTANTS } from '../constants/constant'\r\nimport utils from './fishboneUtils'\r\n\r\n//  鱼骨图\r\nclass Fishbone extends Base {\r\n  //  构造函数\r\n  constructor(opt = {}) {\r\n    super(opt)\r\n    this.indent = 0.3\r\n    this.childIndent = 0.5\r\n  }\r\n\r\n  //  布局\r\n  doLayout(callback) {\r\n    let task = [\r\n      () => {\r\n        this.computedBaseValue()\r\n      },\r\n      () => {\r\n        this.computedLeftTopValue()\r\n      },\r\n      () => {\r\n        this.adjustLeftTopValue()\r\n      },\r\n      () => {\r\n        callback(this.root)\r\n      }\r\n    ]\r\n    asyncRun(task)\r\n  }\r\n\r\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\r\n  computedBaseValue() {\r\n    walk(\r\n      this.renderer.renderTree,\r\n      null,\r\n      (node, parent, isRoot, layerIndex, index) => {\r\n        // 创建节点\r\n        let newNode = this.createNode(node, parent, isRoot, layerIndex)\r\n        // 根节点定位在画布中心位置\r\n        if (isRoot) {\r\n          this.setNodeCenter(newNode)\r\n        } else {\r\n          // 非根节点\r\n          // 三级及以下节点以上级方向为准\r\n          if (parent._node.dir) {\r\n            newNode.dir = parent._node.dir\r\n          } else {\r\n            // 节点生长方向\r\n            newNode.dir =\r\n              index % 2 === 0\r\n                ? CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n                : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n          }\r\n          // 计算二级节点的top值\r\n          if (parent._node.isRoot) {\r\n            let marginY = this.getMarginY(layerIndex)\r\n            if (this.checkIsTop(newNode)) {\r\n              newNode.top = parent._node.top - newNode.height - marginY\r\n            } else {\r\n              newNode.top = parent._node.top + parent._node.height + marginY\r\n            }\r\n          }\r\n        }\r\n        if (!node.data.expand) {\r\n          return true\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  遍历节点树计算节点的left、top\r\n  computedLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (node.isRoot) {\r\n          let marginX = this.getMarginX(layerIndex + 1)\r\n          let topTotalLeft = node.left + node.width + node.height + marginX\r\n          let bottomTotalLeft = node.left + node.width + node.height + marginX\r\n          node.children.forEach(item => {\r\n            if (this.checkIsTop(item)) {\r\n              item.left = topTotalLeft\r\n              topTotalLeft += item.width + marginX\r\n            } else {\r\n              item.left = bottomTotalLeft + 20\r\n              bottomTotalLeft += item.width + marginX\r\n            }\r\n          })\r\n        }\r\n        let params = { layerIndex, node, ctx: this }\r\n        if (this.checkIsTop(node)) {\r\n          utils.top.computedLeftTopValue(params)\r\n        } else {\r\n          utils.bottom.computedLeftTopValue(params)\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整节点left、top\r\n  adjustLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (!node.getData('expand')) {\r\n          return\r\n        }\r\n        let params = { node, parent, layerIndex, ctx: this }\r\n        if (this.checkIsTop(node)) {\r\n          utils.top.adjustLeftTopValueBefore(params)\r\n        } else {\r\n          utils.bottom.adjustLeftTopValueBefore(params)\r\n        }\r\n      },\r\n      (node, parent) => {\r\n        let params = { parent, node, ctx: this }\r\n        if (this.checkIsTop(node)) {\r\n          utils.top.adjustLeftTopValueAfter(params)\r\n        } else {\r\n          utils.bottom.adjustLeftTopValueAfter(params)\r\n        }\r\n        // 调整二级节点的子节点的left值\r\n        if (node.isRoot) {\r\n          let topTotalLeft = 0\r\n          let bottomTotalLeft = 0\r\n          node.children.forEach(item => {\r\n            if (this.checkIsTop(item)) {\r\n              item.left += topTotalLeft\r\n              this.updateChildren(item.children, 'left', topTotalLeft)\r\n              let { left, right } = this.getNodeBoundaries(item, 'h')\r\n              topTotalLeft += right - left\r\n            } else {\r\n              item.left += bottomTotalLeft\r\n              this.updateChildren(item.children, 'left', bottomTotalLeft)\r\n              let { left, right } = this.getNodeBoundaries(item, 'h')\r\n              bottomTotalLeft += right - left\r\n            }\r\n          })\r\n        }\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  //  递归计算节点的宽度\r\n  getNodeAreaHeight(node) {\r\n    let totalHeight = 0\r\n    let loop = node => {\r\n      let marginY = this.getMarginY(node.layerIndex)\r\n      totalHeight +=\r\n        node.height +\r\n        (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) +\r\n        marginY\r\n      if (node.children.length) {\r\n        node.children.forEach(item => {\r\n          loop(item)\r\n        })\r\n      }\r\n    }\r\n    loop(node)\r\n    return totalHeight\r\n  }\r\n\r\n  //  调整兄弟节点的left\r\n  updateBrothersLeft(node) {\r\n    let childrenList = node.children\r\n    let totalAddWidth = 0\r\n    childrenList.forEach(item => {\r\n      item.left += totalAddWidth\r\n      if (item.children && item.children.length) {\r\n        this.updateChildren(item.children, 'left', totalAddWidth)\r\n      }\r\n      let { left, right } = this.getNodeBoundaries(item, 'h')\r\n      let areaWidth = right - left\r\n      let difference = areaWidth - item.width\r\n      if (difference > 0) {\r\n        totalAddWidth += difference\r\n      }\r\n    })\r\n  }\r\n\r\n  //  调整兄弟节点的top\r\n  updateBrothersTop(node, addHeight) {\r\n    if (node.parent && !node.parent.isRoot) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.hasCustomPosition()) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        let _offset = 0\r\n        // 下面的节点往下移\r\n        if (_index > index) {\r\n          _offset = addHeight\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      if (this.checkIsTop(node)) {\r\n        this.updateBrothersTop(node.parent, addHeight)\r\n      } else {\r\n        this.updateBrothersTop(\r\n          node.parent,\r\n          node.layerIndex === 3 ? 0 : addHeight\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // 检查节点是否是上方节点\r\n  checkIsTop(node) {\r\n    return node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n  }\r\n\r\n  //  绘制连线，连接该节点到其子节点\r\n  renderLine(node, lines, style) {\r\n    if (node.layerIndex !== 1 && node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { top, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    let len = node.children.length\r\n    if (node.isRoot) {\r\n      // 当前节点是根节点\r\n      // 根节点的子节点是和根节点同一水平线排列\r\n      let maxx = -Infinity\r\n      node.children.forEach(item => {\r\n        if (item.left > maxx) {\r\n          maxx = item.left\r\n        }\r\n        // 水平线段到二级节点的连线\r\n        let marginY = this.getMarginY(item.layerIndex)\r\n        let nodeLineX = item.left\r\n        let offset = node.height / 2 + marginY\r\n        let offsetX = offset / Math.tan(degToRad(this.mindMap.opt.fishboneDeg))\r\n        let line = this.lineDraw.path()\r\n        if (this.checkIsTop(item)) {\r\n          line.plot(\r\n            this.transformPath(\r\n              `M ${nodeLineX - offsetX},${item.top + item.height + offset} L ${\r\n                item.left\r\n              },${item.top + item.height}`\r\n            )\r\n          )\r\n        } else {\r\n          line.plot(\r\n            this.transformPath(\r\n              `M ${nodeLineX - offsetX},${item.top - offset} L ${nodeLineX},${\r\n                item.top\r\n              }`\r\n            )\r\n          )\r\n        }\r\n        node.style.line(line)\r\n        node._lines.push(line)\r\n        style && style(line, node)\r\n      })\r\n      // 从根节点出发的水平线\r\n      let nodeHalfTop = node.top + node.height / 2\r\n      let offset = node.height / 2 + this.getMarginY(node.layerIndex + 1)\r\n      let line = this.lineDraw.path()\r\n      line.plot(\r\n        this.transformPath(\r\n          `M ${node.left + node.width},${nodeHalfTop} L ${\r\n            maxx - offset / Math.tan(degToRad(this.mindMap.opt.fishboneDeg))\r\n          },${nodeHalfTop}`\r\n        )\r\n      )\r\n      node.style.line(line)\r\n      node._lines.push(line)\r\n      style && style(line, node)\r\n    } else {\r\n      // 当前节点为非根节点\r\n      let maxy = -Infinity\r\n      let miny = Infinity\r\n      let maxx = -Infinity\r\n      let x = node.left + node.width * this.indent\r\n      node.children.forEach((item, index) => {\r\n        if (item.left > maxx) {\r\n          maxx = item.left\r\n        }\r\n        let y = item.top + item.height / 2\r\n        if (y > maxy) {\r\n          maxy = y\r\n        }\r\n        if (y < miny) {\r\n          miny = y\r\n        }\r\n        // 水平线\r\n        if (node.layerIndex > 1) {\r\n          let path = `M ${x},${y} L ${item.left},${y}`\r\n          this.setLineStyle(style, lines[index], path, item)\r\n        }\r\n      })\r\n      // 斜线\r\n      if (len >= 0) {\r\n        let line = this.lineDraw.path()\r\n        expandBtnSize = len > 0 ? expandBtnSize : 0\r\n        let lineLength = maxx - node.left - node.width * this.indent\r\n        lineLength = Math.max(lineLength, 0)\r\n        let params = {\r\n          node,\r\n          line,\r\n          top,\r\n          x,\r\n          lineLength,\r\n          height,\r\n          expandBtnSize,\r\n          maxy,\r\n          miny,\r\n          ctx: this\r\n        }\r\n        if (this.checkIsTop(node)) {\r\n          utils.top.renderLine(params)\r\n        } else {\r\n          utils.bottom.renderLine(params)\r\n        }\r\n        node.style.line(line)\r\n        node._lines.push(line)\r\n        style && style(line, node)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  渲染按钮\r\n  renderExpandBtn(node, btn) {\r\n    let { width, height, expandBtnSize, isRoot } = node\r\n    if (!isRoot) {\r\n      let { translateX, translateY } = btn.transform()\r\n      let params = {\r\n        node,\r\n        btn,\r\n        expandBtnSize,\r\n        translateX,\r\n        translateY,\r\n        width,\r\n        height\r\n      }\r\n      if (this.checkIsTop(node)) {\r\n        utils.top.renderExpandBtn(params)\r\n      } else {\r\n        utils.bottom.renderExpandBtn(params)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  创建概要节点\r\n  renderGeneralization(list) {\r\n    list.forEach(item => {\r\n      let {\r\n        top,\r\n        bottom,\r\n        right,\r\n        generalizationLineMargin,\r\n        generalizationNodeMargin\r\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h')\r\n      let x1 = right + generalizationLineMargin\r\n      let y1 = top\r\n      let x2 = right + generalizationLineMargin\r\n      let y2 = bottom\r\n      let cx = x1 + 20\r\n      let cy = y1 + (y2 - y1) / 2\r\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\r\n      item.generalizationLine.plot(this.transformPath(path))\r\n      item.generalizationNode.left = right + generalizationNodeMargin\r\n      item.generalizationNode.top =\r\n        top + (bottom - top - item.generalizationNode.height) / 2\r\n    })\r\n  }\r\n\r\n  // 渲染展开收起按钮的隐藏占位元素\r\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\r\n    let dir = ''\r\n    if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\r\n      dir =\r\n        node.layerIndex === 1\r\n          ? CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n          : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n    } else {\r\n      dir =\r\n        node.layerIndex === 1\r\n          ? CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n          : CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n    }\r\n    if (dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\r\n      rect.size(width, expandBtnSize).x(0).y(-expandBtnSize)\r\n    } else {\r\n      rect.size(width, expandBtnSize).x(0).y(height)\r\n    }\r\n  }\r\n}\r\n\r\nexport default Fishbone\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}