{"ast":null,"code":"import { checkIsNodeStyleDataKey, generateColorByContent } from '../../../utils/index';\nimport { Gradient } from '@svgdotjs/svg.js';\nconst rootProp = ['paddingX', 'paddingY'];\nconst backgroundStyleProps = ['backgroundColor', 'backgroundImage', 'backgroundRepeat', 'backgroundPosition', 'backgroundSize'];\n\n//  样式类\nclass Style {\n  //   设置背景样式\n  static setBackgroundStyle(el, themeConfig) {\n    // 缓存容器元素原本的样式\n    if (!Style.cacheStyle) {\n      Style.cacheStyle = {};\n      let style = window.getComputedStyle(el);\n      backgroundStyleProps.forEach(prop => {\n        Style.cacheStyle[prop] = style[prop];\n      });\n    }\n    // 设置新样式\n    let {\n      backgroundColor,\n      backgroundImage,\n      backgroundRepeat,\n      backgroundPosition,\n      backgroundSize\n    } = themeConfig;\n    el.style.backgroundColor = backgroundColor;\n    if (backgroundImage && backgroundImage !== 'none') {\n      el.style.backgroundImage = `url(${backgroundImage})`;\n      el.style.backgroundRepeat = backgroundRepeat;\n      el.style.backgroundPosition = backgroundPosition;\n      el.style.backgroundSize = backgroundSize;\n    } else {\n      el.style.backgroundImage = 'none';\n    }\n  }\n\n  // 移除背景样式\n  static removeBackgroundStyle(el) {\n    if (!Style.cacheStyle) return;\n    backgroundStyleProps.forEach(prop => {\n      el.style[prop] = Style.cacheStyle[prop];\n    });\n    Style.cacheStyle = null;\n  }\n\n  //  构造函数\n  constructor(ctx) {\n    this.ctx = ctx;\n    // 箭头图标\n    this._markerPath = null;\n    this._marker = null;\n    // 渐变背景\n    this._gradient = null;\n  }\n\n  //  合并样式\n  merge(prop, root) {\n    let themeConfig = this.ctx.mindMap.themeConfig;\n    // 三级及以下节点\n    let defaultConfig = themeConfig.node;\n    if (root || rootProp.includes(prop)) {\n      // 直接使用最外层样式\n      defaultConfig = themeConfig;\n    } else if (this.ctx.isGeneralization) {\n      // 概要节点\n      defaultConfig = themeConfig.generalization;\n    } else if (this.ctx.layerIndex === 0) {\n      // 根节点\n      defaultConfig = themeConfig.root;\n    } else if (this.ctx.layerIndex === 1) {\n      // 二级节点\n      defaultConfig = themeConfig.second;\n    }\n    // 优先使用节点本身的样式\n    return this.getSelfStyle(prop) !== undefined ? this.getSelfStyle(prop) : defaultConfig[prop];\n  }\n\n  //  获取某个样式值\n  getStyle(prop, root) {\n    return this.merge(prop, root);\n  }\n\n  //  获取自身自定义样式\n  getSelfStyle(prop) {\n    return this.ctx.getData(prop);\n  }\n\n  //  矩形\n  rect(node) {\n    this.shape(node);\n    node.radius(this.merge('borderRadius'));\n  }\n\n  // 形状\n  shape(node) {\n    if (this.merge('gradientStyle')) {\n      if (!this._gradient) {\n        this._gradient = this.ctx.nodeDraw.gradient('linear');\n      }\n      this._gradient.update(add => {\n        add.stop(0, this.merge('startColor'));\n        add.stop(1, this.merge('endColor'));\n      });\n      node.fill(this._gradient);\n    } else {\n      node.fill({\n        color: this.merge('fillColor')\n      });\n    }\n    // 节点使用横线样式，不需要渲染非激活状态的边框样式\n    // if (\n    //   !this.ctx.isRoot &&\n    //   !this.ctx.isGeneralization &&\n    //   this.ctx.mindMap.themeConfig.nodeUseLineStyle &&\n    //   !this.ctx.getData('isActive')\n    // ) {\n    //   return\n    // }\n    node.stroke({\n      color: this.merge('borderColor'),\n      width: this.merge('borderWidth'),\n      dasharray: this.merge('borderDasharray')\n    });\n  }\n\n  //  文字\n  text(node) {\n    node.fill({\n      color: this.merge('color')\n    }).css({\n      'font-family': this.merge('fontFamily'),\n      'font-size': this.merge('fontSize'),\n      'font-weight': this.merge('fontWeight'),\n      'font-style': this.merge('fontStyle'),\n      'text-decoration': this.merge('textDecoration')\n    });\n  }\n\n  // 生成内联样式\n  createStyleText() {\n    return `\n      color: ${this.merge('color')};\n      font-family: ${this.merge('fontFamily')};\n      font-size: ${this.merge('fontSize') + 'px'};\n      font-weight: ${this.merge('fontWeight')};\n      font-style: ${this.merge('fontStyle')};\n      text-decoration: ${this.merge('textDecoration')}\n    `;\n  }\n\n  // 获取文本样式\n  getTextFontStyle() {\n    return {\n      italic: this.merge('fontStyle') === 'italic',\n      bold: this.merge('fontWeight'),\n      fontSize: this.merge('fontSize'),\n      fontFamily: this.merge('fontFamily')\n    };\n  }\n\n  //  html文字节点\n  domText(node, fontSizeScale = 1, isMultiLine) {\n    node.style.fontFamily = this.merge('fontFamily');\n    node.style.fontSize = this.merge('fontSize') * fontSizeScale + 'px';\n    node.style.fontWeight = this.merge('fontWeight') || 'normal';\n    node.style.lineHeight = !isMultiLine ? 'normal' : this.merge('lineHeight');\n    node.style.fontStyle = this.merge('fontStyle');\n  }\n\n  //  标签文字\n  tagText(node) {\n    node.fill({\n      color: '#fff'\n    }).css({\n      'font-size': '12px'\n    });\n  }\n\n  //  标签矩形\n  tagRect(node, text, color) {\n    node.fill({\n      color: color || generateColorByContent(text.node.textContent)\n    });\n  }\n\n  //  内置图标\n  iconNode(node) {\n    node.attr({\n      fill: this.merge('color')\n    });\n  }\n\n  //  连线\n  line(line, {\n    width,\n    color,\n    dasharray\n  } = {}, enableMarker, childNode) {\n    line.stroke({\n      color,\n      dasharray,\n      width\n    }).fill({\n      color: 'none'\n    });\n    // 可以显示箭头\n    if (enableMarker) {\n      const showMarker = this.merge('showLineMarker', true);\n      const childNodeStyle = childNode.style;\n      // 显示箭头\n      if (showMarker) {\n        // 创建子节点箭头标记\n        childNodeStyle._marker = childNodeStyle._marker || childNodeStyle.createMarker();\n        // 设置样式\n        childNodeStyle._markerPath.stroke({\n          color\n        }).fill({\n          color\n        });\n        // 箭头位置可能会发生改变，所以需要先删除\n        line.attr('marker-start', '');\n        line.attr('marker-end', '');\n        const dir = childNodeStyle.merge('lineMarkerDir');\n        line.marker(dir, childNodeStyle._marker);\n      } else if (childNodeStyle._marker) {\n        // 不显示箭头，则删除该子节点的箭头标记\n        line.attr('marker-start', '');\n        line.attr('marker-end', '');\n        childNodeStyle._marker.remove();\n        childNodeStyle._marker = null;\n      }\n    }\n  }\n\n  // 创建箭头\n  createMarker() {\n    return this.ctx.lineDraw.marker(20, 20, add => {\n      add.ref(8, 5);\n      add.size(20, 20);\n      add.attr('markerUnits', 'userSpaceOnUse');\n      add.attr('orient', 'auto-start-reverse');\n      this._markerPath = add.path('M0,0 L2,5 L0,10 L10,5 Z');\n    });\n  }\n\n  //  概要连线\n  generalizationLine(node) {\n    node.stroke({\n      width: this.merge('generalizationLineWidth', true),\n      color: this.merge('generalizationLineColor', true)\n    }).fill({\n      color: 'none'\n    });\n  }\n\n  //  展开收起按钮\n  iconBtn(node, node2, fillNode) {\n    let {\n      color,\n      fill,\n      fontSize,\n      fontColor\n    } = this.ctx.mindMap.opt.expandBtnStyle || {\n      color: '#808080',\n      fill: '#fff',\n      fontSize: 12,\n      strokeColor: '#333333',\n      fontColor: '#333333'\n    };\n    node.fill({\n      color: color\n    });\n    node2.fill({\n      color: color\n    });\n    fillNode.fill({\n      color: fill\n    });\n    if (this.ctx.mindMap.opt.isShowExpandNum) {\n      node.attr({\n        'font-size': fontSize,\n        'font-color': fontColor\n      });\n    }\n  }\n\n  // 是否设置了自定义的样式\n  hasCustomStyle() {\n    let res = false;\n    Object.keys(this.ctx.getData()).forEach(item => {\n      if (checkIsNodeStyleDataKey(item)) {\n        res = true;\n      }\n    });\n    return res;\n  }\n\n  // hover和激活节点\n  hoverNode(node) {\n    const {\n      hoverRectColor\n    } = this.ctx.mindMap.opt;\n    node.radius(5).fill('none').stroke({\n      color: hoverRectColor\n    });\n  }\n\n  // 所属节点被删除时的操作\n  onRemove() {\n    if (this._marker) {\n      this._marker.remove();\n      this._marker = null;\n    }\n    if (this._markerPath) {\n      this._markerPath.remove();\n      this._markerPath = null;\n    }\n    if (this._gradient) {\n      this._gradient.remove();\n      this._gradient = null;\n    }\n  }\n}\nStyle.cacheStyle = null;\nexport default Style;","map":{"version":3,"names":["checkIsNodeStyleDataKey","generateColorByContent","Gradient","rootProp","backgroundStyleProps","Style","setBackgroundStyle","el","themeConfig","cacheStyle","style","window","getComputedStyle","forEach","prop","backgroundColor","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","removeBackgroundStyle","constructor","ctx","_markerPath","_marker","_gradient","merge","root","mindMap","defaultConfig","node","includes","isGeneralization","generalization","layerIndex","second","getSelfStyle","undefined","getStyle","getData","rect","shape","radius","nodeDraw","gradient","update","add","stop","fill","color","stroke","width","dasharray","text","css","createStyleText","getTextFontStyle","italic","bold","fontSize","fontFamily","domText","fontSizeScale","isMultiLine","fontWeight","lineHeight","fontStyle","tagText","tagRect","textContent","iconNode","attr","line","enableMarker","childNode","showMarker","childNodeStyle","createMarker","dir","marker","remove","lineDraw","ref","size","path","generalizationLine","iconBtn","node2","fillNode","fontColor","opt","expandBtnStyle","strokeColor","isShowExpandNum","hasCustomStyle","res","Object","keys","item","hoverNode","hoverRectColor","onRemove"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/node/Style.js"],"sourcesContent":["import {\r\n  checkIsNodeStyleDataKey,\r\n  generateColorByContent\r\n} from '../../../utils/index'\r\nimport { Gradient } from '@svgdotjs/svg.js'\r\n\r\nconst rootProp = ['paddingX', 'paddingY']\r\nconst backgroundStyleProps = [\r\n  'backgroundColor',\r\n  'backgroundImage',\r\n  'backgroundRepeat',\r\n  'backgroundPosition',\r\n  'backgroundSize'\r\n]\r\n\r\n//  样式类\r\nclass Style {\r\n  //   设置背景样式\r\n  static setBackgroundStyle(el, themeConfig) {\r\n    // 缓存容器元素原本的样式\r\n    if (!Style.cacheStyle) {\r\n      Style.cacheStyle = {}\r\n      let style = window.getComputedStyle(el)\r\n      backgroundStyleProps.forEach(prop => {\r\n        Style.cacheStyle[prop] = style[prop]\r\n      })\r\n    }\r\n    // 设置新样式\r\n    let {\r\n      backgroundColor,\r\n      backgroundImage,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n      backgroundSize\r\n    } = themeConfig\r\n    el.style.backgroundColor = backgroundColor\r\n    if (backgroundImage && backgroundImage !== 'none') {\r\n      el.style.backgroundImage = `url(${backgroundImage})`\r\n      el.style.backgroundRepeat = backgroundRepeat\r\n      el.style.backgroundPosition = backgroundPosition\r\n      el.style.backgroundSize = backgroundSize\r\n    } else {\r\n      el.style.backgroundImage = 'none'\r\n    }\r\n  }\r\n\r\n  // 移除背景样式\r\n  static removeBackgroundStyle(el) {\r\n    if (!Style.cacheStyle) return\r\n    backgroundStyleProps.forEach(prop => {\r\n      el.style[prop] = Style.cacheStyle[prop]\r\n    })\r\n    Style.cacheStyle = null\r\n  }\r\n\r\n  //  构造函数\r\n  constructor(ctx) {\r\n    this.ctx = ctx\r\n    // 箭头图标\r\n    this._markerPath = null\r\n    this._marker = null\r\n    // 渐变背景\r\n    this._gradient = null\r\n  }\r\n\r\n  //  合并样式\r\n  merge(prop, root) {\r\n    let themeConfig = this.ctx.mindMap.themeConfig\r\n    // 三级及以下节点\r\n    let defaultConfig = themeConfig.node\r\n    if (root || rootProp.includes(prop)) {\r\n      // 直接使用最外层样式\r\n      defaultConfig = themeConfig\r\n    } else if (this.ctx.isGeneralization) {\r\n      // 概要节点\r\n      defaultConfig = themeConfig.generalization\r\n    } else if (this.ctx.layerIndex === 0) {\r\n      // 根节点\r\n      defaultConfig = themeConfig.root\r\n    } else if (this.ctx.layerIndex === 1) {\r\n      // 二级节点\r\n      defaultConfig = themeConfig.second\r\n    }\r\n    // 优先使用节点本身的样式\r\n    return this.getSelfStyle(prop) !== undefined\r\n      ? this.getSelfStyle(prop)\r\n      : defaultConfig[prop]\r\n  }\r\n\r\n  //  获取某个样式值\r\n  getStyle(prop, root) {\r\n    return this.merge(prop, root)\r\n  }\r\n\r\n  //  获取自身自定义样式\r\n  getSelfStyle(prop) {\r\n    return this.ctx.getData(prop)\r\n  }\r\n\r\n  //  矩形\r\n  rect(node) {\r\n    this.shape(node)\r\n    node.radius(this.merge('borderRadius'))\r\n  }\r\n\r\n  // 形状\r\n  shape(node) {\r\n    if (this.merge('gradientStyle')) {\r\n      if (!this._gradient) {\r\n        this._gradient = this.ctx.nodeDraw.gradient('linear')\r\n      }\r\n      this._gradient.update(add => {\r\n        add.stop(0, this.merge('startColor'))\r\n        add.stop(1, this.merge('endColor'))\r\n      })\r\n      node.fill(this._gradient)\r\n    } else {\r\n      node.fill({\r\n        color: this.merge('fillColor')\r\n      })\r\n    }\r\n    // 节点使用横线样式，不需要渲染非激活状态的边框样式\r\n    // if (\r\n    //   !this.ctx.isRoot &&\r\n    //   !this.ctx.isGeneralization &&\r\n    //   this.ctx.mindMap.themeConfig.nodeUseLineStyle &&\r\n    //   !this.ctx.getData('isActive')\r\n    // ) {\r\n    //   return\r\n    // }\r\n    node.stroke({\r\n      color: this.merge('borderColor'),\r\n      width: this.merge('borderWidth'),\r\n      dasharray: this.merge('borderDasharray')\r\n    })\r\n  }\r\n\r\n  //  文字\r\n  text(node) {\r\n    node\r\n      .fill({\r\n        color: this.merge('color')\r\n      })\r\n      .css({\r\n        'font-family': this.merge('fontFamily'),\r\n        'font-size': this.merge('fontSize'),\r\n        'font-weight': this.merge('fontWeight'),\r\n        'font-style': this.merge('fontStyle'),\r\n        'text-decoration': this.merge('textDecoration')\r\n      })\r\n  }\r\n\r\n  // 生成内联样式\r\n  createStyleText() {\r\n    return `\r\n      color: ${this.merge('color')};\r\n      font-family: ${this.merge('fontFamily')};\r\n      font-size: ${this.merge('fontSize') + 'px'};\r\n      font-weight: ${this.merge('fontWeight')};\r\n      font-style: ${this.merge('fontStyle')};\r\n      text-decoration: ${this.merge('textDecoration')}\r\n    `\r\n  }\r\n\r\n  // 获取文本样式\r\n  getTextFontStyle() {\r\n    return {\r\n      italic: this.merge('fontStyle') === 'italic',\r\n      bold: this.merge('fontWeight'),\r\n      fontSize: this.merge('fontSize'),\r\n      fontFamily: this.merge('fontFamily')\r\n    }\r\n  }\r\n\r\n  //  html文字节点\r\n  domText(node, fontSizeScale = 1, isMultiLine) {\r\n    node.style.fontFamily = this.merge('fontFamily')\r\n    node.style.fontSize = this.merge('fontSize') * fontSizeScale + 'px'\r\n    node.style.fontWeight = this.merge('fontWeight') || 'normal'\r\n    node.style.lineHeight = !isMultiLine ? 'normal' : this.merge('lineHeight')\r\n    node.style.fontStyle = this.merge('fontStyle')\r\n  }\r\n\r\n  //  标签文字\r\n  tagText(node) {\r\n    node\r\n      .fill({\r\n        color: '#fff'\r\n      })\r\n      .css({\r\n        'font-size': '12px'\r\n      })\r\n  }\r\n\r\n  //  标签矩形\r\n  tagRect(node, text, color) {\r\n    node.fill({\r\n      color: color || generateColorByContent(text.node.textContent)\r\n    })\r\n  }\r\n\r\n  //  内置图标\r\n  iconNode(node) {\r\n    node.attr({\r\n      fill: this.merge('color')\r\n    })\r\n  }\r\n\r\n  //  连线\r\n  line(line, { width, color, dasharray } = {}, enableMarker, childNode) {\r\n    line.stroke({ color, dasharray, width }).fill({ color: 'none' })\r\n    // 可以显示箭头\r\n    if (enableMarker) {\r\n      const showMarker = this.merge('showLineMarker', true)\r\n      const childNodeStyle = childNode.style\r\n      // 显示箭头\r\n      if (showMarker) {\r\n        // 创建子节点箭头标记\r\n        childNodeStyle._marker =\r\n          childNodeStyle._marker || childNodeStyle.createMarker()\r\n        // 设置样式\r\n        childNodeStyle._markerPath.stroke({ color }).fill({ color })\r\n        // 箭头位置可能会发生改变，所以需要先删除\r\n        line.attr('marker-start', '')\r\n        line.attr('marker-end', '')\r\n        const dir = childNodeStyle.merge('lineMarkerDir')\r\n        line.marker(dir, childNodeStyle._marker)\r\n      } else if (childNodeStyle._marker) {\r\n        // 不显示箭头，则删除该子节点的箭头标记\r\n        line.attr('marker-start', '')\r\n        line.attr('marker-end', '')\r\n        childNodeStyle._marker.remove()\r\n        childNodeStyle._marker = null\r\n      }\r\n    }\r\n  }\r\n\r\n  // 创建箭头\r\n  createMarker() {\r\n    return this.ctx.lineDraw.marker(20, 20, add => {\r\n      add.ref(8, 5)\r\n      add.size(20, 20)\r\n      add.attr('markerUnits', 'userSpaceOnUse')\r\n      add.attr('orient', 'auto-start-reverse')\r\n      this._markerPath = add.path('M0,0 L2,5 L0,10 L10,5 Z')\r\n    })\r\n  }\r\n\r\n  //  概要连线\r\n  generalizationLine(node) {\r\n    node\r\n      .stroke({\r\n        width: this.merge('generalizationLineWidth', true),\r\n        color: this.merge('generalizationLineColor', true)\r\n      })\r\n      .fill({ color: 'none' })\r\n  }\r\n\r\n  //  展开收起按钮\r\n  iconBtn(node, node2, fillNode) {\r\n    let { color, fill, fontSize, fontColor } = this.ctx.mindMap.opt\r\n      .expandBtnStyle || {\r\n      color: '#808080',\r\n      fill: '#fff',\r\n      fontSize: 12,\r\n      strokeColor: '#333333',\r\n      fontColor: '#333333'\r\n    }\r\n    node.fill({ color: color })\r\n    node2.fill({ color: color })\r\n    fillNode.fill({ color: fill })\r\n    if (this.ctx.mindMap.opt.isShowExpandNum) {\r\n      node.attr({ 'font-size': fontSize, 'font-color': fontColor })\r\n    }\r\n  }\r\n\r\n  // 是否设置了自定义的样式\r\n  hasCustomStyle() {\r\n    let res = false\r\n    Object.keys(this.ctx.getData()).forEach(item => {\r\n      if (checkIsNodeStyleDataKey(item)) {\r\n        res = true\r\n      }\r\n    })\r\n    return res\r\n  }\r\n\r\n  // hover和激活节点\r\n  hoverNode(node) {\r\n    const { hoverRectColor } = this.ctx.mindMap.opt\r\n    node.radius(5).fill('none').stroke({\r\n      color: hoverRectColor\r\n    })\r\n  }\r\n\r\n  // 所属节点被删除时的操作\r\n  onRemove() {\r\n    if (this._marker) {\r\n      this._marker.remove()\r\n      this._marker = null\r\n    }\r\n    if (this._markerPath) {\r\n      this._markerPath.remove()\r\n      this._markerPath = null\r\n    }\r\n    if (this._gradient) {\r\n      this._gradient.remove()\r\n      this._gradient = null\r\n    }\r\n  }\r\n}\r\n\r\nStyle.cacheStyle = null\r\n\r\nexport default Style\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}