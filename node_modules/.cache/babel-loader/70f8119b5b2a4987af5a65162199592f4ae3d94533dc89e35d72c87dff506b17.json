{"ast":null,"code":"import { degToRad } from '../utils/';\nexport default {\n  top: {\n    renderExpandBtn({\n      node,\n      btn,\n      expandBtnSize,\n      translateX,\n      translateY,\n      width,\n      height\n    }) {\n      if (node.parent && node.parent.isRoot) {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, -expandBtnSize / 2 - translateY);\n      } else {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY);\n      }\n    },\n    renderLine({\n      node,\n      line,\n      top,\n      x,\n      lineLength,\n      height,\n      expandBtnSize,\n      maxy,\n      ctx\n    }) {\n      if (node.parent && node.parent.isRoot) {\n        line.plot(ctx.transformPath(`M ${x},${top} L ${x + lineLength},${top - Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg)) * lineLength}`));\n      } else {\n        line.plot(ctx.transformPath(`M ${x},${top + height + expandBtnSize} L ${x},${maxy}`));\n      }\n    },\n    computedLeftTopValue({\n      layerIndex,\n      node,\n      ctx\n    }) {\n      if (layerIndex >= 1 && node.children) {\n        // 遍历三级及以下节点的子节点\n        let marginY = ctx.getMarginY(layerIndex + 1);\n        let startLeft = node.left + node.width * ctx.childIndent;\n        let totalTop = node.top + node.height + (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) + marginY;\n        node.children.forEach(item => {\n          item.left = startLeft;\n          item.top += totalTop;\n          totalTop += item.height + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) + marginY;\n        });\n      }\n    },\n    adjustLeftTopValueBefore({\n      node,\n      parent,\n      ctx,\n      layerIndex\n    }) {\n      // 调整top\n      let len = node.children.length;\n      let marginY = ctx.getMarginY(layerIndex + 1);\n      // 调整三级及以下节点的top\n      if (parent && !parent.isRoot && len > 0) {\n        let totalHeight = node.children.reduce((h, item) => {\n          return h + item.height + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) + marginY;\n        }, 0);\n        ctx.updateBrothersTop(node, totalHeight);\n      }\n    },\n    adjustLeftTopValueAfter({\n      parent,\n      node,\n      ctx\n    }) {\n      // 将二级节点的子节点移到上方\n      if (parent && parent.isRoot) {\n        // 遍历二级节点的子节点\n        let marginY = ctx.getMarginY(node.layerIndex + 1);\n        let totalHeight = node.expandBtnSize + marginY;\n        node.children.forEach(item => {\n          // 调整top\n          let nodeTotalHeight = ctx.getNodeAreaHeight(item);\n          let _top = item.top;\n          let _left = item.left;\n          item.top = node.top - (item.top - node.top) - nodeTotalHeight + node.height;\n          // 调整left\n          item.left = node.left + node.width * ctx.indent + (nodeTotalHeight + totalHeight) / Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg));\n          totalHeight += nodeTotalHeight;\n          // 同步更新后代节点\n          ctx.updateChildrenPro(item.children, {\n            top: item.top - _top,\n            left: item.left - _left\n          });\n        });\n      }\n    }\n  },\n  bottom: {\n    renderExpandBtn({\n      node,\n      btn,\n      expandBtnSize,\n      translateX,\n      translateY,\n      width,\n      height\n    }) {\n      if (node.parent && node.parent.isRoot) {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY);\n      } else {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, -expandBtnSize / 2 - translateY);\n      }\n    },\n    renderLine({\n      node,\n      line,\n      top,\n      x,\n      lineLength,\n      height,\n      miny,\n      ctx\n    }) {\n      if (node.parent && node.parent.isRoot) {\n        line.plot(ctx.transformPath(`M ${x},${top + height} L ${x + lineLength},${top + height + Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg)) * lineLength}`));\n      } else {\n        line.plot(ctx.transformPath(`M ${x},${top} L ${x},${miny}`));\n      }\n    },\n    computedLeftTopValue({\n      layerIndex,\n      node,\n      ctx\n    }) {\n      let marginY = ctx.getMarginY(layerIndex + 1);\n      if (layerIndex === 1 && node.children) {\n        // 遍历二级节点的子节点\n        let startLeft = node.left + node.width * ctx.childIndent;\n        let totalTop = node.top + node.height + (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) + marginY;\n        node.children.forEach(item => {\n          item.left = startLeft;\n          item.top = totalTop + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0);\n          totalTop += item.height + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) + marginY;\n        });\n      }\n      if (layerIndex > 1 && node.children) {\n        // 遍历三级及以下节点的子节点\n        let startLeft = node.left + node.width * ctx.childIndent;\n        let totalTop = node.top - (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) - marginY;\n        node.children.forEach(item => {\n          item.left = startLeft;\n          item.top = totalTop - item.height;\n          totalTop -= item.height + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) + marginY;\n        });\n      }\n    },\n    adjustLeftTopValueBefore({\n      node,\n      ctx,\n      layerIndex\n    }) {\n      // 调整top\n      let marginY = ctx.getMarginY(layerIndex + 1);\n      let len = node.children.length;\n      if (layerIndex > 2 && len > 0) {\n        let totalHeight = node.children.reduce((h, item) => {\n          return h + item.height + (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) + marginY;\n        }, 0);\n        ctx.updateBrothersTop(node, -totalHeight);\n      }\n    },\n    adjustLeftTopValueAfter({\n      parent,\n      node,\n      ctx\n    }) {\n      // 将二级节点的子节点移到上方\n      if (parent && parent.isRoot) {\n        // 遍历二级节点的子节点\n        let marginY = ctx.getMarginY(node.layerIndex + 1);\n        let totalHeight = 0;\n        let totalHeight2 = node.expandBtnSize;\n        node.children.forEach(item => {\n          // 调整top\n          let hasChildren = ctx.getNodeActChildrenLength(item) > 0;\n          let nodeTotalHeight = ctx.getNodeAreaHeight(item);\n          let offset = hasChildren ? nodeTotalHeight - item.height - (hasChildren ? item.expandBtnSize : 0) : 0;\n          offset -= hasChildren ? marginY : 0;\n          let _top = totalHeight + offset;\n          let _left = item.left;\n          item.top += _top;\n          // 调整left\n          item.left = node.left + node.width * ctx.indent + (nodeTotalHeight + totalHeight2) / Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg));\n          totalHeight += offset;\n          totalHeight2 += nodeTotalHeight;\n          // 同步更新后代节点\n          ctx.updateChildrenPro(item.children, {\n            top: _top,\n            left: item.left - _left\n          });\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["degToRad","top","renderExpandBtn","node","btn","expandBtnSize","translateX","translateY","width","height","parent","isRoot","translate","renderLine","line","x","lineLength","maxy","ctx","plot","transformPath","Math","tan","mindMap","opt","fishboneDeg","computedLeftTopValue","layerIndex","children","marginY","getMarginY","startLeft","left","childIndent","totalTop","getNodeActChildrenLength","forEach","item","adjustLeftTopValueBefore","len","length","totalHeight","reduce","h","updateBrothersTop","adjustLeftTopValueAfter","nodeTotalHeight","getNodeAreaHeight","_top","_left","indent","updateChildrenPro","bottom","miny","totalHeight2","hasChildren","offset"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/fishboneUtils.js"],"sourcesContent":["import { degToRad } from '../utils/'\r\n\r\nexport default {\r\n  top: {\r\n    renderExpandBtn({\r\n      node,\r\n      btn,\r\n      expandBtnSize,\r\n      translateX,\r\n      translateY,\r\n      width,\r\n      height\r\n    }) {\r\n      if (node.parent && node.parent.isRoot) {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          -expandBtnSize / 2 - translateY\r\n        )\r\n      } else {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          height + expandBtnSize / 2 - translateY\r\n        )\r\n      }\r\n    },\r\n    renderLine({\r\n      node,\r\n      line,\r\n      top,\r\n      x,\r\n      lineLength,\r\n      height,\r\n      expandBtnSize,\r\n      maxy,\r\n      ctx\r\n    }) {\r\n      if (node.parent && node.parent.isRoot) {\r\n        line.plot(\r\n          ctx.transformPath(\r\n            `M ${x},${top} L ${x + lineLength},${\r\n              top - Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg)) * lineLength\r\n            }`\r\n          )\r\n        )\r\n      } else {\r\n        line.plot(\r\n          ctx.transformPath(\r\n            `M ${x},${top + height + expandBtnSize} L ${x},${maxy}`\r\n          )\r\n        )\r\n      }\r\n    },\r\n    computedLeftTopValue({ layerIndex, node, ctx }) {\r\n      if (layerIndex >= 1 && node.children) {\r\n        // 遍历三级及以下节点的子节点\r\n        let marginY = ctx.getMarginY(layerIndex + 1)\r\n        let startLeft = node.left + node.width * ctx.childIndent\r\n        let totalTop =\r\n          node.top +\r\n          node.height +\r\n          (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) +\r\n          marginY\r\n        node.children.forEach(item => {\r\n          item.left = startLeft\r\n          item.top += totalTop\r\n          totalTop +=\r\n            item.height +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) +\r\n            marginY\r\n        })\r\n      }\r\n    },\r\n    adjustLeftTopValueBefore({ node, parent, ctx, layerIndex }) {\r\n      // 调整top\r\n      let len = node.children.length\r\n      let marginY = ctx.getMarginY(layerIndex + 1)\r\n      // 调整三级及以下节点的top\r\n      if (parent && !parent.isRoot && len > 0) {\r\n        let totalHeight = node.children.reduce((h, item) => {\r\n          return (\r\n            h +\r\n            item.height +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) +\r\n            marginY\r\n          )\r\n        }, 0)\r\n        ctx.updateBrothersTop(node, totalHeight)\r\n      }\r\n    },\r\n    adjustLeftTopValueAfter({ parent, node, ctx }) {\r\n      // 将二级节点的子节点移到上方\r\n      if (parent && parent.isRoot) {\r\n        // 遍历二级节点的子节点\r\n        let marginY = ctx.getMarginY(node.layerIndex + 1)\r\n        let totalHeight = node.expandBtnSize + marginY\r\n        node.children.forEach(item => {\r\n          // 调整top\r\n          let nodeTotalHeight = ctx.getNodeAreaHeight(item)\r\n          let _top = item.top\r\n          let _left = item.left\r\n          item.top =\r\n            node.top - (item.top - node.top) - nodeTotalHeight + node.height\r\n          // 调整left\r\n          item.left =\r\n            node.left +\r\n            node.width * ctx.indent +\r\n            (nodeTotalHeight + totalHeight) /\r\n              Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg))\r\n          totalHeight += nodeTotalHeight\r\n          // 同步更新后代节点\r\n          ctx.updateChildrenPro(item.children, {\r\n            top: item.top - _top,\r\n            left: item.left - _left\r\n          })\r\n        })\r\n      }\r\n    }\r\n  },\r\n  bottom: {\r\n    renderExpandBtn({\r\n      node,\r\n      btn,\r\n      expandBtnSize,\r\n      translateX,\r\n      translateY,\r\n      width,\r\n      height\r\n    }) {\r\n      if (node.parent && node.parent.isRoot) {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          height + expandBtnSize / 2 - translateY\r\n        )\r\n      } else {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          -expandBtnSize / 2 - translateY\r\n        )\r\n      }\r\n    },\r\n    renderLine({ node, line, top, x, lineLength, height, miny, ctx }) {\r\n      if (node.parent && node.parent.isRoot) {\r\n        line.plot(\r\n          ctx.transformPath(\r\n            `M ${x},${top + height} L ${x + lineLength},${\r\n              top +\r\n              height +\r\n              Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg)) * lineLength\r\n            }`\r\n          )\r\n        )\r\n      } else {\r\n        line.plot(ctx.transformPath(`M ${x},${top} L ${x},${miny}`))\r\n      }\r\n    },\r\n    computedLeftTopValue({ layerIndex, node, ctx }) {\r\n      let marginY = ctx.getMarginY(layerIndex + 1)\r\n      if (layerIndex === 1 && node.children) {\r\n        // 遍历二级节点的子节点\r\n        let startLeft = node.left + node.width * ctx.childIndent\r\n        let totalTop =\r\n          node.top +\r\n          node.height +\r\n          (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) +\r\n          marginY\r\n\r\n        node.children.forEach(item => {\r\n          item.left = startLeft\r\n          item.top =\r\n            totalTop +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0)\r\n          totalTop +=\r\n            item.height +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) +\r\n            marginY\r\n        })\r\n      }\r\n      if (layerIndex > 1 && node.children) {\r\n        // 遍历三级及以下节点的子节点\r\n        let startLeft = node.left + node.width * ctx.childIndent\r\n        let totalTop =\r\n          node.top -\r\n          (ctx.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) -\r\n          marginY\r\n        node.children.forEach(item => {\r\n          item.left = startLeft\r\n          item.top = totalTop - item.height\r\n          totalTop -=\r\n            item.height +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) +\r\n            marginY\r\n        })\r\n      }\r\n    },\r\n    adjustLeftTopValueBefore({ node, ctx, layerIndex }) {\r\n      // 调整top\r\n      let marginY = ctx.getMarginY(layerIndex + 1)\r\n      let len = node.children.length\r\n      if (layerIndex > 2 && len > 0) {\r\n        let totalHeight = node.children.reduce((h, item) => {\r\n          return (\r\n            h +\r\n            item.height +\r\n            (ctx.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0) +\r\n            marginY\r\n          )\r\n        }, 0)\r\n        ctx.updateBrothersTop(node, -totalHeight)\r\n      }\r\n    },\r\n    adjustLeftTopValueAfter({ parent, node, ctx }) {\r\n      // 将二级节点的子节点移到上方\r\n      if (parent && parent.isRoot) {\r\n        // 遍历二级节点的子节点\r\n        let marginY = ctx.getMarginY(node.layerIndex + 1)\r\n        let totalHeight = 0\r\n        let totalHeight2 = node.expandBtnSize\r\n        node.children.forEach(item => {\r\n          // 调整top\r\n          let hasChildren = ctx.getNodeActChildrenLength(item) > 0\r\n          let nodeTotalHeight = ctx.getNodeAreaHeight(item)\r\n          let offset = hasChildren\r\n            ? nodeTotalHeight -\r\n              item.height -\r\n              (hasChildren ? item.expandBtnSize : 0)\r\n            : 0\r\n          offset -= hasChildren ? marginY : 0\r\n          let _top = totalHeight + offset\r\n          let _left = item.left\r\n          item.top += _top\r\n          // 调整left\r\n          item.left =\r\n            node.left +\r\n            node.width * ctx.indent +\r\n            (nodeTotalHeight + totalHeight2) /\r\n              Math.tan(degToRad(ctx.mindMap.opt.fishboneDeg))\r\n          totalHeight += offset\r\n          totalHeight2 += nodeTotalHeight\r\n          // 同步更新后代节点\r\n          ctx.updateChildrenPro(item.children, {\r\n            top: _top,\r\n            left: item.left - _left\r\n          })\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}