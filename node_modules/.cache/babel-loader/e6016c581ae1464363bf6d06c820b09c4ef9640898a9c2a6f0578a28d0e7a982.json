{"ast":null,"code":"import { hex, isHex, isRgb, rgb, whitespace } from '../modules/core/regex.js';\nfunction sixDigitHex(hex) {\n  return hex.length === 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n}\nfunction componentHex(component) {\n  const integer = Math.round(component);\n  const bounded = Math.max(0, Math.min(255, integer));\n  const hex = bounded.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}\nfunction is(object, space) {\n  for (let i = space.length; i--;) {\n    if (object[space[i]] == null) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb') ? {\n    _a: a.r,\n    _b: a.g,\n    _c: a.b,\n    _d: 0,\n    space: 'rgb'\n  } : is(a, 'xyz') ? {\n    _a: a.x,\n    _b: a.y,\n    _c: a.z,\n    _d: 0,\n    space: 'xyz'\n  } : is(a, 'hsl') ? {\n    _a: a.h,\n    _b: a.s,\n    _c: a.l,\n    _d: 0,\n    space: 'hsl'\n  } : is(a, 'lab') ? {\n    _a: a.l,\n    _b: a.a,\n    _c: a.b,\n    _d: 0,\n    space: 'lab'\n  } : is(a, 'lch') ? {\n    _a: a.l,\n    _b: a.c,\n    _c: a.h,\n    _d: 0,\n    space: 'lch'\n  } : is(a, 'cmyk') ? {\n    _a: a.c,\n    _b: a.m,\n    _c: a.y,\n    _d: a.k,\n    space: 'cmyk'\n  } : {\n    _a: 0,\n    _b: 0,\n    _c: 0,\n    space: 'rgb'\n  };\n  params.space = b || params.space;\n  return params;\n}\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\nexport default class Color {\n  constructor(...inputs) {\n    this.init(...inputs);\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return color && (color instanceof Color || this.isRgb(color) || this.test(color));\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const {\n      random,\n      round,\n      sin,\n      PI: pi\n    } = Math;\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57;\n      const c = (83 - 45) * random() + 45;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t;\n      const r = round(80 * sin(2 * pi * t / 0.5 + 0.01) + 150);\n      const g = round(50 * sin(2 * pi * t / 0.5 + 4.6) + 200);\n      const b = round(100 * sin(2 * pi * t / 0.5 + 2.3) + 150);\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86;\n      const c = (26 - 9) * random() + 9;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random();\n      const c = (125 - 75) * random() + 86;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'rgb') {\n      const r = 255 * random();\n      const g = 255 * random();\n      const b = 255 * random();\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'lab') {\n      const l = 100 * random();\n      const a = 256 * random() - 128;\n      const b = 256 * random() - 128;\n      const color = new Color(l, a, b, 'lab');\n      return color;\n    } else if (mode === 'grey') {\n      const grey = 255 * random();\n      const color = new Color(grey, grey, grey);\n      return color;\n    } else {\n      throw new Error('Unsupported random color mode');\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color));\n  }\n  cmyk() {\n    // Get the rgb values for the current color\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255);\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b);\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk');\n    }\n    const c = (1 - r - k) / (1 - k);\n    const m = (1 - g - k) / (1 - k);\n    const y = (1 - b - k) / (1 - k);\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk');\n    return color;\n  }\n  hsl() {\n    // Get the rgb values\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255);\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min;\n\n    // Calculate the hue and saturation\n    const delta = max - min;\n    const s = isGrey ? 0 : l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    const h = isGrey ? 0 : max === r ? ((g - b) / delta + (g < b ? 6 : 0)) / 6 : max === g ? ((b - r) / delta + 2) / 6 : max === b ? ((r - g) / delta + 4) / 6 : 0;\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl');\n    return color;\n  }\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a;\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]];\n      }\n    }\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space;\n      d = typeof d === 'string' ? 0 : d;\n\n      // Assign the values straight to the color\n      Object.assign(this, {\n        _a: a,\n        _b: b,\n        _c: c,\n        _d: d,\n        space\n      });\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb';\n      Object.assign(this, {\n        _a: a[0],\n        _b: a[1],\n        _c: a[2],\n        _d: a[3] || 0\n      });\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b);\n      Object.assign(this, values);\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '');\n        const [_a, _b, _c] = rgb.exec(noWhitespace).slice(1, 4).map(v => parseInt(v));\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else if (isHex.test(a)) {\n        const hexParse = v => parseInt(v, 16);\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse);\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else throw Error(\"Unsupported string format, can't construct Color\");\n    }\n\n    // Now add the components as a convenience\n    const {\n      _a,\n      _b,\n      _c,\n      _d\n    } = this;\n    const components = this.space === 'rgb' ? {\n      r: _a,\n      g: _b,\n      b: _c\n    } : this.space === 'xyz' ? {\n      x: _a,\n      y: _b,\n      z: _c\n    } : this.space === 'hsl' ? {\n      h: _a,\n      s: _b,\n      l: _c\n    } : this.space === 'lab' ? {\n      l: _a,\n      a: _b,\n      b: _c\n    } : this.space === 'lch' ? {\n      l: _a,\n      c: _b,\n      h: _c\n    } : this.space === 'cmyk' ? {\n      c: _a,\n      m: _b,\n      y: _c,\n      k: _d\n    } : {};\n    Object.assign(this, components);\n  }\n  lab() {\n    // Get the xyz color\n    const {\n      x,\n      y,\n      z\n    } = this.xyz();\n\n    // Get the lab components\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab');\n    return color;\n  }\n  lch() {\n    // Get the lab color directly\n    const {\n      l,\n      a,\n      b\n    } = this.lab();\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2);\n    let h = 180 * Math.atan2(b, a) / Math.PI;\n    if (h < 0) {\n      h *= -1;\n      h = 360 - h;\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch');\n    return color;\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this;\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let {\n        x,\n        y,\n        z\n      } = this;\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let {\n          l,\n          a,\n          b\n        } = this;\n        if (this.space === 'lch') {\n          const {\n            c,\n            h\n          } = this;\n          const dToR = Math.PI / 180;\n          a = c * Math.cos(dToR * h);\n          b = c * Math.sin(dToR * h);\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116;\n        const xL = a / 500 + yL;\n        const zL = yL - b / 200;\n\n        // Get the xyz values\n        const ct = 16 / 116;\n        const mx = 0.008856;\n        const nm = 7.787;\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm);\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm);\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm);\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986;\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415;\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057;\n\n      // Convert the values to true rgb values\n      const pow = Math.pow;\n      const bd = 0.0031308;\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU;\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b);\n      return color;\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let {\n        h,\n        s,\n        l\n      } = this;\n      h /= 360;\n      s /= 100;\n      l /= 100;\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255;\n        const color = new Color(l, l, l);\n        return color;\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3);\n      const g = 255 * hueToRgb(p, q, h);\n      const b = 255 * hueToRgb(p, q, h - 1 / 3);\n\n      // Make a new color\n      const color = new Color(r, g, b);\n      return color;\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const {\n        c,\n        m,\n        y,\n        k\n      } = this;\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k));\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k));\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k));\n\n      // Form the color and return it\n      const color = new Color(r, g, b);\n      return color;\n    } else {\n      return this;\n    }\n  }\n  toArray() {\n    const {\n      _a,\n      _b,\n      _c,\n      _d,\n      space\n    } = this;\n    return [_a, _b, _c, _d, space];\n  }\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex);\n    return `#${r}${g}${b}`;\n  }\n  toRgb() {\n    const [rV, gV, bV] = this._clamped();\n    const string = `rgb(${rV},${gV},${bV})`;\n    return string;\n  }\n  toString() {\n    return this.toHex();\n  }\n  xyz() {\n    // Normalise the red, green and blue values\n    const {\n      _a: r255,\n      _b: g255,\n      _c: b255\n    } = this.rgb();\n    const [r, g, b] = [r255, g255, b255].map(v => v / 255);\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0;\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883;\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116;\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz');\n    return color;\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const {\n      max,\n      min,\n      round\n    } = Math;\n    const format = v => max(0, min(round(v), 255));\n    return [_a, _b, _c].map(format);\n  }\n\n  /*\n  Constructing colors\n  */\n}","map":{"version":3,"names":["hex","isHex","isRgb","rgb","whitespace","sixDigitHex","length","substring","join","componentHex","component","integer","Math","round","bounded","max","min","toString","is","object","space","i","getParameters","a","b","params","_a","r","_b","g","_c","_d","x","y","z","h","s","l","c","m","k","cieSpace","hueToRgb","p","q","t","Color","constructor","inputs","init","isColor","color","test","random","mode","sin","PI","pi","grey","Error","cmyk","map","v","hsl","isGrey","delta","d","Object","assign","Array","values","noWhitespace","replace","exec","slice","parseInt","hexParse","components","lab","xyz","lch","sqrt","atan2","dToR","cos","yL","xL","zL","ct","mx","nm","rU","gU","bU","pow","bd","toArray","toHex","_clamped","toRgb","rV","gV","bV","string","r255","g255","b255","rL","gL","bL","xU","yU","zU","format"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/types/Color.js"],"sourcesContent":["import { hex, isHex, isRgb, rgb, whitespace } from '../modules/core/regex.js'\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4\n    ? [\n        '#',\n        hex.substring(1, 2),\n        hex.substring(1, 2),\n        hex.substring(2, 3),\n        hex.substring(2, 3),\n        hex.substring(3, 4),\n        hex.substring(3, 4)\n      ].join('')\n    : hex\n}\n\nfunction componentHex(component) {\n  const integer = Math.round(component)\n  const bounded = Math.max(0, Math.min(255, integer))\n  const hex = bounded.toString(16)\n  return hex.length === 1 ? '0' + hex : hex\n}\n\nfunction is(object, space) {\n  for (let i = space.length; i--; ) {\n    if (object[space[i]] == null) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb')\n    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }\n    : is(a, 'xyz')\n      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }\n      : is(a, 'hsl')\n        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }\n        : is(a, 'lab')\n          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }\n          : is(a, 'lch')\n            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }\n            : is(a, 'cmyk')\n              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }\n              : { _a: 0, _b: 0, _c: 0, space: 'rgb' }\n\n  params.space = b || params.space\n  return params\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nexport default class Color {\n  constructor(...inputs) {\n    this.init(...inputs)\n  }\n\n  // Test if given value is a color\n  static isColor(color) {\n    return (\n      color && (color instanceof Color || this.isRgb(color) || this.test(color))\n    )\n  }\n\n  // Test if given value is an rgb object\n  static isRgb(color) {\n    return (\n      color &&\n      typeof color.r === 'number' &&\n      typeof color.g === 'number' &&\n      typeof color.b === 'number'\n    )\n  }\n\n  /*\n  Generating random colors\n  */\n  static random(mode = 'vibrant', t) {\n    // Get the math modules\n    const { random, round, sin, PI: pi } = Math\n\n    // Run the correct generator\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57\n      const c = (83 - 45) * random() + 45\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t\n      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150)\n      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200)\n      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150)\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86\n      const c = (26 - 9) * random() + 9\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random()\n      const c = (125 - 75) * random() + 86\n      const h = 360 * random()\n      const color = new Color(l, c, h, 'lch')\n      return color\n    } else if (mode === 'rgb') {\n      const r = 255 * random()\n      const g = 255 * random()\n      const b = 255 * random()\n      const color = new Color(r, g, b)\n      return color\n    } else if (mode === 'lab') {\n      const l = 100 * random()\n      const a = 256 * random() - 128\n      const b = 256 * random() - 128\n      const color = new Color(l, a, b, 'lab')\n      return color\n    } else if (mode === 'grey') {\n      const grey = 255 * random()\n      const color = new Color(grey, grey, grey)\n      return color\n    } else {\n      throw new Error('Unsupported random color mode')\n    }\n  }\n\n  // Test if given value is a color string\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color))\n  }\n\n  cmyk() {\n    // Get the rgb values for the current color\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Get the cmyk values in an unbounded format\n    const k = Math.min(1 - r, 1 - g, 1 - b)\n\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk')\n    }\n\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    // Construct the new color\n    const color = new Color(c, m, y, k, 'cmyk')\n    return color\n  }\n\n  hsl() {\n    // Get the rgb values\n    const { _a, _b, _c } = this.rgb()\n    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)\n\n    // Find the maximum and minimum values to get the lightness\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    const l = (max + min) / 2\n\n    // If the r, g, v values are identical then we are grey\n    const isGrey = max === min\n\n    // Calculate the hue and saturation\n    const delta = max - min\n    const s = isGrey\n      ? 0\n      : l > 0.5\n        ? delta / (2 - max - min)\n        : delta / (max + min)\n    const h = isGrey\n      ? 0\n      : max === r\n        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6\n        : max === g\n          ? ((b - r) / delta + 2) / 6\n          : max === b\n            ? ((r - g) / delta + 4) / 6\n            : 0\n\n    // Construct and return the new color\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl')\n    return color\n  }\n\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a\n\n    // Reset all values in case the init function is rerun with new color space\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]]\n      }\n    }\n\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space\n      d = typeof d === 'string' ? 0 : d\n\n      // Assign the values straight to the color\n      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space })\n      // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb'\n      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 })\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b)\n      Object.assign(this, values)\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '')\n        const [_a, _b, _c] = rgb\n          .exec(noWhitespace)\n          .slice(1, 4)\n          .map((v) => parseInt(v))\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else if (isHex.test(a)) {\n        const hexParse = (v) => parseInt(v, 16)\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse)\n        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })\n      } else throw Error(\"Unsupported string format, can't construct Color\")\n    }\n\n    // Now add the components as a convenience\n    const { _a, _b, _c, _d } = this\n    const components =\n      this.space === 'rgb'\n        ? { r: _a, g: _b, b: _c }\n        : this.space === 'xyz'\n          ? { x: _a, y: _b, z: _c }\n          : this.space === 'hsl'\n            ? { h: _a, s: _b, l: _c }\n            : this.space === 'lab'\n              ? { l: _a, a: _b, b: _c }\n              : this.space === 'lch'\n                ? { l: _a, c: _b, h: _c }\n                : this.space === 'cmyk'\n                  ? { c: _a, m: _b, y: _c, k: _d }\n                  : {}\n    Object.assign(this, components)\n  }\n\n  lab() {\n    // Get the xyz color\n    const { x, y, z } = this.xyz()\n\n    // Get the lab components\n    const l = 116 * y - 16\n    const a = 500 * (x - y)\n    const b = 200 * (y - z)\n\n    // Construct and return a new color\n    const color = new Color(l, a, b, 'lab')\n    return color\n  }\n\n  lch() {\n    // Get the lab color directly\n    const { l, a, b } = this.lab()\n\n    // Get the chromaticity and the hue using polar coordinates\n    const c = Math.sqrt(a ** 2 + b ** 2)\n    let h = (180 * Math.atan2(b, a)) / Math.PI\n    if (h < 0) {\n      h *= -1\n      h = 360 - h\n    }\n\n    // Make a new color and return it\n    const color = new Color(l, c, h, 'lch')\n    return color\n  }\n  /*\n  Conversion Methods\n  */\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let { x, y, z } = this\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let { l, a, b } = this\n        if (this.space === 'lch') {\n          const { c, h } = this\n          const dToR = Math.PI / 180\n          a = c * Math.cos(dToR * h)\n          b = c * Math.sin(dToR * h)\n        }\n\n        // Undo the nonlinear function\n        const yL = (l + 16) / 116\n        const xL = a / 500 + yL\n        const zL = yL - b / 200\n\n        // Get the xyz values\n        const ct = 16 / 116\n        const mx = 0.008856\n        const nm = 7.787\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm)\n        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm)\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm)\n      }\n\n      // Convert xyz to unbounded rgb values\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415\n      const bU = x * 0.0557 + y * -0.204 + z * 1.057\n\n      // Convert the values to true rgb values\n      const pow = Math.pow\n      const bd = 0.0031308\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU\n\n      // Make and return the color\n      const color = new Color(255 * r, 255 * g, 255 * b)\n      return color\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let { h, s, l } = this\n      h /= 360\n      s /= 100\n      l /= 100\n\n      // If we are grey, then just make the color directly\n      if (s === 0) {\n        l *= 255\n        const color = new Color(l, l, l)\n        return color\n      }\n\n      // TODO I have no idea what this does :D If you figure it out, tell me!\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n      const p = 2 * l - q\n\n      // Get the rgb values\n      const r = 255 * hueToRgb(p, q, h + 1 / 3)\n      const g = 255 * hueToRgb(p, q, h)\n      const b = 255 * hueToRgb(p, q, h - 1 / 3)\n\n      // Make a new color\n      const color = new Color(r, g, b)\n      return color\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const { c, m, y, k } = this\n\n      // Get the rgb values\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k))\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k))\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k))\n\n      // Form the color and return it\n      const color = new Color(r, g, b)\n      return color\n    } else {\n      return this\n    }\n  }\n\n  toArray() {\n    const { _a, _b, _c, _d, space } = this\n    return [_a, _b, _c, _d, space]\n  }\n\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex)\n    return `#${r}${g}${b}`\n  }\n\n  toRgb() {\n    const [rV, gV, bV] = this._clamped()\n    const string = `rgb(${rV},${gV},${bV})`\n    return string\n  }\n\n  toString() {\n    return this.toHex()\n  }\n\n  xyz() {\n    // Normalise the red, green and blue values\n    const { _a: r255, _b: g255, _c: b255 } = this.rgb()\n    const [r, g, b] = [r255, g255, b255].map((v) => v / 255)\n\n    // Convert to the lab rgb space\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92\n\n    // Convert to the xyz color space without bounding the values\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883\n\n    // Get the proper xyz values by applying the bounding\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116\n\n    // Make and return the color\n    const color = new Color(x, y, z, 'xyz')\n    return color\n  }\n\n  /*\n  Input and Output methods\n  */\n\n  _clamped() {\n    const { _a, _b, _c } = this.rgb()\n    const { max, min, round } = Math\n    const format = (v) => max(0, min(round(v), 255))\n    return [_a, _b, _c].map(format)\n  }\n\n  /*\n  Constructing colors\n  */\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,UAAU,QAAQ,0BAA0B;AAE7E,SAASC,WAAWA,CAACL,GAAG,EAAE;EACxB,OAAOA,GAAG,CAACM,MAAM,KAAK,CAAC,GACnB,CACE,GAAG,EACHN,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBP,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBP,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBP,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBP,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBP,GAAG,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CACpB,CAACC,IAAI,CAAC,EAAE,CAAC,GACVR,GAAG;AACT;AAEA,SAASS,YAAYA,CAACC,SAAS,EAAE;EAC/B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;EACrC,MAAMI,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAEH,IAAI,CAACI,GAAG,CAAC,GAAG,EAAEL,OAAO,CAAC,CAAC;EACnD,MAAMX,GAAG,GAAGc,OAAO,CAACG,QAAQ,CAAC,EAAE,CAAC;EAChC,OAAOjB,GAAG,CAACM,MAAM,KAAK,CAAC,GAAG,GAAG,GAAGN,GAAG,GAAGA,GAAG;AAC3C;AAEA,SAASkB,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACd,MAAM,EAAEe,CAAC,EAAE,GAAI;IAChC,IAAIF,MAAM,CAACC,KAAK,CAACC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MAC5B,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAASC,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC3B,MAAMC,MAAM,GAAGP,EAAE,CAACK,CAAC,EAAE,KAAK,CAAC,GACvB;IAAEG,EAAE,EAAEH,CAAC,CAACI,CAAC;IAAEC,EAAE,EAAEL,CAAC,CAACM,CAAC;IAAEC,EAAE,EAAEP,CAAC,CAACC,CAAC;IAAEO,EAAE,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAM,CAAC,GAClDF,EAAE,CAACK,CAAC,EAAE,KAAK,CAAC,GACV;IAAEG,EAAE,EAAEH,CAAC,CAACS,CAAC;IAAEJ,EAAE,EAAEL,CAAC,CAACU,CAAC;IAAEH,EAAE,EAAEP,CAAC,CAACW,CAAC;IAAEH,EAAE,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAM,CAAC,GAClDF,EAAE,CAACK,CAAC,EAAE,KAAK,CAAC,GACV;IAAEG,EAAE,EAAEH,CAAC,CAACY,CAAC;IAAEP,EAAE,EAAEL,CAAC,CAACa,CAAC;IAAEN,EAAE,EAAEP,CAAC,CAACc,CAAC;IAAEN,EAAE,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAM,CAAC,GAClDF,EAAE,CAACK,CAAC,EAAE,KAAK,CAAC,GACV;IAAEG,EAAE,EAAEH,CAAC,CAACc,CAAC;IAAET,EAAE,EAAEL,CAAC,CAACA,CAAC;IAAEO,EAAE,EAAEP,CAAC,CAACC,CAAC;IAAEO,EAAE,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAM,CAAC,GAClDF,EAAE,CAACK,CAAC,EAAE,KAAK,CAAC,GACV;IAAEG,EAAE,EAAEH,CAAC,CAACc,CAAC;IAAET,EAAE,EAAEL,CAAC,CAACe,CAAC;IAAER,EAAE,EAAEP,CAAC,CAACY,CAAC;IAAEJ,EAAE,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAM,CAAC,GAClDF,EAAE,CAACK,CAAC,EAAE,MAAM,CAAC,GACX;IAAEG,EAAE,EAAEH,CAAC,CAACe,CAAC;IAAEV,EAAE,EAAEL,CAAC,CAACgB,CAAC;IAAET,EAAE,EAAEP,CAAC,CAACU,CAAC;IAAEF,EAAE,EAAER,CAAC,CAACiB,CAAC;IAAEpB,KAAK,EAAE;EAAO,CAAC,GACrD;IAAEM,EAAE,EAAE,CAAC;IAAEE,EAAE,EAAE,CAAC;IAAEE,EAAE,EAAE,CAAC;IAAEV,KAAK,EAAE;EAAM,CAAC;EAEnDK,MAAM,CAACL,KAAK,GAAGI,CAAC,IAAIC,MAAM,CAACL,KAAK;EAChC,OAAOK,MAAM;AACf;AAEA,SAASgB,QAAQA,CAACrB,KAAK,EAAE;EACvB,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,KAAK,EAAE;IACzD,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF;AAEA,SAASsB,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACzB,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC;EACjB,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC;EACjB,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAC,IAAI,CAAC,GAAGE,CAAC;EACzC,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAOD,CAAC;EACvB,IAAIC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,GAAG,CAAC;EACnD,OAAOF,CAAC;AACV;AAEA,eAAe,MAAMG,KAAK,CAAC;EACzBC,WAAWA,CAAC,GAAGC,MAAM,EAAE;IACrB,IAAI,CAACC,IAAI,CAAC,GAAGD,MAAM,CAAC;EACtB;;EAEA;EACA,OAAOE,OAAOA,CAACC,KAAK,EAAE;IACpB,OACEA,KAAK,KAAKA,KAAK,YAAYL,KAAK,IAAI,IAAI,CAAC5C,KAAK,CAACiD,KAAK,CAAC,IAAI,IAAI,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC;EAE9E;;EAEA;EACA,OAAOjD,KAAKA,CAACiD,KAAK,EAAE;IAClB,OACEA,KAAK,IACL,OAAOA,KAAK,CAACxB,CAAC,KAAK,QAAQ,IAC3B,OAAOwB,KAAK,CAACtB,CAAC,KAAK,QAAQ,IAC3B,OAAOsB,KAAK,CAAC3B,CAAC,KAAK,QAAQ;EAE/B;;EAEA;AACF;AACA;EACE,OAAO6B,MAAMA,CAACC,IAAI,GAAG,SAAS,EAAET,CAAC,EAAE;IACjC;IACA,MAAM;MAAEQ,MAAM;MAAExC,KAAK;MAAE0C,GAAG;MAAEC,EAAE,EAAEC;IAAG,CAAC,GAAG7C,IAAI;;IAE3C;IACA,IAAI0C,IAAI,KAAK,SAAS,EAAE;MACtB,MAAMjB,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAIgB,MAAM,CAAC,CAAC,GAAG,EAAE;MACnC,MAAMf,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAIe,MAAM,CAAC,CAAC,GAAG,EAAE;MACnC,MAAMlB,CAAC,GAAG,GAAG,GAAGkB,MAAM,CAAC,CAAC;MACxB,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAE,KAAK,CAAC;MACvC,OAAOgB,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,MAAM,EAAE;MAC1BT,CAAC,GAAGA,CAAC,IAAI,IAAI,GAAGQ,MAAM,CAAC,CAAC,GAAGR,CAAC;MAC5B,MAAMlB,CAAC,GAAGd,KAAK,CAAC,EAAE,GAAG0C,GAAG,CAAE,CAAC,GAAGE,EAAE,GAAGZ,CAAC,GAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;MAC1D,MAAMhB,CAAC,GAAGhB,KAAK,CAAC,EAAE,GAAG0C,GAAG,CAAE,CAAC,GAAGE,EAAE,GAAGZ,CAAC,GAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;MACzD,MAAMrB,CAAC,GAAGX,KAAK,CAAC,GAAG,GAAG0C,GAAG,CAAE,CAAC,GAAGE,EAAE,GAAGZ,CAAC,GAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;MAC1D,MAAMM,KAAK,GAAG,IAAIL,KAAK,CAACnB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;MAChC,OAAO2B,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAMjB,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAIgB,MAAM,CAAC,CAAC,GAAG,EAAE;MACnC,MAAMf,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,IAAIe,MAAM,CAAC,CAAC,GAAG,CAAC;MACjC,MAAMlB,CAAC,GAAG,GAAG,GAAGkB,MAAM,CAAC,CAAC;MACxB,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAE,KAAK,CAAC;MACvC,OAAOgB,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,MAAM,EAAE;MAC1B,MAAMjB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAGgB,MAAM,CAAC,CAAC;MAC5B,MAAMf,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,IAAIe,MAAM,CAAC,CAAC,GAAG,EAAE;MACpC,MAAMlB,CAAC,GAAG,GAAG,GAAGkB,MAAM,CAAC,CAAC;MACxB,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAE,KAAK,CAAC;MACvC,OAAOgB,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,KAAK,EAAE;MACzB,MAAM3B,CAAC,GAAG,GAAG,GAAG0B,MAAM,CAAC,CAAC;MACxB,MAAMxB,CAAC,GAAG,GAAG,GAAGwB,MAAM,CAAC,CAAC;MACxB,MAAM7B,CAAC,GAAG,GAAG,GAAG6B,MAAM,CAAC,CAAC;MACxB,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACnB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;MAChC,OAAO2B,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,KAAK,EAAE;MACzB,MAAMjB,CAAC,GAAG,GAAG,GAAGgB,MAAM,CAAC,CAAC;MACxB,MAAM9B,CAAC,GAAG,GAAG,GAAG8B,MAAM,CAAC,CAAC,GAAG,GAAG;MAC9B,MAAM7B,CAAC,GAAG,GAAG,GAAG6B,MAAM,CAAC,CAAC,GAAG,GAAG;MAC9B,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEd,CAAC,EAAEC,CAAC,EAAE,KAAK,CAAC;MACvC,OAAO2B,KAAK;IACd,CAAC,MAAM,IAAIG,IAAI,KAAK,MAAM,EAAE;MAC1B,MAAMI,IAAI,GAAG,GAAG,GAAGL,MAAM,CAAC,CAAC;MAC3B,MAAMF,KAAK,GAAG,IAAIL,KAAK,CAACY,IAAI,EAAEA,IAAI,EAAEA,IAAI,CAAC;MACzC,OAAOP,KAAK;IACd,CAAC,MAAM;MACL,MAAM,IAAIQ,KAAK,CAAC,+BAA+B,CAAC;IAClD;EACF;;EAEA;EACA,OAAOP,IAAIA,CAACD,KAAK,EAAE;IACjB,OAAO,OAAOA,KAAK,KAAK,QAAQ,KAAKlD,KAAK,CAACmD,IAAI,CAACD,KAAK,CAAC,IAAIjD,KAAK,CAACkD,IAAI,CAACD,KAAK,CAAC,CAAC;EAC9E;EAEAS,IAAIA,CAAA,EAAG;IACL;IACA,MAAM;MAAElC,EAAE;MAAEE,EAAE;MAAEE;IAAG,CAAC,GAAG,IAAI,CAAC3B,GAAG,CAAC,CAAC;IACjC,MAAM,CAACwB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAG,CAACE,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,CAAC+B,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAG,GAAG,CAAC;;IAElD;IACA,MAAMtB,CAAC,GAAG5B,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGW,CAAC,EAAE,CAAC,GAAGE,CAAC,EAAE,CAAC,GAAGL,CAAC,CAAC;IAEvC,IAAIgB,CAAC,KAAK,CAAC,EAAE;MACX;MACA,OAAO,IAAIM,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;IACtC;IAEA,MAAMR,CAAC,GAAG,CAAC,CAAC,GAAGX,CAAC,GAAGa,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC;IAC/B,MAAMD,CAAC,GAAG,CAAC,CAAC,GAAGV,CAAC,GAAGW,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC;IAC/B,MAAMP,CAAC,GAAG,CAAC,CAAC,GAAGT,CAAC,GAAGgB,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC;;IAE/B;IACA,MAAMW,KAAK,GAAG,IAAIL,KAAK,CAACR,CAAC,EAAEC,CAAC,EAAEN,CAAC,EAAEO,CAAC,EAAE,MAAM,CAAC;IAC3C,OAAOW,KAAK;EACd;EAEAY,GAAGA,CAAA,EAAG;IACJ;IACA,MAAM;MAAErC,EAAE;MAAEE,EAAE;MAAEE;IAAG,CAAC,GAAG,IAAI,CAAC3B,GAAG,CAAC,CAAC;IACjC,MAAM,CAACwB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAG,CAACE,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,CAAC+B,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAG,GAAG,CAAC;;IAElD;IACA,MAAM/C,GAAG,GAAGH,IAAI,CAACG,GAAG,CAACY,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;IAC7B,MAAMR,GAAG,GAAGJ,IAAI,CAACI,GAAG,CAACW,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;IAC7B,MAAMa,CAAC,GAAG,CAACtB,GAAG,GAAGC,GAAG,IAAI,CAAC;;IAEzB;IACA,MAAMgD,MAAM,GAAGjD,GAAG,KAAKC,GAAG;;IAE1B;IACA,MAAMiD,KAAK,GAAGlD,GAAG,GAAGC,GAAG;IACvB,MAAMoB,CAAC,GAAG4B,MAAM,GACZ,CAAC,GACD3B,CAAC,GAAG,GAAG,GACL4B,KAAK,IAAI,CAAC,GAAGlD,GAAG,GAAGC,GAAG,CAAC,GACvBiD,KAAK,IAAIlD,GAAG,GAAGC,GAAG,CAAC;IACzB,MAAMmB,CAAC,GAAG6B,MAAM,GACZ,CAAC,GACDjD,GAAG,KAAKY,CAAC,GACP,CAAC,CAACE,CAAC,GAAGL,CAAC,IAAIyC,KAAK,IAAIpC,CAAC,GAAGL,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GACvCT,GAAG,KAAKc,CAAC,GACP,CAAC,CAACL,CAAC,GAAGG,CAAC,IAAIsC,KAAK,GAAG,CAAC,IAAI,CAAC,GACzBlD,GAAG,KAAKS,CAAC,GACP,CAAC,CAACG,CAAC,GAAGE,CAAC,IAAIoC,KAAK,GAAG,CAAC,IAAI,CAAC,GACzB,CAAC;;IAEX;IACA,MAAMd,KAAK,GAAG,IAAIL,KAAK,CAAC,GAAG,GAAGX,CAAC,EAAE,GAAG,GAAGC,CAAC,EAAE,GAAG,GAAGC,CAAC,EAAE,KAAK,CAAC;IACzD,OAAOc,KAAK;EACd;EAEAF,IAAIA,CAAC1B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAG,CAAC,EAAE4B,CAAC,GAAG,CAAC,EAAE9C,KAAK,GAAG,KAAK,EAAE;IAC9C;IACAG,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC,GAAGA,CAAC;;IAEd;IACA,IAAI,IAAI,CAACH,KAAK,EAAE;MACd,KAAK,MAAMV,SAAS,IAAI,IAAI,CAACU,KAAK,EAAE;QAClC,OAAO,IAAI,CAAC,IAAI,CAACA,KAAK,CAACV,SAAS,CAAC,CAAC;MACpC;IACF;IAEA,IAAI,OAAOa,CAAC,KAAK,QAAQ,EAAE;MACzB;MACAH,KAAK,GAAG,OAAO8C,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAG9C,KAAK;MACzC8C,CAAC,GAAG,OAAOA,CAAC,KAAK,QAAQ,GAAG,CAAC,GAAGA,CAAC;;MAEjC;MACAC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;QAAE1C,EAAE,EAAEH,CAAC;QAAEK,EAAE,EAAEJ,CAAC;QAAEM,EAAE,EAAEQ,CAAC;QAAEP,EAAE,EAAEmC,CAAC;QAAE9C;MAAM,CAAC,CAAC;MAC1D;IACF,CAAC,MAAM,IAAIG,CAAC,YAAY8C,KAAK,EAAE;MAC7B,IAAI,CAACjD,KAAK,GAAGI,CAAC,KAAK,OAAOD,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK;MACnE4C,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;QAAE1C,EAAE,EAAEH,CAAC,CAAC,CAAC,CAAC;QAAEK,EAAE,EAAEL,CAAC,CAAC,CAAC,CAAC;QAAEO,EAAE,EAAEP,CAAC,CAAC,CAAC,CAAC;QAAEQ,EAAE,EAAER,CAAC,CAAC,CAAC,CAAC,IAAI;MAAE,CAAC,CAAC;IACtE,CAAC,MAAM,IAAIA,CAAC,YAAY4C,MAAM,EAAE;MAC9B;MACA,MAAMG,MAAM,GAAGhD,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;MAClC2C,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEE,MAAM,CAAC;IAC7B,CAAC,MAAM,IAAI,OAAO/C,CAAC,KAAK,QAAQ,EAAE;MAChC,IAAIrB,KAAK,CAACkD,IAAI,CAAC7B,CAAC,CAAC,EAAE;QACjB,MAAMgD,YAAY,GAAGhD,CAAC,CAACiD,OAAO,CAACpE,UAAU,EAAE,EAAE,CAAC;QAC9C,MAAM,CAACsB,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,GAAG3B,GAAG,CACrBsE,IAAI,CAACF,YAAY,CAAC,CAClBG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXb,GAAG,CAAEC,CAAC,IAAKa,QAAQ,CAACb,CAAC,CAAC,CAAC;QAC1BK,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;UAAE1C,EAAE;UAAEE,EAAE;UAAEE,EAAE;UAAEC,EAAE,EAAE,CAAC;UAAEX,KAAK,EAAE;QAAM,CAAC,CAAC;MAC1D,CAAC,MAAM,IAAInB,KAAK,CAACmD,IAAI,CAAC7B,CAAC,CAAC,EAAE;QACxB,MAAMqD,QAAQ,GAAId,CAAC,IAAKa,QAAQ,CAACb,CAAC,EAAE,EAAE,CAAC;QACvC,MAAM,GAAGpC,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,GAAG9B,GAAG,CAACyE,IAAI,CAACpE,WAAW,CAACkB,CAAC,CAAC,CAAC,CAACsC,GAAG,CAACe,QAAQ,CAAC;QAC7DT,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;UAAE1C,EAAE;UAAEE,EAAE;UAAEE,EAAE;UAAEC,EAAE,EAAE,CAAC;UAAEX,KAAK,EAAE;QAAM,CAAC,CAAC;MAC1D,CAAC,MAAM,MAAMuC,KAAK,CAAC,kDAAkD,CAAC;IACxE;;IAEA;IACA,MAAM;MAAEjC,EAAE;MAAEE,EAAE;MAAEE,EAAE;MAAEC;IAAG,CAAC,GAAG,IAAI;IAC/B,MAAM8C,UAAU,GACd,IAAI,CAACzD,KAAK,KAAK,KAAK,GAChB;MAAEO,CAAC,EAAED,EAAE;MAAEG,CAAC,EAAED,EAAE;MAAEJ,CAAC,EAAEM;IAAG,CAAC,GACvB,IAAI,CAACV,KAAK,KAAK,KAAK,GAClB;MAAEY,CAAC,EAAEN,EAAE;MAAEO,CAAC,EAAEL,EAAE;MAAEM,CAAC,EAAEJ;IAAG,CAAC,GACvB,IAAI,CAACV,KAAK,KAAK,KAAK,GAClB;MAAEe,CAAC,EAAET,EAAE;MAAEU,CAAC,EAAER,EAAE;MAAES,CAAC,EAAEP;IAAG,CAAC,GACvB,IAAI,CAACV,KAAK,KAAK,KAAK,GAClB;MAAEiB,CAAC,EAAEX,EAAE;MAAEH,CAAC,EAAEK,EAAE;MAAEJ,CAAC,EAAEM;IAAG,CAAC,GACvB,IAAI,CAACV,KAAK,KAAK,KAAK,GAClB;MAAEiB,CAAC,EAAEX,EAAE;MAAEY,CAAC,EAAEV,EAAE;MAAEO,CAAC,EAAEL;IAAG,CAAC,GACvB,IAAI,CAACV,KAAK,KAAK,MAAM,GACnB;MAAEkB,CAAC,EAAEZ,EAAE;MAAEa,CAAC,EAAEX,EAAE;MAAEK,CAAC,EAAEH,EAAE;MAAEU,CAAC,EAAET;IAAG,CAAC,GAC9B,CAAC,CAAC;IAClBoC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAES,UAAU,CAAC;EACjC;EAEAC,GAAGA,CAAA,EAAG;IACJ;IACA,MAAM;MAAE9C,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAAC6C,GAAG,CAAC,CAAC;;IAE9B;IACA,MAAM1C,CAAC,GAAG,GAAG,GAAGJ,CAAC,GAAG,EAAE;IACtB,MAAMV,CAAC,GAAG,GAAG,IAAIS,CAAC,GAAGC,CAAC,CAAC;IACvB,MAAMT,CAAC,GAAG,GAAG,IAAIS,CAAC,GAAGC,CAAC,CAAC;;IAEvB;IACA,MAAMiB,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEd,CAAC,EAAEC,CAAC,EAAE,KAAK,CAAC;IACvC,OAAO2B,KAAK;EACd;EAEA6B,GAAGA,CAAA,EAAG;IACJ;IACA,MAAM;MAAE3C,CAAC;MAAEd,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAACsD,GAAG,CAAC,CAAC;;IAE9B;IACA,MAAMxC,CAAC,GAAG1B,IAAI,CAACqE,IAAI,CAAC1D,CAAC,IAAI,CAAC,GAAGC,CAAC,IAAI,CAAC,CAAC;IACpC,IAAIW,CAAC,GAAI,GAAG,GAAGvB,IAAI,CAACsE,KAAK,CAAC1D,CAAC,EAAED,CAAC,CAAC,GAAIX,IAAI,CAAC4C,EAAE;IAC1C,IAAIrB,CAAC,GAAG,CAAC,EAAE;MACTA,CAAC,IAAI,CAAC,CAAC;MACPA,CAAC,GAAG,GAAG,GAAGA,CAAC;IACb;;IAEA;IACA,MAAMgB,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEC,CAAC,EAAEH,CAAC,EAAE,KAAK,CAAC;IACvC,OAAOgB,KAAK;EACd;EACA;AACF;AACA;;EAEEhD,GAAGA,CAAA,EAAG;IACJ,IAAI,IAAI,CAACiB,KAAK,KAAK,KAAK,EAAE;MACxB,OAAO,IAAI;IACb,CAAC,MAAM,IAAIqB,QAAQ,CAAC,IAAI,CAACrB,KAAK,CAAC,EAAE;MAC/B;MACA,IAAI;QAAEY,CAAC;QAAEC,CAAC;QAAEC;MAAE,CAAC,GAAG,IAAI;MACtB,IAAI,IAAI,CAACd,KAAK,KAAK,KAAK,IAAI,IAAI,CAACA,KAAK,KAAK,KAAK,EAAE;QAChD;QACA,IAAI;UAAEiB,CAAC;UAAEd,CAAC;UAAEC;QAAE,CAAC,GAAG,IAAI;QACtB,IAAI,IAAI,CAACJ,KAAK,KAAK,KAAK,EAAE;UACxB,MAAM;YAAEkB,CAAC;YAAEH;UAAE,CAAC,GAAG,IAAI;UACrB,MAAMgD,IAAI,GAAGvE,IAAI,CAAC4C,EAAE,GAAG,GAAG;UAC1BjC,CAAC,GAAGe,CAAC,GAAG1B,IAAI,CAACwE,GAAG,CAACD,IAAI,GAAGhD,CAAC,CAAC;UAC1BX,CAAC,GAAGc,CAAC,GAAG1B,IAAI,CAAC2C,GAAG,CAAC4B,IAAI,GAAGhD,CAAC,CAAC;QAC5B;;QAEA;QACA,MAAMkD,EAAE,GAAG,CAAChD,CAAC,GAAG,EAAE,IAAI,GAAG;QACzB,MAAMiD,EAAE,GAAG/D,CAAC,GAAG,GAAG,GAAG8D,EAAE;QACvB,MAAME,EAAE,GAAGF,EAAE,GAAG7D,CAAC,GAAG,GAAG;;QAEvB;QACA,MAAMgE,EAAE,GAAG,EAAE,GAAG,GAAG;QACnB,MAAMC,EAAE,GAAG,QAAQ;QACnB,MAAMC,EAAE,GAAG,KAAK;QAChB1D,CAAC,GAAG,OAAO,IAAIsD,EAAE,IAAI,CAAC,GAAGG,EAAE,GAAGH,EAAE,IAAI,CAAC,GAAG,CAACA,EAAE,GAAGE,EAAE,IAAIE,EAAE,CAAC;QACvDzD,CAAC,GAAG,GAAG,IAAIoD,EAAE,IAAI,CAAC,GAAGI,EAAE,GAAGJ,EAAE,IAAI,CAAC,GAAG,CAACA,EAAE,GAAGG,EAAE,IAAIE,EAAE,CAAC;QACnDxD,CAAC,GAAG,OAAO,IAAIqD,EAAE,IAAI,CAAC,GAAGE,EAAE,GAAGF,EAAE,IAAI,CAAC,GAAG,CAACA,EAAE,GAAGC,EAAE,IAAIE,EAAE,CAAC;MACzD;;MAEA;MACA,MAAMC,EAAE,GAAG3D,CAAC,GAAG,MAAM,GAAGC,CAAC,GAAG,CAAC,MAAM,GAAGC,CAAC,GAAG,CAAC,MAAM;MACjD,MAAM0D,EAAE,GAAG5D,CAAC,GAAG,CAAC,MAAM,GAAGC,CAAC,GAAG,MAAM,GAAGC,CAAC,GAAG,MAAM;MAChD,MAAM2D,EAAE,GAAG7D,CAAC,GAAG,MAAM,GAAGC,CAAC,GAAG,CAAC,KAAK,GAAGC,CAAC,GAAG,KAAK;;MAE9C;MACA,MAAM4D,GAAG,GAAGlF,IAAI,CAACkF,GAAG;MACpB,MAAMC,EAAE,GAAG,SAAS;MACpB,MAAMpE,CAAC,GAAGgE,EAAE,GAAGI,EAAE,GAAG,KAAK,GAAGD,GAAG,CAACH,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,GAAGA,EAAE;MACjE,MAAM9D,CAAC,GAAG+D,EAAE,GAAGG,EAAE,GAAG,KAAK,GAAGD,GAAG,CAACF,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,GAAGA,EAAE;MACjE,MAAMpE,CAAC,GAAGqE,EAAE,GAAGE,EAAE,GAAG,KAAK,GAAGD,GAAG,CAACD,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,GAAGA,EAAE;;MAEjE;MACA,MAAM1C,KAAK,GAAG,IAAIL,KAAK,CAAC,GAAG,GAAGnB,CAAC,EAAE,GAAG,GAAGE,CAAC,EAAE,GAAG,GAAGL,CAAC,CAAC;MAClD,OAAO2B,KAAK;IACd,CAAC,MAAM,IAAI,IAAI,CAAC/B,KAAK,KAAK,KAAK,EAAE;MAC/B;MACA;MACA,IAAI;QAAEe,CAAC;QAAEC,CAAC;QAAEC;MAAE,CAAC,GAAG,IAAI;MACtBF,CAAC,IAAI,GAAG;MACRC,CAAC,IAAI,GAAG;MACRC,CAAC,IAAI,GAAG;;MAER;MACA,IAAID,CAAC,KAAK,CAAC,EAAE;QACXC,CAAC,IAAI,GAAG;QACR,MAAMc,KAAK,GAAG,IAAIL,KAAK,CAACT,CAAC,EAAEA,CAAC,EAAEA,CAAC,CAAC;QAChC,OAAOc,KAAK;MACd;;MAEA;MACA,MAAMP,CAAC,GAAGP,CAAC,GAAG,GAAG,GAAGA,CAAC,IAAI,CAAC,GAAGD,CAAC,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAGD,CAAC;MAC/C,MAAMO,CAAC,GAAG,CAAC,GAAGN,CAAC,GAAGO,CAAC;;MAEnB;MACA,MAAMjB,CAAC,GAAG,GAAG,GAAGe,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACzC,MAAMN,CAAC,GAAG,GAAG,GAAGa,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,CAAC;MACjC,MAAMX,CAAC,GAAG,GAAG,GAAGkB,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;MAEzC;MACA,MAAMgB,KAAK,GAAG,IAAIL,KAAK,CAACnB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;MAChC,OAAO2B,KAAK;IACd,CAAC,MAAM,IAAI,IAAI,CAAC/B,KAAK,KAAK,MAAM,EAAE;MAChC;MACA;MACA,MAAM;QAAEkB,CAAC;QAAEC,CAAC;QAAEN,CAAC;QAAEO;MAAE,CAAC,GAAG,IAAI;;MAE3B;MACA,MAAMb,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGf,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEsB,CAAC,IAAI,CAAC,GAAGE,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC;MAClD,MAAMX,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGjB,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEuB,CAAC,IAAI,CAAC,GAAGC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC;MAClD,MAAMhB,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGZ,IAAI,CAACI,GAAG,CAAC,CAAC,EAAEiB,CAAC,IAAI,CAAC,GAAGO,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC;;MAElD;MACA,MAAMW,KAAK,GAAG,IAAIL,KAAK,CAACnB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC;MAChC,OAAO2B,KAAK;IACd,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAEA6C,OAAOA,CAAA,EAAG;IACR,MAAM;MAAEtE,EAAE;MAAEE,EAAE;MAAEE,EAAE;MAAEC,EAAE;MAAEX;IAAM,CAAC,GAAG,IAAI;IACtC,OAAO,CAACM,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAEX,KAAK,CAAC;EAChC;EAEA6E,KAAKA,CAAA,EAAG;IACN,MAAM,CAACtE,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAG,IAAI,CAAC0E,QAAQ,CAAC,CAAC,CAACrC,GAAG,CAACpD,YAAY,CAAC;IACnD,OAAO,IAAIkB,CAAC,GAAGE,CAAC,GAAGL,CAAC,EAAE;EACxB;EAEA2E,KAAKA,CAAA,EAAG;IACN,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAG,IAAI,CAACJ,QAAQ,CAAC,CAAC;IACpC,MAAMK,MAAM,GAAG,OAAOH,EAAE,IAAIC,EAAE,IAAIC,EAAE,GAAG;IACvC,OAAOC,MAAM;EACf;EAEAtF,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACgF,KAAK,CAAC,CAAC;EACrB;EAEAlB,GAAGA,CAAA,EAAG;IACJ;IACA,MAAM;MAAErD,EAAE,EAAE8E,IAAI;MAAE5E,EAAE,EAAE6E,IAAI;MAAE3E,EAAE,EAAE4E;IAAK,CAAC,GAAG,IAAI,CAACvG,GAAG,CAAC,CAAC;IACnD,MAAM,CAACwB,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAG,CAACgF,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC,CAAC7C,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAG,GAAG,CAAC;;IAExD;IACA,MAAM6C,EAAE,GAAGhF,CAAC,GAAG,OAAO,GAAGf,IAAI,CAACkF,GAAG,CAAC,CAACnE,CAAC,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,GAAGA,CAAC,GAAG,KAAK;IACvE,MAAMiF,EAAE,GAAG/E,CAAC,GAAG,OAAO,GAAGjB,IAAI,CAACkF,GAAG,CAAC,CAACjE,CAAC,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,GAAGA,CAAC,GAAG,KAAK;IACvE,MAAMgF,EAAE,GAAGrF,CAAC,GAAG,OAAO,GAAGZ,IAAI,CAACkF,GAAG,CAAC,CAACtE,CAAC,GAAG,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,GAAGA,CAAC,GAAG,KAAK;;IAEvE;IACA,MAAMsF,EAAE,GAAG,CAACH,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,IAAI,OAAO;IAC9D,MAAME,EAAE,GAAG,CAACJ,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,IAAI,GAAG;IAC1D,MAAMG,EAAE,GAAG,CAACL,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,GAAGC,EAAE,GAAG,MAAM,IAAI,OAAO;;IAE9D;IACA,MAAM7E,CAAC,GAAG8E,EAAE,GAAG,QAAQ,GAAGlG,IAAI,CAACkF,GAAG,CAACgB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGA,EAAE,GAAG,EAAE,GAAG,GAAG;IACrE,MAAM7E,CAAC,GAAG8E,EAAE,GAAG,QAAQ,GAAGnG,IAAI,CAACkF,GAAG,CAACiB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGA,EAAE,GAAG,EAAE,GAAG,GAAG;IACrE,MAAM7E,CAAC,GAAG8E,EAAE,GAAG,QAAQ,GAAGpG,IAAI,CAACkF,GAAG,CAACkB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGA,EAAE,GAAG,EAAE,GAAG,GAAG;;IAErE;IACA,MAAM7D,KAAK,GAAG,IAAIL,KAAK,CAACd,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE,KAAK,CAAC;IACvC,OAAOiB,KAAK;EACd;;EAEA;AACF;AACA;;EAEE+C,QAAQA,CAAA,EAAG;IACT,MAAM;MAAExE,EAAE;MAAEE,EAAE;MAAEE;IAAG,CAAC,GAAG,IAAI,CAAC3B,GAAG,CAAC,CAAC;IACjC,MAAM;MAAEY,GAAG;MAAEC,GAAG;MAAEH;IAAM,CAAC,GAAGD,IAAI;IAChC,MAAMqG,MAAM,GAAInD,CAAC,IAAK/C,GAAG,CAAC,CAAC,EAAEC,GAAG,CAACH,KAAK,CAACiD,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAChD,OAAO,CAACpC,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAC,CAAC+B,GAAG,CAACoD,MAAM,CAAC;EACjC;;EAEA;AACF;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}