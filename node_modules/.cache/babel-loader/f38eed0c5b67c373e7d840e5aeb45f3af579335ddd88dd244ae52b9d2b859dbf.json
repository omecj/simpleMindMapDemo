{"ast":null,"code":"import Base from './Base';\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils';\nimport { CONSTANTS } from '../constants/constant';\n\n//  竖向时间轴\nclass VerticalTimeline extends Base {\n  //  构造函数\n  constructor(opt = {}, layout) {\n    super(opt);\n    this.layout = layout;\n  }\n\n  //  布局\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedTopValue();\n    }, () => {\n      this.adjustLeftTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex, index) => {\n      let newNode = this.createNode(cur, parent, isRoot, layerIndex);\n      // 根节点定位在画布中心位置\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        // 节点生长方向\n        // 三级及以下节点以上级为准\n        if (parent._node.dir) {\n          newNode.dir = parent._node.dir;\n        } else {\n          newNode.dir = index % 2 === 0 ? CONSTANTS.LAYOUT_GROW_DIR.RIGHT : CONSTANTS.LAYOUT_GROW_DIR.LEFT;\n        }\n        // 定位二级节点的left\n        if (parent._node.isRoot) {\n          newNode.left = parent._node.left + (cur._node.width > parent._node.width ? -(cur._node.width - parent._node.width) / 2 : (parent._node.width - cur._node.width) / 2);\n        } else {\n          newNode.left = newNode.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT ? parent._node.left + parent._node.width + this.getMarginX(layerIndex) : parent._node.left - this.getMarginX(layerIndex) - newNode.width;\n        }\n      }\n      if (!cur.data.expand) {\n        return true;\n      }\n    }, (cur, parent, isRoot, layerIndex) => {\n      // 返回时计算节点的areaHeight，也就是子节点所占的高度之和，包括外边距\n      if (isRoot) {\n        return;\n      }\n      let len = cur.data.expand === false ? 0 : cur._node.children.length;\n      cur._node.childrenAreaHeight = len ? cur._node.children.reduce((h, item) => {\n        return h + item.height;\n      }, 0) + (len + 1) * this.getMarginY(layerIndex + 1) : 0;\n    }, true, 0);\n  }\n\n  //  遍历节点树计算节点的top\n  computedTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex, index) => {\n      if (node.getData('expand') && node.children && node.children.length) {\n        let marginY = this.getMarginY(layerIndex + 1);\n        // 定位二级节点的top\n        if (isRoot) {\n          let top = node.top + node.height;\n          let totalTop = top + marginY;\n          node.children.forEach(cur => {\n            cur.top = totalTop;\n            totalTop += cur.height + marginY;\n          });\n        } else {\n          // 定位三级及以下节点的top\n          let marginY = this.getMarginY(layerIndex + 1);\n          let baseTop = node.top + node.height / 2 + marginY;\n          // 第一个子节点的top值 = 该节点中心的top值 - 子节点的高度之和的一半\n          let totalTop = baseTop - node.childrenAreaHeight / 2;\n          node.children.forEach(cur => {\n            cur.top = totalTop;\n            totalTop += cur.height + marginY;\n          });\n        }\n      }\n    }, null, true);\n  }\n\n  //  调整节点left、top\n  adjustLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.getData('expand')) {\n        return;\n      }\n      if (isRoot) return;\n      // 判断子节点所占的高度之和是否大于该节点自身，大于则需要调整位置\n      let base = this.getMarginY(layerIndex + 1) * 2 + node.height;\n      let difference = node.childrenAreaHeight - base;\n      if (difference > 0) {\n        this.updateBrothers(node, difference / 2);\n      }\n    }, null, true);\n  }\n\n  //  更新兄弟节点的top\n  updateBrothers(node, addHeight) {\n    if (node.parent) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        // 自定义节点位置\n        if (item.hasCustomPosition()) return;\n        // 三级或三级以下节点自身位置不需要动\n        if (!node.parent.isRoot && item.uid === node.uid) return;\n        let _offset = 0;\n        // 二级节点上面的兄弟节点不需要移动，自身需要往下移动\n        if (node.parent.isRoot) {\n          // 上面的节点不用移\n          if (_index < index) {\n            _offset = 0;\n          } else if (_index > index) {\n            // 下面的节点往下移\n            _offset = addHeight * 2;\n          } else {\n            // 自身也要移动\n            _offset = addHeight;\n          }\n        } else {\n          // 三级或三级以下节点两侧的兄弟节点向两侧移动\n          // 上面的节点往上移\n          if (_index < index) {\n            _offset = -addHeight;\n          } else if (_index > index) {\n            // 下面的节点往下移\n            _offset = addHeight;\n          }\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothers(node.parent, addHeight);\n    }\n  }\n\n  //  调整兄弟节点的top\n  updateBrothersTop(node, addHeight) {\n    if (node.parent && !node.parent.isRoot) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n        let _offset = 0;\n        // 下面的节点往下移\n        if (_index > index) {\n          _offset = addHeight;\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothersTop(node.parent, addHeight);\n    }\n  }\n\n  //  绘制连线，连接该节点到其子节点\n  renderLine(node, lines, style, lineStyle) {\n    if (lineStyle === 'curve') {\n      this.renderLineCurve(node, lines, style);\n    } else if (lineStyle === 'direct') {\n      this.renderLineDirect(node, lines, style);\n    } else {\n      this.renderLineStraight(node, lines, style);\n    }\n  }\n\n  // 直线连接\n  renderLineStraight(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    if (node.isRoot) {\n      // 当前节点是根节点\n      let prevBother = node;\n      // 根节点的子节点是和根节点同一水平线排列\n      node.children.forEach((item, index) => {\n        let y1 = prevBother.top + prevBother.height;\n        let y2 = item.top;\n        let x = node.left + node.width / 2;\n        let path = `M ${x},${y1} L ${x},${y2}`;\n        this.setLineStyle(style, lines[index], path, item);\n        prevBother = item;\n      });\n    } else {\n      // 当前节点为非根节点\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT) {\n        let nodeRight = node.left + node.width;\n        let nodeYCenter = node.top + node.height / 2;\n        let marginX = this.getMarginX(node.layerIndex + 1);\n        let offset = (marginX - expandBtnSize) * 0.6;\n        node.children.forEach((item, index) => {\n          let itemLeft = item.left;\n          let itemYCenter = item.top + item.height / 2;\n          let path = this.createFoldLine([[nodeRight, nodeYCenter], [nodeRight + offset, nodeYCenter], [nodeRight + offset, itemYCenter], [itemLeft, itemYCenter]]);\n          this.setLineStyle(style, lines[index], path, item);\n        });\n      } else {\n        let nodeLeft = node.left;\n        let nodeYCenter = node.top + node.height / 2;\n        let marginX = this.getMarginX(node.layerIndex + 1);\n        let offset = (marginX - expandBtnSize) * 0.6;\n        node.children.forEach((item, index) => {\n          let itemRight = item.left + item.width;\n          let itemYCenter = item.top + item.height / 2;\n          let path = this.createFoldLine([[nodeLeft, nodeYCenter], [nodeLeft - offset, nodeYCenter], [nodeLeft - offset, itemYCenter], [itemRight, itemYCenter]]);\n          this.setLineStyle(style, lines[index], path, item);\n        });\n      }\n    }\n  }\n\n  // 直连\n  renderLineDirect(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    node.children.forEach((item, index) => {\n      if (node.isRoot) {\n        let prevBother = node;\n        // 根节点的子节点是和根节点同一水平线排列\n        node.children.forEach((item, index) => {\n          let y1 = prevBother.top + prevBother.height;\n          let y2 = item.top;\n          let x = node.left + node.width / 2;\n          let path = `M ${x},${y1} L ${x},${y2}`;\n          this.setLineStyle(style, lines[index], path, item);\n          prevBother = item;\n        });\n      } else {\n        let x1 = item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT ? left - expandBtnSize : left + width + expandBtnSize;\n        let y1 = top + height / 2;\n        let x2 = item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT ? item.left + item.width : item.left;\n        let y2 = item.top + item.height / 2;\n        let path = `M ${x1},${y1} L ${x2},${y2}`;\n        this.setLineStyle(style, lines[index], path, item);\n      }\n    });\n  }\n\n  //  曲线风格连线\n  renderLineCurve(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    node.children.forEach((item, index) => {\n      if (node.isRoot) {\n        let prevBother = node;\n        // 根节点的子节点是和根节点同一水平线排列\n        node.children.forEach((item, index) => {\n          let y1 = prevBother.top + prevBother.height;\n          let y2 = item.top;\n          let x = node.left + node.width / 2;\n          let path = `M ${x},${y1} L ${x},${y2}`;\n          this.setLineStyle(style, lines[index], path, item);\n          prevBother = item;\n        });\n      } else {\n        let x1 = item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT ? left - expandBtnSize : left + width + expandBtnSize;\n        let y1 = top + height / 2;\n        let x2 = item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT ? item.left + item.width : item.left;\n        let y2 = item.top + item.height / 2;\n        let path = this.cubicBezierPath(x1, y1, x2, y2);\n        this.setLineStyle(style, lines[index], path, item);\n      }\n    });\n  }\n\n  //  渲染按钮\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height,\n      expandBtnSize,\n      isRoot\n    } = node;\n    if (!isRoot) {\n      let {\n        translateX,\n        translateY\n      } = btn.transform();\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT) {\n        btn.translate(width - translateX, height / 2 - translateY);\n      } else {\n        btn.translate(-expandBtnSize - translateX, height / 2 - translateY);\n      }\n    }\n  }\n\n  //  创建概要节点\n  renderGeneralization(list) {\n    list.forEach(item => {\n      let isLeft = item.node.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT;\n      let {\n        top,\n        bottom,\n        left,\n        right,\n        generalizationLineMargin,\n        generalizationNodeMargin\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h');\n      let x = isLeft ? left - generalizationLineMargin : right + generalizationLineMargin;\n      let x1 = x;\n      let y1 = top;\n      let x2 = x;\n      let y2 = bottom;\n      let cx = x1 + (isLeft ? -20 : 20);\n      let cy = y1 + (y2 - y1) / 2;\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n      item.generalizationLine.plot(this.transformPath(path));\n      item.generalizationNode.left = x + (isLeft ? -generalizationNodeMargin : generalizationNodeMargin) - (isLeft ? item.generalizationNode.width : 0);\n      item.generalizationNode.top = top + (bottom - top - item.generalizationNode.height) / 2;\n    });\n  }\n\n  // 渲染展开收起按钮的隐藏占位元素\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\n    if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT) {\n      rect.size(expandBtnSize, height).x(-expandBtnSize).y(0);\n    } else {\n      rect.size(expandBtnSize, height).x(width).y(0);\n    }\n  }\n}\nexport default VerticalTimeline;","map":{"version":3,"names":["Base","walk","asyncRun","getNodeIndexInNodeList","CONSTANTS","VerticalTimeline","constructor","opt","layout","doLayout","callback","task","computedBaseValue","computedTopValue","adjustLeftTopValue","root","renderer","renderTree","cur","parent","isRoot","layerIndex","index","newNode","createNode","setNodeCenter","_node","dir","LAYOUT_GROW_DIR","RIGHT","LEFT","left","width","getMarginX","data","expand","len","children","length","childrenAreaHeight","reduce","h","item","height","getMarginY","node","getData","marginY","top","totalTop","forEach","baseTop","base","difference","updateBrothers","addHeight","childrenList","_index","hasCustomPosition","uid","_offset","updateChildren","updateBrothersTop","renderLine","lines","style","lineStyle","renderLineCurve","renderLineDirect","renderLineStraight","expandBtnSize","mindMap","alwaysShowExpandBtn","prevBother","y1","y2","x","path","setLineStyle","nodeRight","nodeYCenter","marginX","offset","itemLeft","itemYCenter","createFoldLine","nodeLeft","itemRight","x1","x2","cubicBezierPath","renderExpandBtn","btn","translateX","translateY","transform","translate","renderGeneralization","list","isLeft","bottom","right","generalizationLineMargin","generalizationNodeMargin","getNodeGeneralizationRenderBoundaries","cx","cy","generalizationLine","plot","transformPath","generalizationNode","renderExpandBtnRect","rect","size","y"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/VerticalTimeline.js"],"sourcesContent":["import Base from './Base'\r\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils'\r\nimport { CONSTANTS } from '../constants/constant'\r\n\r\n//  竖向时间轴\r\nclass VerticalTimeline extends Base {\r\n  //  构造函数\r\n  constructor(opt = {}, layout) {\r\n    super(opt)\r\n    this.layout = layout\r\n  }\r\n\r\n  //  布局\r\n  doLayout(callback) {\r\n    let task = [\r\n      () => {\r\n        this.computedBaseValue()\r\n      },\r\n      () => {\r\n        this.computedTopValue()\r\n      },\r\n      () => {\r\n        this.adjustLeftTopValue()\r\n      },\r\n      () => {\r\n        callback(this.root)\r\n      }\r\n    ]\r\n    asyncRun(task)\r\n  }\r\n\r\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\r\n  computedBaseValue() {\r\n    walk(\r\n      this.renderer.renderTree,\r\n      null,\r\n      (cur, parent, isRoot, layerIndex, index) => {\r\n        let newNode = this.createNode(cur, parent, isRoot, layerIndex)\r\n        // 根节点定位在画布中心位置\r\n        if (isRoot) {\r\n          this.setNodeCenter(newNode)\r\n        } else {\r\n          // 非根节点\r\n          // 节点生长方向\r\n          // 三级及以下节点以上级为准\r\n          if (parent._node.dir) {\r\n            newNode.dir = parent._node.dir\r\n          } else {\r\n            newNode.dir =\r\n              index % 2 === 0\r\n                ? CONSTANTS.LAYOUT_GROW_DIR.RIGHT\r\n                : CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n          }\r\n          // 定位二级节点的left\r\n          if (parent._node.isRoot) {\r\n            newNode.left =\r\n              parent._node.left +\r\n              (cur._node.width > parent._node.width\r\n                ? -(cur._node.width - parent._node.width) / 2\r\n                : (parent._node.width - cur._node.width) / 2)\r\n          } else {\r\n            newNode.left =\r\n              newNode.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT\r\n                ? parent._node.left +\r\n                  parent._node.width +\r\n                  this.getMarginX(layerIndex)\r\n                : parent._node.left -\r\n                  this.getMarginX(layerIndex) -\r\n                  newNode.width\r\n          }\r\n        }\r\n        if (!cur.data.expand) {\r\n          return true\r\n        }\r\n      },\r\n      (cur, parent, isRoot, layerIndex) => {\r\n        // 返回时计算节点的areaHeight，也就是子节点所占的高度之和，包括外边距\r\n        if (isRoot) {\r\n          return\r\n        }\r\n        let len = cur.data.expand === false ? 0 : cur._node.children.length\r\n        cur._node.childrenAreaHeight = len\r\n          ? cur._node.children.reduce((h, item) => {\r\n              return h + item.height\r\n            }, 0) +\r\n            (len + 1) * this.getMarginY(layerIndex + 1)\r\n          : 0\r\n      },\r\n      true,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  遍历节点树计算节点的top\r\n  computedTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex, index) => {\r\n        if (node.getData('expand') && node.children && node.children.length) {\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          // 定位二级节点的top\r\n          if (isRoot) {\r\n            let top = node.top + node.height\r\n            let totalTop = top + marginY\r\n            node.children.forEach(cur => {\r\n              cur.top = totalTop\r\n              totalTop += cur.height + marginY\r\n            })\r\n          } else {\r\n            // 定位三级及以下节点的top\r\n            let marginY = this.getMarginY(layerIndex + 1)\r\n            let baseTop = node.top + node.height / 2 + marginY\r\n            // 第一个子节点的top值 = 该节点中心的top值 - 子节点的高度之和的一半\r\n            let totalTop = baseTop - node.childrenAreaHeight / 2\r\n            node.children.forEach(cur => {\r\n              cur.top = totalTop\r\n              totalTop += cur.height + marginY\r\n            })\r\n          }\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整节点left、top\r\n  adjustLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (!node.getData('expand')) {\r\n          return\r\n        }\r\n        if (isRoot) return\r\n        // 判断子节点所占的高度之和是否大于该节点自身，大于则需要调整位置\r\n        let base = this.getMarginY(layerIndex + 1) * 2 + node.height\r\n        let difference = node.childrenAreaHeight - base\r\n        if (difference > 0) {\r\n          this.updateBrothers(node, difference / 2)\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  更新兄弟节点的top\r\n  updateBrothers(node, addHeight) {\r\n    if (node.parent) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        // 自定义节点位置\r\n        if (item.hasCustomPosition()) return\r\n        // 三级或三级以下节点自身位置不需要动\r\n        if (!node.parent.isRoot && item.uid === node.uid) return\r\n        let _offset = 0\r\n        // 二级节点上面的兄弟节点不需要移动，自身需要往下移动\r\n        if (node.parent.isRoot) {\r\n          // 上面的节点不用移\r\n          if (_index < index) {\r\n            _offset = 0\r\n          } else if (_index > index) {\r\n            // 下面的节点往下移\r\n            _offset = addHeight * 2\r\n          } else {\r\n            // 自身也要移动\r\n            _offset = addHeight\r\n          }\r\n        } else {\r\n          // 三级或三级以下节点两侧的兄弟节点向两侧移动\r\n          // 上面的节点往上移\r\n          if (_index < index) {\r\n            _offset = -addHeight\r\n          } else if (_index > index) {\r\n            // 下面的节点往下移\r\n            _offset = addHeight\r\n          }\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothers(node.parent, addHeight)\r\n    }\r\n  }\r\n\r\n  //  调整兄弟节点的top\r\n  updateBrothersTop(node, addHeight) {\r\n    if (node.parent && !node.parent.isRoot) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.hasCustomPosition()) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        let _offset = 0\r\n        // 下面的节点往下移\r\n        if (_index > index) {\r\n          _offset = addHeight\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothersTop(node.parent, addHeight)\r\n    }\r\n  }\r\n\r\n  //  绘制连线，连接该节点到其子节点\r\n  renderLine(node, lines, style, lineStyle) {\r\n    if (lineStyle === 'curve') {\r\n      this.renderLineCurve(node, lines, style)\r\n    } else if (lineStyle === 'direct') {\r\n      this.renderLineDirect(node, lines, style)\r\n    } else {\r\n      this.renderLineStraight(node, lines, style)\r\n    }\r\n  }\r\n\r\n  // 直线连接\r\n  renderLineStraight(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    if (node.isRoot) {\r\n      // 当前节点是根节点\r\n      let prevBother = node\r\n      // 根节点的子节点是和根节点同一水平线排列\r\n      node.children.forEach((item, index) => {\r\n        let y1 = prevBother.top + prevBother.height\r\n        let y2 = item.top\r\n        let x = node.left + node.width / 2\r\n        let path = `M ${x},${y1} L ${x},${y2}`\r\n        this.setLineStyle(style, lines[index], path, item)\r\n        prevBother = item\r\n      })\r\n    } else {\r\n      // 当前节点为非根节点\r\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT) {\r\n        let nodeRight = node.left + node.width\r\n        let nodeYCenter = node.top + node.height / 2\r\n        let marginX = this.getMarginX(node.layerIndex + 1)\r\n        let offset = (marginX - expandBtnSize) * 0.6\r\n        node.children.forEach((item, index) => {\r\n          let itemLeft = item.left\r\n          let itemYCenter = item.top + item.height / 2\r\n          let path = this.createFoldLine([\r\n            [nodeRight, nodeYCenter],\r\n            [nodeRight + offset, nodeYCenter],\r\n            [nodeRight + offset, itemYCenter],\r\n            [itemLeft, itemYCenter]\r\n          ])\r\n          this.setLineStyle(style, lines[index], path, item)\r\n        })\r\n      } else {\r\n        let nodeLeft = node.left\r\n        let nodeYCenter = node.top + node.height / 2\r\n        let marginX = this.getMarginX(node.layerIndex + 1)\r\n        let offset = (marginX - expandBtnSize) * 0.6\r\n        node.children.forEach((item, index) => {\r\n          let itemRight = item.left + item.width\r\n          let itemYCenter = item.top + item.height / 2\r\n          let path = this.createFoldLine([\r\n            [nodeLeft, nodeYCenter],\r\n            [nodeLeft - offset, nodeYCenter],\r\n            [nodeLeft - offset, itemYCenter],\r\n            [itemRight, itemYCenter]\r\n          ])\r\n          this.setLineStyle(style, lines[index], path, item)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // 直连\r\n  renderLineDirect(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    node.children.forEach((item, index) => {\r\n      if (node.isRoot) {\r\n        let prevBother = node\r\n        // 根节点的子节点是和根节点同一水平线排列\r\n        node.children.forEach((item, index) => {\r\n          let y1 = prevBother.top + prevBother.height\r\n          let y2 = item.top\r\n          let x = node.left + node.width / 2\r\n          let path = `M ${x},${y1} L ${x},${y2}`\r\n          this.setLineStyle(style, lines[index], path, item)\r\n          prevBother = item\r\n        })\r\n      } else {\r\n        let x1 =\r\n          item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n            ? left - expandBtnSize\r\n            : left + width + expandBtnSize\r\n        let y1 = top + height / 2\r\n        let x2 =\r\n          item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n            ? item.left + item.width\r\n            : item.left\r\n        let y2 = item.top + item.height / 2\r\n        let path = `M ${x1},${y1} L ${x2},${y2}`\r\n        this.setLineStyle(style, lines[index], path, item)\r\n      }\r\n    })\r\n  }\r\n\r\n  //  曲线风格连线\r\n  renderLineCurve(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    node.children.forEach((item, index) => {\r\n      if (node.isRoot) {\r\n        let prevBother = node\r\n        // 根节点的子节点是和根节点同一水平线排列\r\n        node.children.forEach((item, index) => {\r\n          let y1 = prevBother.top + prevBother.height\r\n          let y2 = item.top\r\n          let x = node.left + node.width / 2\r\n          let path = `M ${x},${y1} L ${x},${y2}`\r\n          this.setLineStyle(style, lines[index], path, item)\r\n          prevBother = item\r\n        })\r\n      } else {\r\n        let x1 =\r\n          item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n            ? left - expandBtnSize\r\n            : left + width + expandBtnSize\r\n        let y1 = top + height / 2\r\n        let x2 =\r\n          item.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n            ? item.left + item.width\r\n            : item.left\r\n        let y2 = item.top + item.height / 2\r\n        let path = this.cubicBezierPath(x1, y1, x2, y2)\r\n        this.setLineStyle(style, lines[index], path, item)\r\n      }\r\n    })\r\n  }\r\n\r\n  //  渲染按钮\r\n  renderExpandBtn(node, btn) {\r\n    let { width, height, expandBtnSize, isRoot } = node\r\n    if (!isRoot) {\r\n      let { translateX, translateY } = btn.transform()\r\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.RIGHT) {\r\n        btn.translate(width - translateX, height / 2 - translateY)\r\n      } else {\r\n        btn.translate(-expandBtnSize - translateX, height / 2 - translateY)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  创建概要节点\r\n  renderGeneralization(list) {\r\n    list.forEach(item => {\r\n      let isLeft = item.node.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT\r\n      let {\r\n        top,\r\n        bottom,\r\n        left,\r\n        right,\r\n        generalizationLineMargin,\r\n        generalizationNodeMargin\r\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h')\r\n      let x = isLeft\r\n        ? left - generalizationLineMargin\r\n        : right + generalizationLineMargin\r\n      let x1 = x\r\n      let y1 = top\r\n      let x2 = x\r\n      let y2 = bottom\r\n      let cx = x1 + (isLeft ? -20 : 20)\r\n      let cy = y1 + (y2 - y1) / 2\r\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\r\n      item.generalizationLine.plot(this.transformPath(path))\r\n      item.generalizationNode.left =\r\n        x +\r\n        (isLeft ? -generalizationNodeMargin : generalizationNodeMargin) -\r\n        (isLeft ? item.generalizationNode.width : 0)\r\n      item.generalizationNode.top =\r\n        top + (bottom - top - item.generalizationNode.height) / 2\r\n    })\r\n  }\r\n\r\n  // 渲染展开收起按钮的隐藏占位元素\r\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\r\n    if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.LEFT) {\r\n      rect.size(expandBtnSize, height).x(-expandBtnSize).y(0)\r\n    } else {\r\n      rect.size(expandBtnSize, height).x(width).y(0)\r\n    }\r\n  }\r\n}\r\n\r\nexport default VerticalTimeline\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}