{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { attrs as defaults } from './defaults.js';\nimport { isNumber } from './regex.js';\nimport Color from '../../types/Color.js';\nimport SVGArray from '../../types/SVGArray.js';\nimport SVGNumber from '../../types/SVGNumber.js';\nconst colorAttributes = new Set(['fill', 'stroke', 'color', 'bgcolor', 'stop-color', 'flood-color', 'lighting-color']);\nconst hooks = [];\nexport function registerAttrHook(fn) {\n  hooks.push(fn);\n}\n\n// Set svg element attribute\nexport default function attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {};\n    val = this.node.attributes;\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue) ? parseFloat(node.nodeValue) : node.nodeValue;\n    }\n    return attr;\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr);\n      return last;\n    }, {});\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val]);\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr);\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr);\n    return val == null ? defaults[attr] : isNumber.test(val) ? parseFloat(val) : val;\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this);\n    }, val);\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val);\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val);\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val);\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val);\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string' ? this.node.setAttributeNS(ns, attr, val.toString()) : this.node.setAttribute(attr, val.toString());\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild();\n    }\n  }\n  return this;\n}","map":{"version":3,"names":["attrs","defaults","isNumber","Color","SVGArray","SVGNumber","colorAttributes","Set","hooks","registerAttrHook","fn","push","attr","val","ns","node","attributes","nodeName","test","nodeValue","parseFloat","Array","reduce","last","curr","constructor","Object","removeAttribute","getAttribute","_val","hook","has","isColor","leading","setAttributeNS","toString","setAttribute","rebuild"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/modules/core/attr.js"],"sourcesContent":["import { attrs as defaults } from './defaults.js'\nimport { isNumber } from './regex.js'\nimport Color from '../../types/Color.js'\nimport SVGArray from '../../types/SVGArray.js'\nimport SVGNumber from '../../types/SVGNumber.js'\n\nconst colorAttributes = new Set([\n  'fill',\n  'stroke',\n  'color',\n  'bgcolor',\n  'stop-color',\n  'flood-color',\n  'lighting-color'\n])\n\nconst hooks = []\nexport function registerAttrHook(fn) {\n  hooks.push(fn)\n}\n\n// Set svg element attribute\nexport default function attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {}\n    val = this.node.attributes\n\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue)\n        ? parseFloat(node.nodeValue)\n        : node.nodeValue\n    }\n\n    return attr\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr)\n      return last\n    }, {})\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val])\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr)\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr)\n    return val == null\n      ? defaults[attr]\n      : isNumber.test(val)\n        ? parseFloat(val)\n        : val\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this)\n    }, val)\n\n    // ensure correct numeric values (also accepts NaN and Infinity)\n    if (typeof val === 'number') {\n      val = new SVGNumber(val)\n    } else if (colorAttributes.has(attr) && Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val)\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val)\n    }\n\n    // if the passed attribute is leading...\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val)\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string'\n        ? this.node.setAttributeNS(ns, attr, val.toString())\n        : this.node.setAttribute(attr, val.toString())\n    }\n\n    // rebuild if required\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild()\n    }\n  }\n\n  return this\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}