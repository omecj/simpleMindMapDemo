{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Node from './Node';\nimport { createUid } from '../../../utils/index';\n\n// 获取节点概要数据\nfunction formatGetGeneralization() {\n  const data = this.getData('generalization');\n  return Array.isArray(data) ? data : data ? [data] : [];\n}\n\n//  检查是否存在概要\nfunction checkHasGeneralization() {\n  return this.formatGetGeneralization().length > 0;\n}\n\n//  检查是否存在自身的概要，非子节点区间\nfunction checkHasSelfGeneralization() {\n  const list = this.formatGetGeneralization();\n  return !!list.find(item => {\n    return !item.range || item.range.length <= 0;\n  });\n}\n\n// 获取概要节点所在的概要列表里的索引\nfunction getGeneralizationNodeIndex(node) {\n  return this._generalizationList.findIndex(item => {\n    return item.generalizationNode.uid === node.uid;\n  });\n}\n\n//  创建概要节点\nfunction createGeneralizationNode() {\n  if (this.isGeneralization || !this.checkHasGeneralization()) {\n    return;\n  }\n  let maxWidth = 0;\n  let maxHeight = 0;\n  const list = this.formatGetGeneralization();\n  list.forEach((item, index) => {\n    let cur = this._generalizationList[index];\n    if (!cur) {\n      cur = this._generalizationList[index] = {};\n    }\n    // 所属节点\n    cur.node = this;\n    // 区间范围\n    cur.range = item.range;\n    // 线和节点\n    if (!cur.generalizationLine) {\n      cur.generalizationLine = this.lineDraw.path();\n    }\n    if (!cur.generalizationNode) {\n      cur.generalizationNode = new Node({\n        data: {\n          inserting: item.inserting,\n          data: item\n        },\n        uid: createUid(),\n        renderer: this.renderer,\n        mindMap: this.mindMap,\n        isGeneralization: true\n      });\n    }\n    delete item.inserting;\n    // 关联所属节点\n    cur.generalizationNode.generalizationBelongNode = this;\n    // 大小\n    if (cur.generalizationNode.width > maxWidth) maxWidth = cur.generalizationNode.width;\n    if (cur.generalizationNode.height > maxHeight) maxHeight = cur.generalizationNode.height;\n    // 如果该概要为激活状态，那么加入激活节点列表\n    if (item.isActive) {\n      this.renderer.addNodeToActiveList(cur.generalizationNode);\n    }\n  });\n  this._generalizationNodeWidth = maxWidth;\n  this._generalizationNodeHeight = maxHeight;\n}\n\n//  更新概要节点\nfunction updateGeneralization() {\n  if (this.isGeneralization) return;\n  this.removeGeneralization();\n  this.createGeneralizationNode();\n}\n\n//  渲染概要节点\nfunction renderGeneralization() {\n  if (this.isGeneralization) return;\n  this.updateGeneralizationData();\n  const list = this.formatGetGeneralization();\n  if (list.length <= 0 || this.getData('expand') === false) {\n    this.removeGeneralization();\n    return;\n  }\n  if (list.length !== this._generalizationList.length) {\n    this.removeGeneralization();\n  }\n  this.createGeneralizationNode();\n  this.renderer.layout.renderGeneralization(this._generalizationList);\n  this._generalizationList.forEach(item => {\n    this.style.generalizationLine(item.generalizationLine);\n    item.generalizationNode.render();\n  });\n}\n\n// 更新节点概要数据\nfunction updateGeneralizationData() {\n  const childrenLength = this.nodeData.children.length;\n  const list = this.formatGetGeneralization();\n  const newList = [];\n  list.forEach(item => {\n    if (!item.range) {\n      newList.push(item);\n      return;\n    }\n    if (item.range.length > 0 && item.range[0] <= childrenLength - 1 && item.range[1] <= childrenLength - 1) {\n      newList.push(item);\n    }\n  });\n  if (newList.length !== list.length) {\n    this.setData({\n      generalization: newList\n    });\n  }\n}\n\n//  删除概要节点\nfunction removeGeneralization() {\n  if (this.isGeneralization) return;\n  this._generalizationList.forEach(item => {\n    item.generalizationNode.style.onRemove();\n    if (item.generalizationLine) {\n      item.generalizationLine.remove();\n      item.generalizationLine = null;\n    }\n    if (item.generalizationNode) {\n      // 删除概要节点时要同步从激活节点里删除\n      this.renderer.removeNodeFromActiveList(item.generalizationNode);\n      item.generalizationNode.remove();\n      item.generalizationNode = null;\n    }\n  });\n  this._generalizationList = [];\n  // hack修复当激活一个节点时创建概要，然后立即激活创建的概要节点后会重复创建概要节点并且无法删除的问题\n  if (this.generalizationBelongNode) {\n    this.nodeDraw.find('.generalization_' + this.generalizationBelongNode.uid).remove();\n  }\n}\n\n//  隐藏概要节点\nfunction hideGeneralization() {\n  if (this.isGeneralization) return;\n  this._generalizationList.forEach(item => {\n    if (item.generalizationLine) item.generalizationLine.hide();\n    if (item.generalizationNode) item.generalizationNode.hide();\n  });\n}\n\n//  显示概要节点\nfunction showGeneralization() {\n  if (this.isGeneralization) return;\n  this._generalizationList.forEach(item => {\n    if (item.generalizationLine) item.generalizationLine.show();\n    if (item.generalizationNode) item.generalizationNode.show();\n  });\n}\n\n// 设置概要节点的透明度\nfunction setGeneralizationOpacity(val) {\n  this._generalizationList.forEach(item => {\n    item.generalizationLine.opacity(val);\n    item.generalizationNode.group.opacity(val);\n  });\n}\n\n// 处理概要节点鼠标移入事件\nfunction handleGeneralizationMouseenter() {\n  const belongNode = this.generalizationBelongNode;\n  const list = belongNode.formatGetGeneralization();\n  const index = belongNode.getGeneralizationNodeIndex(this);\n  const generalizationData = list[index];\n  // 区间概要，框子节点\n  if (Array.isArray(generalizationData.range) && generalizationData.range.length > 0) {\n    this.mindMap.renderer.highlightNode(belongNode, generalizationData.range);\n  } else {\n    // 否则框自己\n    this.mindMap.renderer.highlightNode(belongNode);\n  }\n}\n\n// 处理概要节点鼠标移出事件\nfunction handleGeneralizationMouseleave() {\n  this.mindMap.renderer.closeHighlightNode();\n}\nexport default {\n  formatGetGeneralization,\n  checkHasGeneralization,\n  checkHasSelfGeneralization,\n  getGeneralizationNodeIndex,\n  createGeneralizationNode,\n  updateGeneralization,\n  updateGeneralizationData,\n  renderGeneralization,\n  removeGeneralization,\n  hideGeneralization,\n  showGeneralization,\n  setGeneralizationOpacity,\n  handleGeneralizationMouseenter,\n  handleGeneralizationMouseleave\n};","map":{"version":3,"names":["Node","createUid","formatGetGeneralization","data","getData","Array","isArray","checkHasGeneralization","length","checkHasSelfGeneralization","list","find","item","range","getGeneralizationNodeIndex","node","_generalizationList","findIndex","generalizationNode","uid","createGeneralizationNode","isGeneralization","maxWidth","maxHeight","forEach","index","cur","generalizationLine","lineDraw","path","inserting","renderer","mindMap","generalizationBelongNode","width","height","isActive","addNodeToActiveList","_generalizationNodeWidth","_generalizationNodeHeight","updateGeneralization","removeGeneralization","renderGeneralization","updateGeneralizationData","layout","style","render","childrenLength","nodeData","children","newList","push","setData","generalization","onRemove","remove","removeNodeFromActiveList","nodeDraw","hideGeneralization","hide","showGeneralization","show","setGeneralizationOpacity","val","opacity","group","handleGeneralizationMouseenter","belongNode","generalizationData","highlightNode","handleGeneralizationMouseleave","closeHighlightNode"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/render/node/nodeGeneralization.js"],"sourcesContent":["import Node from './Node'\r\nimport { createUid } from '../../../utils/index'\r\n\r\n// 获取节点概要数据\r\nfunction formatGetGeneralization() {\r\n  const data = this.getData('generalization')\r\n  return Array.isArray(data) ? data : data ? [data] : []\r\n}\r\n\r\n//  检查是否存在概要\r\nfunction checkHasGeneralization() {\r\n  return this.formatGetGeneralization().length > 0\r\n}\r\n\r\n//  检查是否存在自身的概要，非子节点区间\r\nfunction checkHasSelfGeneralization() {\r\n  const list = this.formatGetGeneralization()\r\n  return !!list.find(item => {\r\n    return !item.range || item.range.length <= 0\r\n  })\r\n}\r\n\r\n// 获取概要节点所在的概要列表里的索引\r\nfunction getGeneralizationNodeIndex(node) {\r\n  return this._generalizationList.findIndex(item => {\r\n    return item.generalizationNode.uid === node.uid\r\n  })\r\n}\r\n\r\n//  创建概要节点\r\nfunction createGeneralizationNode() {\r\n  if (this.isGeneralization || !this.checkHasGeneralization()) {\r\n    return\r\n  }\r\n  let maxWidth = 0\r\n  let maxHeight = 0\r\n  const list = this.formatGetGeneralization()\r\n  list.forEach((item, index) => {\r\n    let cur = this._generalizationList[index]\r\n    if (!cur) {\r\n      cur = this._generalizationList[index] = {}\r\n    }\r\n    // 所属节点\r\n    cur.node = this\r\n    // 区间范围\r\n    cur.range = item.range\r\n    // 线和节点\r\n    if (!cur.generalizationLine) {\r\n      cur.generalizationLine = this.lineDraw.path()\r\n    }\r\n    if (!cur.generalizationNode) {\r\n      cur.generalizationNode = new Node({\r\n        data: {\r\n          inserting: item.inserting,\r\n          data: item\r\n        },\r\n        uid: createUid(),\r\n        renderer: this.renderer,\r\n        mindMap: this.mindMap,\r\n        isGeneralization: true\r\n      })\r\n    }\r\n    delete item.inserting\r\n    // 关联所属节点\r\n    cur.generalizationNode.generalizationBelongNode = this\r\n    // 大小\r\n    if (cur.generalizationNode.width > maxWidth)\r\n      maxWidth = cur.generalizationNode.width\r\n    if (cur.generalizationNode.height > maxHeight)\r\n      maxHeight = cur.generalizationNode.height\r\n    // 如果该概要为激活状态，那么加入激活节点列表\r\n    if (item.isActive) {\r\n      this.renderer.addNodeToActiveList(cur.generalizationNode)\r\n    }\r\n  })\r\n  this._generalizationNodeWidth = maxWidth\r\n  this._generalizationNodeHeight = maxHeight\r\n}\r\n\r\n//  更新概要节点\r\nfunction updateGeneralization() {\r\n  if (this.isGeneralization) return\r\n  this.removeGeneralization()\r\n  this.createGeneralizationNode()\r\n}\r\n\r\n//  渲染概要节点\r\nfunction renderGeneralization() {\r\n  if (this.isGeneralization) return\r\n  this.updateGeneralizationData()\r\n  const list = this.formatGetGeneralization()\r\n  if (list.length <= 0 || this.getData('expand') === false) {\r\n    this.removeGeneralization()\r\n    return\r\n  }\r\n  if (list.length !== this._generalizationList.length) {\r\n    this.removeGeneralization()\r\n  }\r\n  this.createGeneralizationNode()\r\n  this.renderer.layout.renderGeneralization(this._generalizationList)\r\n  this._generalizationList.forEach(item => {\r\n    this.style.generalizationLine(item.generalizationLine)\r\n    item.generalizationNode.render()\r\n  })\r\n}\r\n\r\n// 更新节点概要数据\r\nfunction updateGeneralizationData() {\r\n  const childrenLength = this.nodeData.children.length\r\n  const list = this.formatGetGeneralization()\r\n  const newList = []\r\n  list.forEach(item => {\r\n    if (!item.range) {\r\n      newList.push(item)\r\n      return\r\n    }\r\n    if (\r\n      item.range.length > 0 &&\r\n      item.range[0] <= childrenLength - 1 &&\r\n      item.range[1] <= childrenLength - 1\r\n    ) {\r\n      newList.push(item)\r\n    }\r\n  })\r\n  if (newList.length !== list.length) {\r\n    this.setData({\r\n      generalization: newList\r\n    })\r\n  }\r\n}\r\n\r\n//  删除概要节点\r\nfunction removeGeneralization() {\r\n  if (this.isGeneralization) return\r\n  this._generalizationList.forEach(item => {\r\n    item.generalizationNode.style.onRemove()\r\n    if (item.generalizationLine) {\r\n      item.generalizationLine.remove()\r\n      item.generalizationLine = null\r\n    }\r\n    if (item.generalizationNode) {\r\n      // 删除概要节点时要同步从激活节点里删除\r\n      this.renderer.removeNodeFromActiveList(item.generalizationNode)\r\n      item.generalizationNode.remove()\r\n      item.generalizationNode = null\r\n    }\r\n  })\r\n  this._generalizationList = []\r\n  // hack修复当激活一个节点时创建概要，然后立即激活创建的概要节点后会重复创建概要节点并且无法删除的问题\r\n  if (this.generalizationBelongNode) {\r\n    this.nodeDraw\r\n      .find('.generalization_' + this.generalizationBelongNode.uid)\r\n      .remove()\r\n  }\r\n}\r\n\r\n//  隐藏概要节点\r\nfunction hideGeneralization() {\r\n  if (this.isGeneralization) return\r\n  this._generalizationList.forEach(item => {\r\n    if (item.generalizationLine) item.generalizationLine.hide()\r\n    if (item.generalizationNode) item.generalizationNode.hide()\r\n  })\r\n}\r\n\r\n//  显示概要节点\r\nfunction showGeneralization() {\r\n  if (this.isGeneralization) return\r\n  this._generalizationList.forEach(item => {\r\n    if (item.generalizationLine) item.generalizationLine.show()\r\n    if (item.generalizationNode) item.generalizationNode.show()\r\n  })\r\n}\r\n\r\n// 设置概要节点的透明度\r\nfunction setGeneralizationOpacity(val) {\r\n  this._generalizationList.forEach(item => {\r\n    item.generalizationLine.opacity(val)\r\n    item.generalizationNode.group.opacity(val)\r\n  })\r\n}\r\n\r\n// 处理概要节点鼠标移入事件\r\nfunction handleGeneralizationMouseenter() {\r\n  const belongNode = this.generalizationBelongNode\r\n  const list = belongNode.formatGetGeneralization()\r\n  const index = belongNode.getGeneralizationNodeIndex(this)\r\n  const generalizationData = list[index]\r\n  // 区间概要，框子节点\r\n  if (\r\n    Array.isArray(generalizationData.range) &&\r\n    generalizationData.range.length > 0\r\n  ) {\r\n    this.mindMap.renderer.highlightNode(belongNode, generalizationData.range)\r\n  } else {\r\n    // 否则框自己\r\n    this.mindMap.renderer.highlightNode(belongNode)\r\n  }\r\n}\r\n\r\n// 处理概要节点鼠标移出事件\r\nfunction handleGeneralizationMouseleave() {\r\n  this.mindMap.renderer.closeHighlightNode()\r\n}\r\n\r\nexport default {\r\n  formatGetGeneralization,\r\n  checkHasGeneralization,\r\n  checkHasSelfGeneralization,\r\n  getGeneralizationNodeIndex,\r\n  createGeneralizationNode,\r\n  updateGeneralization,\r\n  updateGeneralizationData,\r\n  renderGeneralization,\r\n  removeGeneralization,\r\n  hideGeneralization,\r\n  showGeneralization,\r\n  setGeneralizationOpacity,\r\n  handleGeneralizationMouseenter,\r\n  handleGeneralizationMouseleave\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}