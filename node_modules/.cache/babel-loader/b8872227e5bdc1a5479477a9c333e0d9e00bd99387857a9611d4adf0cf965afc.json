{"ast":null,"code":"/**\r\n * 防御 XSS 攻击，过滤恶意 HTML 标签和属性\r\n * @param {string} text 需要过滤的文本\r\n * @returns {string} 过滤后的文本\r\n */\nexport function defenseXSS(text) {\n  text = String(text);\n\n  // 初始化结果变量\n  let result = text;\n\n  // 使用正则表达式匹配 HTML 标签\n  const match = text.match(/<(\\S*?)[^>]*>.*?|<.*? \\/>/g);\n  if (match == null) {\n    // 如果没有匹配到任何标签，则直接返回原始文本\n    return text;\n  }\n\n  // 遍历匹配到的标签\n  for (let value of match) {\n    // 定义白名单属性正则表达式（style、target、href）\n    const whiteAttrRegex = new RegExp(/(style|target|href)=[\"'][^\"']*[\"']/g);\n\n    // 定义黑名单href正则表达式（javascript:）\n    const aHrefBlackRegex = new RegExp(/href=[\"']javascript:/g);\n\n    // 过滤 HTML 标签\n    const filterHtml = value.replace(\n    // 匹配属性键值对（如：key=\"value\"）\n    /([a-zA-Z-]+)\\s*=\\s*[\"']([^\"']*)[\"']/g, text => {\n      // 如果属性值包含黑名单href或不在白名单中，则删除该属性\n      if (aHrefBlackRegex.test(text) || !whiteAttrRegex.test(text)) {\n        return \"\";\n      }\n\n      // 否则，保留该属性\n      return text;\n    });\n\n    // 将过滤后的标签替换回原始文本\n    result = result.replace(value, filterHtml);\n  }\n\n  // 返回最终结果\n  return result;\n}","map":{"version":3,"names":["defenseXSS","text","String","result","match","value","whiteAttrRegex","RegExp","aHrefBlackRegex","filterHtml","replace","test"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/utils/xss.js"],"sourcesContent":["/**\r\n * 防御 XSS 攻击，过滤恶意 HTML 标签和属性\r\n * @param {string} text 需要过滤的文本\r\n * @returns {string} 过滤后的文本\r\n */\r\nexport function defenseXSS(text) {\r\n    text = String(text)\r\n\r\n    // 初始化结果变量\r\n    let result = text;\r\n\r\n    // 使用正则表达式匹配 HTML 标签\r\n    const match = text.match(/<(\\S*?)[^>]*>.*?|<.*? \\/>/g);\r\n    if (match == null) {\r\n        // 如果没有匹配到任何标签，则直接返回原始文本\r\n        return text;\r\n    }\r\n\r\n    // 遍历匹配到的标签\r\n    for (let value of match) {\r\n        // 定义白名单属性正则表达式（style、target、href）\r\n        const whiteAttrRegex = new RegExp(/(style|target|href)=[\"'][^\"']*[\"']/g);\r\n\r\n        // 定义黑名单href正则表达式（javascript:）\r\n        const aHrefBlackRegex = new RegExp(/href=[\"']javascript:/g);\r\n\r\n        // 过滤 HTML 标签\r\n        const filterHtml = value.replace(\r\n            // 匹配属性键值对（如：key=\"value\"）\r\n            /([a-zA-Z-]+)\\s*=\\s*[\"']([^\"']*)[\"']/g,\r\n            (text) => {\r\n                // 如果属性值包含黑名单href或不在白名单中，则删除该属性\r\n                if (aHrefBlackRegex.test(text) || !whiteAttrRegex.test(text)) {\r\n                    return \"\";\r\n                }\r\n\r\n                // 否则，保留该属性\r\n                return text;\r\n            }\r\n        );\r\n\r\n        // 将过滤后的标签替换回原始文本\r\n        result = result.replace(value, filterHtml);\r\n    }\r\n\r\n    // 返回最终结果\r\n    return result;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAE;EAC7BA,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC;;EAEnB;EACA,IAAIE,MAAM,GAAGF,IAAI;;EAEjB;EACA,MAAMG,KAAK,GAAGH,IAAI,CAACG,KAAK,CAAC,4BAA4B,CAAC;EACtD,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf;IACA,OAAOH,IAAI;EACf;;EAEA;EACA,KAAK,IAAII,KAAK,IAAID,KAAK,EAAE;IACrB;IACA,MAAME,cAAc,GAAG,IAAIC,MAAM,CAAC,qCAAqC,CAAC;;IAExE;IACA,MAAMC,eAAe,GAAG,IAAID,MAAM,CAAC,uBAAuB,CAAC;;IAE3D;IACA,MAAME,UAAU,GAAGJ,KAAK,CAACK,OAAO;IAC5B;IACA,sCAAsC,EACrCT,IAAI,IAAK;MACN;MACA,IAAIO,eAAe,CAACG,IAAI,CAACV,IAAI,CAAC,IAAI,CAACK,cAAc,CAACK,IAAI,CAACV,IAAI,CAAC,EAAE;QAC1D,OAAO,EAAE;MACb;;MAEA;MACA,OAAOA,IAAI;IACf,CACJ,CAAC;;IAED;IACAE,MAAM,GAAGA,MAAM,CAACO,OAAO,CAACL,KAAK,EAAEI,UAAU,CAAC;EAC9C;;EAEA;EACA,OAAON,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}