{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { delimiter } from '../modules/core/regex.js';\nimport SVGArray from './SVGArray.js';\nimport Box from './Box.js';\nimport Matrix from './Matrix.js';\nexport default class PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let minX = Infinity;\n    let minY = Infinity;\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX);\n      maxY = Math.max(el[1], maxY);\n      minX = Math.min(el[0], minX);\n      minY = Math.min(el[1], minY);\n    });\n    return new Box(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox();\n\n    // get relative offset\n    x -= box.x;\n    y -= box.y;\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y];\n      }\n    }\n    return this;\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = [];\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array);\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat);\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop();\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]]);\n    }\n    return points;\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i;\n    const box = this.bbox();\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width) this[i][0] = (this[i][0] - box.x) * width / box.width + box.x;\n      if (box.height) this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n    }\n    return this;\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    };\n  }\n\n  // Convert array to string\n  toString() {\n    const array = [];\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','));\n    }\n    return array.join(' ');\n  }\n  transform(m) {\n    return this.clone().transformO(m);\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m);\n    }\n    for (let i = this.length; i--;) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i];\n      this[i][0] = m.a * x + m.c * y + m.e;\n      this[i][1] = m.b * x + m.d * y + m.f;\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["delimiter","SVGArray","Box","Matrix","PointArray","bbox","maxX","Infinity","maxY","minX","minY","forEach","el","Math","max","min","move","x","y","box","isNaN","i","length","parse","array","points","Array","prototype","concat","apply","trim","split","map","parseFloat","pop","len","push","size","width","height","toLine","x1","y1","x2","y2","toString","il","join","transform","m","clone","transformO","isMatrixLike","a","c","e","b","d","f"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/types/PointArray.js"],"sourcesContent":["import { delimiter } from '../modules/core/regex.js'\nimport SVGArray from './SVGArray.js'\nimport Box from './Box.js'\nimport Matrix from './Matrix.js'\n\nexport default class PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity\n    let maxY = -Infinity\n    let minX = Infinity\n    let minY = Infinity\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX)\n      maxY = Math.max(el[1], maxY)\n      minX = Math.min(el[0], minX)\n      minY = Math.min(el[1], minY)\n    })\n    return new Box(minX, minY, maxX - minX, maxY - minY)\n  }\n\n  // Move point string\n  move(x, y) {\n    const box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y]\n      }\n    }\n\n    return this\n  }\n\n  // Parse point string and flat array\n  parse(array = [0, 0]) {\n    const points = []\n\n    // if it is an array, we flatten it and therefore clone it to 1 depths\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array)\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat)\n    }\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop()\n\n    // wrap points in two-tuples\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]])\n    }\n\n    return points\n  }\n\n  // Resize poly string\n  size(width, height) {\n    let i\n    const box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width)\n        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x\n      if (box.height)\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n\n  // Convert array to line object\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    }\n  }\n\n  // Convert array to string\n  toString() {\n    const array = []\n    // convert to a poly point string\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','))\n    }\n\n    return array.join(' ')\n  }\n\n  transform(m) {\n    return this.clone().transformO(m)\n  }\n\n  // transform points with matrix (similar to Point.transform)\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m)\n    }\n\n    for (let i = this.length; i--; ) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i]\n      this[i][0] = m.a * x + m.c * y + m.e\n      this[i][1] = m.b * x + m.d * y + m.f\n    }\n\n    return this\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}