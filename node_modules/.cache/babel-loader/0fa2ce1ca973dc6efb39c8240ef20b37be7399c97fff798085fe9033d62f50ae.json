{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { delimiter } from '../modules/core/regex.js';\nexport default class SVGArray extends Array {\n  constructor(...args) {\n    super(...args);\n    this.init(...args);\n  }\n  clone() {\n    return new this.constructor(this);\n  }\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push(...this.parse(arr));\n    return this;\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array;\n    return array.trim().split(delimiter).map(parseFloat);\n  }\n  toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n  toSet() {\n    return new Set(this);\n  }\n  toString() {\n    return this.join(' ');\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = [];\n    ret.push(...this);\n    return ret;\n  }\n}","map":{"version":3,"names":["delimiter","SVGArray","Array","constructor","args","init","clone","arr","length","push","parse","array","trim","split","map","parseFloat","toArray","prototype","concat","apply","toSet","Set","toString","join","valueOf","ret"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/types/SVGArray.js"],"sourcesContent":["import { delimiter } from '../modules/core/regex.js'\n\nexport default class SVGArray extends Array {\n  constructor(...args) {\n    super(...args)\n    this.init(...args)\n  }\n\n  clone() {\n    return new this.constructor(this)\n  }\n\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this\n    this.length = 0\n    this.push(...this.parse(arr))\n    return this\n  }\n\n  // Parse whitespace separated string\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array\n\n    return array.trim().split(delimiter).map(parseFloat)\n  }\n\n  toArray() {\n    return Array.prototype.concat.apply([], this)\n  }\n\n  toSet() {\n    return new Set(this)\n  }\n\n  toString() {\n    return this.join(' ')\n  }\n\n  // Flattens the array if needed\n  valueOf() {\n    const ret = []\n    ret.push(...this)\n    return ret\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,SAAS,QAAQ,0BAA0B;AAEpD,eAAe,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAC1CC,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACnB,KAAK,CAAC,GAAGA,IAAI,CAAC;IACd,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAAC;EACpB;EAEAE,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,IAAI,CAACH,WAAW,CAAC,IAAI,CAAC;EACnC;EAEAE,IAAIA,CAACE,GAAG,EAAE;IACR;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,IAAI;IACxC,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,CAAC;IAC7B,OAAO,IAAI;EACb;;EAEA;EACAG,KAAKA,CAACC,KAAK,GAAG,EAAE,EAAE;IAChB;IACA,IAAIA,KAAK,YAAYT,KAAK,EAAE,OAAOS,KAAK;IAExC,OAAOA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAACb,SAAS,CAAC,CAACc,GAAG,CAACC,UAAU,CAAC;EACtD;EAEAC,OAAOA,CAAA,EAAG;IACR,OAAOd,KAAK,CAACe,SAAS,CAACC,MAAM,CAACC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC;EAC/C;EAEAC,KAAKA,CAAA,EAAG;IACN,OAAO,IAAIC,GAAG,CAAC,IAAI,CAAC;EACtB;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;EACvB;;EAEA;EACAC,OAAOA,CAAA,EAAG;IACR,MAAMC,GAAG,GAAG,EAAE;IACdA,GAAG,CAAChB,IAAI,CAAC,GAAG,IAAI,CAAC;IACjB,OAAOgB,GAAG;EACZ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}