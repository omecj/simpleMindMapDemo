{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Base from './Base';\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils';\nimport { CONSTANTS } from '../constants/constant';\n\n//  时间轴\nclass Timeline extends Base {\n  //  构造函数\n  constructor(opt = {}, layout) {\n    super(opt);\n    this.layout = layout;\n  }\n\n  //  布局\n  doLayout(callback) {\n    let task = [() => {\n      this.computedBaseValue();\n    }, () => {\n      this.computedLeftTopValue();\n    }, () => {\n      this.adjustLeftTopValue();\n    }, () => {\n      callback(this.root);\n    }];\n    asyncRun(task);\n  }\n\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\n  computedBaseValue() {\n    walk(this.renderer.renderTree, null, (cur, parent, isRoot, layerIndex, index) => {\n      let newNode = this.createNode(cur, parent, isRoot, layerIndex);\n      // 根节点定位在画布中心位置\n      if (isRoot) {\n        this.setNodeCenter(newNode);\n      } else {\n        // 非根节点\n        // 时间轴2类型需要交替显示\n        if (this.layout === CONSTANTS.LAYOUT.TIMELINE2) {\n          // 三级及以下节点以上级为准\n          if (parent._node.dir) {\n            newNode.dir = parent._node.dir;\n          } else {\n            // 节点生长方向\n            newNode.dir = index % 2 === 0 ? CONSTANTS.LAYOUT_GROW_DIR.BOTTOM : CONSTANTS.LAYOUT_GROW_DIR.TOP;\n          }\n        } else {\n          newNode.dir = '';\n        }\n        if (parent._node.isRoot) {\n          newNode.top = parent._node.top + (cur._node.height > parent._node.height ? -(cur._node.height - parent._node.height) / 2 : (parent._node.height - cur._node.height) / 2);\n        }\n      }\n      if (!cur.data.expand) {\n        return true;\n      }\n    }, null, true, 0);\n  }\n\n  //  遍历节点树计算节点的left、top\n  computedLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex, index) => {\n      if (node.getData('expand') && node.children && node.children.length) {\n        let marginX = this.getMarginX(layerIndex + 1);\n        let marginY = this.getMarginY(layerIndex + 1);\n        if (isRoot) {\n          let left = node.left + node.width;\n          let totalLeft = left + marginX;\n          node.children.forEach(cur => {\n            cur.left = totalLeft;\n            totalLeft += cur.width + marginX;\n          });\n        } else {\n          let totalTop = node.top + node.height + marginY + (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0);\n          node.children.forEach(cur => {\n            cur.left = node.left + node.width * 0.5;\n            cur.top = totalTop;\n            totalTop += cur.height + marginY + (this.getNodeActChildrenLength(cur) > 0 ? cur.expandBtnSize : 0);\n          });\n        }\n      }\n    }, null, true);\n  }\n\n  //  调整节点left、top\n  adjustLeftTopValue() {\n    walk(this.root, null, (node, parent, isRoot, layerIndex) => {\n      if (!node.getData('expand')) {\n        return;\n      }\n      // 调整left\n      if (node.isRoot) {\n        this.updateBrothersLeft(node);\n      }\n      // 调整top\n      let len = node.children.length;\n      if (parent && !parent.isRoot && len > 0) {\n        let marginY = this.getMarginY(layerIndex + 1);\n        let totalHeight = node.children.reduce((h, item) => {\n          return h + item.height + (this.getNodeActChildrenLength(item) > 0 ? item.expandBtnSize : 0);\n        }, 0) + len * marginY;\n        this.updateBrothersTop(node, totalHeight);\n      }\n    }, (node, parent, isRoot, layerIndex) => {\n      if (parent && parent.isRoot && node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n        // 遍历二级节点的子节点\n        node.children.forEach(item => {\n          let totalHeight = this.getNodeAreaHeight(item);\n          let _top = item.top;\n          item.top = node.top - (item.top - node.top) - totalHeight + node.height;\n          this.updateChildren(item.children, 'top', item.top - _top);\n        });\n      }\n    }, true);\n  }\n\n  //  递归计算节点的宽度\n  getNodeAreaHeight(node) {\n    let totalHeight = 0;\n    let loop = node => {\n      totalHeight += node.height + (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) + this.getMarginY(node.layerIndex);\n      if (node.children.length) {\n        node.children.forEach(item => {\n          loop(item);\n        });\n      }\n    };\n    loop(node);\n    return totalHeight;\n  }\n\n  //  调整兄弟节点的left\n  updateBrothersLeft(node) {\n    let childrenList = node.children;\n    let totalAddWidth = 0;\n    childrenList.forEach(item => {\n      item.left += totalAddWidth;\n      if (item.children && item.children.length) {\n        this.updateChildren(item.children, 'left', totalAddWidth);\n      }\n      // let areaWidth = this.getNodeAreaWidth(item)\n      let {\n        left,\n        right\n      } = this.getNodeBoundaries(item, 'h');\n      let areaWidth = right - left;\n      let difference = areaWidth - item.width;\n      if (difference > 0) {\n        totalAddWidth += difference;\n      }\n    });\n  }\n\n  //  调整兄弟节点的top\n  updateBrothersTop(node, addHeight) {\n    if (node.parent && !node.parent.isRoot) {\n      let childrenList = node.parent.children;\n      let index = getNodeIndexInNodeList(node, childrenList);\n      childrenList.forEach((item, _index) => {\n        if (item.hasCustomPosition()) {\n          // 适配自定义位置\n          return;\n        }\n        let _offset = 0;\n        // 下面的节点往下移\n        if (_index > index) {\n          _offset = addHeight;\n        }\n        item.top += _offset;\n        // 同步更新子节点的位置\n        if (item.children && item.children.length) {\n          this.updateChildren(item.children, 'top', _offset);\n        }\n      });\n      // 更新父节点的位置\n      this.updateBrothersTop(node.parent, addHeight);\n    }\n  }\n\n  //  绘制连线，连接该节点到其子节点\n  renderLine(node, lines, style) {\n    if (node.children.length <= 0) {\n      return [];\n    }\n    let {\n      left,\n      top,\n      width,\n      height,\n      expandBtnSize\n    } = node;\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\n      expandBtnSize = 0;\n    }\n    let len = node.children.length;\n    if (node.isRoot) {\n      // 当前节点是根节点\n      let prevBother = node;\n      // 根节点的子节点是和根节点同一水平线排列\n      node.children.forEach((item, index) => {\n        let x1 = prevBother.left + prevBother.width;\n        let x2 = item.left;\n        let y = node.top + node.height / 2;\n        let path = `M ${x1},${y} L ${x2},${y}`;\n        this.setLineStyle(style, lines[index], path, item);\n        prevBother = item;\n      });\n    } else {\n      // 当前节点为非根节点\n      let maxy = -Infinity;\n      let miny = Infinity;\n      let x = node.left + node.width * 0.3;\n      node.children.forEach((item, index) => {\n        let y = item.top + item.height / 2;\n        if (y > maxy) {\n          maxy = y;\n        }\n        if (y < miny) {\n          miny = y;\n        }\n        // 水平线\n        let path = `M ${x},${y} L ${item.left},${y}`;\n        this.setLineStyle(style, lines[index], path, item);\n      });\n      // 竖线\n      if (len > 0) {\n        let line = this.lineDraw.path();\n        expandBtnSize = len > 0 ? expandBtnSize : 0;\n        if (node.parent && node.parent.isRoot && node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n          line.plot(this.transformPath(`M ${x},${top} L ${x},${miny}`));\n        } else {\n          line.plot(this.transformPath(`M ${x},${top + height + expandBtnSize} L ${x},${maxy}`));\n        }\n        node.style.line(line);\n        node._lines.push(line);\n        style && style(line, node);\n      }\n    }\n  }\n\n  //  渲染按钮\n  renderExpandBtn(node, btn) {\n    let {\n      width,\n      height,\n      expandBtnSize,\n      isRoot\n    } = node;\n    if (!isRoot) {\n      let {\n        translateX,\n        translateY\n      } = btn.transform();\n      if (node.parent && node.parent.isRoot && node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, -expandBtnSize / 2 - translateY);\n      } else {\n        btn.translate(width * 0.3 - expandBtnSize / 2 - translateX, height + expandBtnSize / 2 - translateY);\n      }\n    }\n  }\n\n  //  创建概要节点\n  renderGeneralization(list) {\n    list.forEach(item => {\n      let {\n        top,\n        bottom,\n        right,\n        generalizationLineMargin,\n        generalizationNodeMargin\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h');\n      let x1 = right + generalizationLineMargin;\n      let y1 = top;\n      let x2 = right + generalizationLineMargin;\n      let y2 = bottom;\n      let cx = x1 + 20;\n      let cy = y1 + (y2 - y1) / 2;\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`;\n      item.generalizationLine.plot(this.transformPath(path));\n      item.generalizationNode.left = right + generalizationNodeMargin;\n      item.generalizationNode.top = top + (bottom - top - item.generalizationNode.height) / 2;\n    });\n  }\n\n  // 渲染展开收起按钮的隐藏占位元素\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\n    if (this.layout === CONSTANTS.LAYOUT.TIMELINE) {\n      rect.size(width, expandBtnSize).x(0).y(height);\n    } else {\n      let dir = '';\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n        dir = node.layerIndex === 1 ? CONSTANTS.LAYOUT_GROW_DIR.TOP : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM;\n      } else {\n        dir = CONSTANTS.LAYOUT_GROW_DIR.BOTTOM;\n      }\n      if (dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\n        rect.size(width, expandBtnSize).x(0).y(-expandBtnSize);\n      } else {\n        rect.size(width, expandBtnSize).x(0).y(height);\n      }\n    }\n  }\n}\nexport default Timeline;","map":{"version":3,"names":["Base","walk","asyncRun","getNodeIndexInNodeList","CONSTANTS","Timeline","constructor","opt","layout","doLayout","callback","task","computedBaseValue","computedLeftTopValue","adjustLeftTopValue","root","renderer","renderTree","cur","parent","isRoot","layerIndex","index","newNode","createNode","setNodeCenter","LAYOUT","TIMELINE2","_node","dir","LAYOUT_GROW_DIR","BOTTOM","TOP","top","height","data","expand","node","getData","children","length","marginX","getMarginX","marginY","getMarginY","left","width","totalLeft","forEach","totalTop","getNodeActChildrenLength","expandBtnSize","updateBrothersLeft","len","totalHeight","reduce","h","item","updateBrothersTop","getNodeAreaHeight","_top","updateChildren","loop","childrenList","totalAddWidth","right","getNodeBoundaries","areaWidth","difference","addHeight","_index","hasCustomPosition","_offset","renderLine","lines","style","mindMap","alwaysShowExpandBtn","prevBother","x1","x2","y","path","setLineStyle","maxy","Infinity","miny","x","line","lineDraw","plot","transformPath","_lines","push","renderExpandBtn","btn","translateX","translateY","transform","translate","renderGeneralization","list","bottom","generalizationLineMargin","generalizationNodeMargin","getNodeGeneralizationRenderBoundaries","y1","y2","cx","cy","generalizationLine","generalizationNode","renderExpandBtnRect","rect","TIMELINE","size"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/layouts/Timeline.js"],"sourcesContent":["import Base from './Base'\r\nimport { walk, asyncRun, getNodeIndexInNodeList } from '../utils'\r\nimport { CONSTANTS } from '../constants/constant'\r\n\r\n//  时间轴\r\nclass Timeline extends Base {\r\n  //  构造函数\r\n  constructor(opt = {}, layout) {\r\n    super(opt)\r\n    this.layout = layout\r\n  }\r\n\r\n  //  布局\r\n  doLayout(callback) {\r\n    let task = [\r\n      () => {\r\n        this.computedBaseValue()\r\n      },\r\n      () => {\r\n        this.computedLeftTopValue()\r\n      },\r\n      () => {\r\n        this.adjustLeftTopValue()\r\n      },\r\n      () => {\r\n        callback(this.root)\r\n      }\r\n    ]\r\n    asyncRun(task)\r\n  }\r\n\r\n  //  遍历数据创建节点、计算根节点的位置，计算根节点的子节点的top值\r\n  computedBaseValue() {\r\n    walk(\r\n      this.renderer.renderTree,\r\n      null,\r\n      (cur, parent, isRoot, layerIndex, index) => {\r\n        let newNode = this.createNode(cur, parent, isRoot, layerIndex)\r\n        // 根节点定位在画布中心位置\r\n        if (isRoot) {\r\n          this.setNodeCenter(newNode)\r\n        } else {\r\n          // 非根节点\r\n          // 时间轴2类型需要交替显示\r\n          if (this.layout === CONSTANTS.LAYOUT.TIMELINE2) {\r\n            // 三级及以下节点以上级为准\r\n            if (parent._node.dir) {\r\n              newNode.dir = parent._node.dir\r\n            } else {\r\n              // 节点生长方向\r\n              newNode.dir =\r\n                index % 2 === 0\r\n                  ? CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n                  : CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n            }\r\n          } else {\r\n            newNode.dir = ''\r\n          }\r\n          if (parent._node.isRoot) {\r\n            newNode.top =\r\n              parent._node.top +\r\n              (cur._node.height > parent._node.height\r\n                ? -(cur._node.height - parent._node.height) / 2\r\n                : (parent._node.height - cur._node.height) / 2)\r\n          }\r\n        }\r\n        if (!cur.data.expand) {\r\n          return true\r\n        }\r\n      },\r\n      null,\r\n      true,\r\n      0\r\n    )\r\n  }\r\n\r\n  //  遍历节点树计算节点的left、top\r\n  computedLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex, index) => {\r\n        if (node.getData('expand') && node.children && node.children.length) {\r\n          let marginX = this.getMarginX(layerIndex + 1)\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          if (isRoot) {\r\n            let left = node.left + node.width\r\n            let totalLeft = left + marginX\r\n            node.children.forEach(cur => {\r\n              cur.left = totalLeft\r\n              totalLeft += cur.width + marginX\r\n            })\r\n          } else {\r\n            let totalTop =\r\n              node.top +\r\n              node.height +\r\n              marginY +\r\n              (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0)\r\n            node.children.forEach(cur => {\r\n              cur.left = node.left + node.width * 0.5\r\n              cur.top = totalTop\r\n              totalTop +=\r\n                cur.height +\r\n                marginY +\r\n                (this.getNodeActChildrenLength(cur) > 0 ? cur.expandBtnSize : 0)\r\n            })\r\n          }\r\n        }\r\n      },\r\n      null,\r\n      true\r\n    )\r\n  }\r\n\r\n  //  调整节点left、top\r\n  adjustLeftTopValue() {\r\n    walk(\r\n      this.root,\r\n      null,\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (!node.getData('expand')) {\r\n          return\r\n        }\r\n        // 调整left\r\n        if (node.isRoot) {\r\n          this.updateBrothersLeft(node)\r\n        }\r\n        // 调整top\r\n        let len = node.children.length\r\n        if (parent && !parent.isRoot && len > 0) {\r\n          let marginY = this.getMarginY(layerIndex + 1)\r\n          let totalHeight =\r\n            node.children.reduce((h, item) => {\r\n              return (\r\n                h +\r\n                item.height +\r\n                (this.getNodeActChildrenLength(item) > 0\r\n                  ? item.expandBtnSize\r\n                  : 0)\r\n              )\r\n            }, 0) +\r\n            len * marginY\r\n          this.updateBrothersTop(node, totalHeight)\r\n        }\r\n      },\r\n      (node, parent, isRoot, layerIndex) => {\r\n        if (\r\n          parent &&\r\n          parent.isRoot &&\r\n          node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n        ) {\r\n          // 遍历二级节点的子节点\r\n          node.children.forEach(item => {\r\n            let totalHeight = this.getNodeAreaHeight(item)\r\n            let _top = item.top\r\n            item.top =\r\n              node.top - (item.top - node.top) - totalHeight + node.height\r\n            this.updateChildren(item.children, 'top', item.top - _top)\r\n          })\r\n        }\r\n      },\r\n      true\r\n    )\r\n  }\r\n\r\n  //  递归计算节点的宽度\r\n  getNodeAreaHeight(node) {\r\n    let totalHeight = 0\r\n    let loop = node => {\r\n      totalHeight +=\r\n        node.height +\r\n        (this.getNodeActChildrenLength(node) > 0 ? node.expandBtnSize : 0) +\r\n        this.getMarginY(node.layerIndex)\r\n      if (node.children.length) {\r\n        node.children.forEach(item => {\r\n          loop(item)\r\n        })\r\n      }\r\n    }\r\n    loop(node)\r\n    return totalHeight\r\n  }\r\n\r\n  //  调整兄弟节点的left\r\n  updateBrothersLeft(node) {\r\n    let childrenList = node.children\r\n    let totalAddWidth = 0\r\n    childrenList.forEach(item => {\r\n      item.left += totalAddWidth\r\n      if (item.children && item.children.length) {\r\n        this.updateChildren(item.children, 'left', totalAddWidth)\r\n      }\r\n      // let areaWidth = this.getNodeAreaWidth(item)\r\n      let { left, right } = this.getNodeBoundaries(item, 'h')\r\n      let areaWidth = right - left\r\n      let difference = areaWidth - item.width\r\n      if (difference > 0) {\r\n        totalAddWidth += difference\r\n      }\r\n    })\r\n  }\r\n\r\n  //  调整兄弟节点的top\r\n  updateBrothersTop(node, addHeight) {\r\n    if (node.parent && !node.parent.isRoot) {\r\n      let childrenList = node.parent.children\r\n      let index = getNodeIndexInNodeList(node, childrenList)\r\n      childrenList.forEach((item, _index) => {\r\n        if (item.hasCustomPosition()) {\r\n          // 适配自定义位置\r\n          return\r\n        }\r\n        let _offset = 0\r\n        // 下面的节点往下移\r\n        if (_index > index) {\r\n          _offset = addHeight\r\n        }\r\n        item.top += _offset\r\n        // 同步更新子节点的位置\r\n        if (item.children && item.children.length) {\r\n          this.updateChildren(item.children, 'top', _offset)\r\n        }\r\n      })\r\n      // 更新父节点的位置\r\n      this.updateBrothersTop(node.parent, addHeight)\r\n    }\r\n  }\r\n\r\n  //  绘制连线，连接该节点到其子节点\r\n  renderLine(node, lines, style) {\r\n    if (node.children.length <= 0) {\r\n      return []\r\n    }\r\n    let { left, top, width, height, expandBtnSize } = node\r\n    if (!this.mindMap.opt.alwaysShowExpandBtn) {\r\n      expandBtnSize = 0\r\n    }\r\n    let len = node.children.length\r\n    if (node.isRoot) {\r\n      // 当前节点是根节点\r\n      let prevBother = node\r\n      // 根节点的子节点是和根节点同一水平线排列\r\n      node.children.forEach((item, index) => {\r\n        let x1 = prevBother.left + prevBother.width\r\n        let x2 = item.left\r\n        let y = node.top + node.height / 2\r\n        let path = `M ${x1},${y} L ${x2},${y}`\r\n        this.setLineStyle(style, lines[index], path, item)\r\n        prevBother = item\r\n      })\r\n    } else {\r\n      // 当前节点为非根节点\r\n      let maxy = -Infinity\r\n      let miny = Infinity\r\n      let x = node.left + node.width * 0.3\r\n      node.children.forEach((item, index) => {\r\n        let y = item.top + item.height / 2\r\n        if (y > maxy) {\r\n          maxy = y\r\n        }\r\n        if (y < miny) {\r\n          miny = y\r\n        }\r\n        // 水平线\r\n        let path = `M ${x},${y} L ${item.left},${y}`\r\n        this.setLineStyle(style, lines[index], path, item)\r\n      })\r\n      // 竖线\r\n      if (len > 0) {\r\n        let line = this.lineDraw.path()\r\n        expandBtnSize = len > 0 ? expandBtnSize : 0\r\n        if (\r\n          node.parent &&\r\n          node.parent.isRoot &&\r\n          node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n        ) {\r\n          line.plot(this.transformPath(`M ${x},${top} L ${x},${miny}`))\r\n        } else {\r\n          line.plot(\r\n            this.transformPath(\r\n              `M ${x},${top + height + expandBtnSize} L ${x},${maxy}`\r\n            )\r\n          )\r\n        }\r\n        node.style.line(line)\r\n        node._lines.push(line)\r\n        style && style(line, node)\r\n      }\r\n    }\r\n  }\r\n\r\n  //  渲染按钮\r\n  renderExpandBtn(node, btn) {\r\n    let { width, height, expandBtnSize, isRoot } = node\r\n    if (!isRoot) {\r\n      let { translateX, translateY } = btn.transform()\r\n      if (\r\n        node.parent &&\r\n        node.parent.isRoot &&\r\n        node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n      ) {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          -expandBtnSize / 2 - translateY\r\n        )\r\n      } else {\r\n        btn.translate(\r\n          width * 0.3 - expandBtnSize / 2 - translateX,\r\n          height + expandBtnSize / 2 - translateY\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  //  创建概要节点\r\n  renderGeneralization(list) {\r\n    list.forEach(item => {\r\n      let {\r\n        top,\r\n        bottom,\r\n        right,\r\n        generalizationLineMargin,\r\n        generalizationNodeMargin\r\n      } = this.getNodeGeneralizationRenderBoundaries(item, 'h')\r\n      let x1 = right + generalizationLineMargin\r\n      let y1 = top\r\n      let x2 = right + generalizationLineMargin\r\n      let y2 = bottom\r\n      let cx = x1 + 20\r\n      let cy = y1 + (y2 - y1) / 2\r\n      let path = `M ${x1},${y1} Q ${cx},${cy} ${x2},${y2}`\r\n      item.generalizationLine.plot(this.transformPath(path))\r\n      item.generalizationNode.left = right + generalizationNodeMargin\r\n      item.generalizationNode.top =\r\n        top + (bottom - top - item.generalizationNode.height) / 2\r\n    })\r\n  }\r\n\r\n  // 渲染展开收起按钮的隐藏占位元素\r\n  renderExpandBtnRect(rect, expandBtnSize, width, height, node) {\r\n    if (this.layout === CONSTANTS.LAYOUT.TIMELINE) {\r\n      rect.size(width, expandBtnSize).x(0).y(height)\r\n    } else {\r\n      let dir = ''\r\n      if (node.dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\r\n        dir =\r\n          node.layerIndex === 1\r\n            ? CONSTANTS.LAYOUT_GROW_DIR.TOP\r\n            : CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n      } else {\r\n        dir = CONSTANTS.LAYOUT_GROW_DIR.BOTTOM\r\n      }\r\n      if (dir === CONSTANTS.LAYOUT_GROW_DIR.TOP) {\r\n        rect.size(width, expandBtnSize).x(0).y(-expandBtnSize)\r\n      } else {\r\n        rect.size(width, expandBtnSize).x(0).y(height)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Timeline\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}