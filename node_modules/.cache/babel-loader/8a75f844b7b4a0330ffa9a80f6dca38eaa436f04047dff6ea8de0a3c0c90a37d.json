{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nconst methods = {};\nconst names = [];\nexport function registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m);\n    }\n    return;\n  }\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name]);\n    }\n    return;\n  }\n  addMethodNames(Object.getOwnPropertyNames(m));\n  methods[name] = Object.assign(methods[name] || {}, m);\n}\nexport function getMethodsFor(name) {\n  return methods[name] || {};\n}\nexport function getMethodNames() {\n  return [...new Set(names)];\n}\nexport function addMethodNames(_names) {\n  names.push(..._names);\n}","map":{"version":3,"names":["methods","names","registerMethods","name","m","Array","isArray","_name","addMethodNames","Object","getOwnPropertyNames","assign","getMethodsFor","getMethodNames","Set","_names","push"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/@svgdotjs/svg.js/src/utils/methods.js"],"sourcesContent":["const methods = {}\nconst names = []\n\nexport function registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m)\n    }\n    return\n  }\n\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name])\n    }\n    return\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m))\n  methods[name] = Object.assign(methods[name] || {}, m)\n}\n\nexport function getMethodsFor(name) {\n  return methods[name] || {}\n}\n\nexport function getMethodNames() {\n  return [...new Set(names)]\n}\n\nexport function addMethodNames(_names) {\n  names.push(..._names)\n}\n"],"mappings":";;;;;;;;AAAA,MAAMA,OAAO,GAAG,CAAC,CAAC;AAClB,MAAMC,KAAK,GAAG,EAAE;AAEhB,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,CAAC,EAAE;EACvC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACvB,KAAK,MAAMI,KAAK,IAAIJ,IAAI,EAAE;MACxBD,eAAe,CAACK,KAAK,EAAEH,CAAC,CAAC;IAC3B;IACA;EACF;EAEA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B,KAAK,MAAMI,KAAK,IAAIJ,IAAI,EAAE;MACxBD,eAAe,CAACK,KAAK,EAAEJ,IAAI,CAACI,KAAK,CAAC,CAAC;IACrC;IACA;EACF;EAEAC,cAAc,CAACC,MAAM,CAACC,mBAAmB,CAACN,CAAC,CAAC,CAAC;EAC7CJ,OAAO,CAACG,IAAI,CAAC,GAAGM,MAAM,CAACE,MAAM,CAACX,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAEC,CAAC,CAAC;AACvD;AAEA,OAAO,SAASQ,aAAaA,CAACT,IAAI,EAAE;EAClC,OAAOH,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B;AAEA,OAAO,SAASU,cAAcA,CAAA,EAAG;EAC/B,OAAO,CAAC,GAAG,IAAIC,GAAG,CAACb,KAAK,CAAC,CAAC;AAC5B;AAEA,OAAO,SAASO,cAAcA,CAACO,MAAM,EAAE;EACrCd,KAAK,CAACe,IAAI,CAAC,GAAGD,MAAM,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}