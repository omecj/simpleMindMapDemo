{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { keyMap } from './keyMap';\n\n//  快捷按键、命令处理类\nexport default class KeyCommand {\n  //  构造函数\n  constructor(opt) {\n    this.opt = opt;\n    this.mindMap = opt.mindMap;\n    this.shortcutMap = {\n      //Enter: [fn]\n    };\n    this.shortcutMapCache = {};\n    this.isPause = false;\n    this.isInSvg = false;\n    this.bindEvent();\n  }\n\n  //  暂停快捷键响应\n  pause() {\n    this.isPause = true;\n  }\n\n  //  恢复快捷键响应\n  recovery() {\n    this.isPause = false;\n  }\n\n  //  保存当前注册的快捷键数据，然后清空快捷键数据\n  save() {\n    this.shortcutMapCache = this.shortcutMap;\n    this.shortcutMap = {};\n  }\n\n  //  恢复保存的快捷键数据，然后清空缓存数据\n  restore() {\n    this.shortcutMap = this.shortcutMapCache;\n    this.shortcutMapCache = {};\n  }\n\n  //  绑定事件\n  bindEvent() {\n    this.onKeydown = this.onKeydown.bind(this);\n    // 只有当鼠标在画布内才响应快捷键\n    this.mindMap.on('svg_mouseenter', () => {\n      this.isInSvg = true;\n    });\n    this.mindMap.on('svg_mouseleave', () => {\n      if (this.mindMap.renderer.textEdit.isShowTextEdit()) return;\n      if (this.mindMap.associativeLine && this.mindMap.associativeLine.showTextEdit) {\n        return;\n      }\n      this.isInSvg = false;\n    });\n    window.addEventListener('keydown', this.onKeydown);\n    this.mindMap.on('beforeDestroy', () => {\n      this.unBindEvent();\n    });\n  }\n\n  // 解绑事件\n  unBindEvent() {\n    window.removeEventListener('keydown', this.onKeydown);\n  }\n\n  // 按键事件\n  onKeydown(e) {\n    const {\n      enableShortcutOnlyWhenMouseInSvg,\n      beforeShortcutRun\n    } = this.mindMap.opt;\n    if (this.isPause || enableShortcutOnlyWhenMouseInSvg && !this.isInSvg) {\n      return;\n    }\n    Object.keys(this.shortcutMap).forEach(key => {\n      if (this.checkKey(e, key)) {\n        // 粘贴事件不组织，因为要监听paste事件\n        if (!this.checkKey(e, 'Control+v')) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n        if (typeof beforeShortcutRun === 'function') {\n          const isStop = beforeShortcutRun(key, [...this.mindMap.renderer.activeNodeList]);\n          if (isStop) return;\n        }\n        this.shortcutMap[key].forEach(fn => {\n          fn();\n        });\n      }\n    });\n  }\n\n  //  检查键值是否符合\n  checkKey(e, key) {\n    let o = this.getOriginEventCodeArr(e);\n    let k = this.getKeyCodeArr(key);\n    if (o.length !== k.length) {\n      return false;\n    }\n    for (let i = 0; i < o.length; i++) {\n      let index = k.findIndex(item => {\n        return item === o[i];\n      });\n      if (index === -1) {\n        return false;\n      } else {\n        k.splice(index, 1);\n      }\n    }\n    return true;\n  }\n\n  //  获取事件对象里的键值数组\n  getOriginEventCodeArr(e) {\n    let arr = [];\n    if (e.ctrlKey || e.metaKey) {\n      arr.push(keyMap['Control']);\n    }\n    if (e.altKey) {\n      arr.push(keyMap['Alt']);\n    }\n    if (e.shiftKey) {\n      arr.push(keyMap['Shift']);\n    }\n    if (!arr.includes(e.keyCode)) {\n      arr.push(e.keyCode);\n    }\n    return arr;\n  }\n\n  // 判断是否按下了组合键\n  hasCombinationKey(e) {\n    return e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n  }\n\n  //  获取快捷键对应的键值数组\n  getKeyCodeArr(key) {\n    let keyArr = key.split(/\\s*\\+\\s*/);\n    let arr = [];\n    keyArr.forEach(item => {\n      arr.push(keyMap[item]);\n    });\n    return arr;\n  }\n\n  //  添加快捷键命令\n  /**\r\n   * Enter\r\n   * Tab | Insert\r\n   * Shift + a\r\n   */\n  addShortcut(key, fn) {\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      if (this.shortcutMap[item]) {\n        this.shortcutMap[item].push(fn);\n      } else {\n        this.shortcutMap[item] = [fn];\n      }\n    });\n  }\n\n  //  移除快捷键命令\n  removeShortcut(key, fn) {\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      if (this.shortcutMap[item]) {\n        if (fn) {\n          let index = this.shortcutMap[item].findIndex(f => {\n            return f === fn;\n          });\n          if (index !== -1) {\n            this.shortcutMap[item].splice(index, 1);\n          }\n        } else {\n          this.shortcutMap[item] = [];\n          delete this.shortcutMap[item];\n        }\n      }\n    });\n  }\n\n  //  获取指定快捷键的处理函数\n  getShortcutFn(key) {\n    let res = [];\n    key.split(/\\s*\\|\\s*/).forEach(item => {\n      res = this.shortcutMap[item] || [];\n    });\n    return res;\n  }\n}","map":{"version":3,"names":["keyMap","KeyCommand","constructor","opt","mindMap","shortcutMap","shortcutMapCache","isPause","isInSvg","bindEvent","pause","recovery","save","restore","onKeydown","bind","on","renderer","textEdit","isShowTextEdit","associativeLine","showTextEdit","window","addEventListener","unBindEvent","removeEventListener","e","enableShortcutOnlyWhenMouseInSvg","beforeShortcutRun","Object","keys","forEach","key","checkKey","stopPropagation","preventDefault","isStop","activeNodeList","fn","o","getOriginEventCodeArr","k","getKeyCodeArr","length","i","index","findIndex","item","splice","arr","ctrlKey","metaKey","push","altKey","shiftKey","includes","keyCode","hasCombinationKey","keyArr","split","addShortcut","removeShortcut","f","getShortcutFn","res"],"sources":["C:/Users/otff/Desktop/mindmap_demo/mind_demo/node_modules/simple-mind-map/src/core/command/KeyCommand.js"],"sourcesContent":["import { keyMap } from './keyMap'\r\n\r\n//  快捷按键、命令处理类\r\nexport default class KeyCommand {\r\n  //  构造函数\r\n  constructor(opt) {\r\n    this.opt = opt\r\n    this.mindMap = opt.mindMap\r\n    this.shortcutMap = {\r\n      //Enter: [fn]\r\n    }\r\n    this.shortcutMapCache = {}\r\n    this.isPause = false\r\n    this.isInSvg = false\r\n    this.bindEvent()\r\n  }\r\n\r\n  //  暂停快捷键响应\r\n  pause() {\r\n    this.isPause = true\r\n  }\r\n\r\n  //  恢复快捷键响应\r\n  recovery() {\r\n    this.isPause = false\r\n  }\r\n\r\n  //  保存当前注册的快捷键数据，然后清空快捷键数据\r\n  save() {\r\n    this.shortcutMapCache = this.shortcutMap\r\n    this.shortcutMap = {}\r\n  }\r\n\r\n  //  恢复保存的快捷键数据，然后清空缓存数据\r\n  restore() {\r\n    this.shortcutMap = this.shortcutMapCache\r\n    this.shortcutMapCache = {}\r\n  }\r\n\r\n  //  绑定事件\r\n  bindEvent() {\r\n    this.onKeydown = this.onKeydown.bind(this)\r\n    // 只有当鼠标在画布内才响应快捷键\r\n    this.mindMap.on('svg_mouseenter', () => {\r\n      this.isInSvg = true\r\n    })\r\n    this.mindMap.on('svg_mouseleave', () => {\r\n      if (this.mindMap.renderer.textEdit.isShowTextEdit()) return\r\n      if (\r\n        this.mindMap.associativeLine &&\r\n        this.mindMap.associativeLine.showTextEdit\r\n      ) {\r\n        return\r\n      }\r\n      this.isInSvg = false\r\n    })\r\n    window.addEventListener('keydown', this.onKeydown)\r\n    this.mindMap.on('beforeDestroy', () => {\r\n      this.unBindEvent()\r\n    })\r\n  }\r\n\r\n  // 解绑事件\r\n  unBindEvent() {\r\n    window.removeEventListener('keydown', this.onKeydown)\r\n  }\r\n\r\n  // 按键事件\r\n  onKeydown(e) {\r\n    const { enableShortcutOnlyWhenMouseInSvg, beforeShortcutRun } = this.mindMap.opt\r\n    if (\r\n      this.isPause ||\r\n      (enableShortcutOnlyWhenMouseInSvg && !this.isInSvg)\r\n    ) {\r\n      return\r\n    }\r\n    Object.keys(this.shortcutMap).forEach(key => {\r\n      if (this.checkKey(e, key)) {\r\n        // 粘贴事件不组织，因为要监听paste事件\r\n        if (!this.checkKey(e, 'Control+v')) {\r\n          e.stopPropagation()\r\n          e.preventDefault()\r\n        }\r\n        if (typeof beforeShortcutRun === 'function') {\r\n          const isStop = beforeShortcutRun(key, [...this.mindMap.renderer.activeNodeList])\r\n          if (isStop) return\r\n        }\r\n        this.shortcutMap[key].forEach(fn => {\r\n          fn()\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  //  检查键值是否符合\r\n  checkKey(e, key) {\r\n    let o = this.getOriginEventCodeArr(e)\r\n    let k = this.getKeyCodeArr(key)\r\n    if (o.length !== k.length) {\r\n      return false\r\n    }\r\n    for (let i = 0; i < o.length; i++) {\r\n      let index = k.findIndex(item => {\r\n        return item === o[i]\r\n      })\r\n      if (index === -1) {\r\n        return false\r\n      } else {\r\n        k.splice(index, 1)\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  //  获取事件对象里的键值数组\r\n  getOriginEventCodeArr(e) {\r\n    let arr = []\r\n    if (e.ctrlKey || e.metaKey) {\r\n      arr.push(keyMap['Control'])\r\n    }\r\n    if (e.altKey) {\r\n      arr.push(keyMap['Alt'])\r\n    }\r\n    if (e.shiftKey) {\r\n      arr.push(keyMap['Shift'])\r\n    }\r\n    if (!arr.includes(e.keyCode)) {\r\n      arr.push(e.keyCode)\r\n    }\r\n    return arr\r\n  }\r\n\r\n  // 判断是否按下了组合键\r\n  hasCombinationKey(e) {\r\n    return e.ctrlKey || e.metaKey || e.altKey || e.shiftKey\r\n  }\r\n\r\n  //  获取快捷键对应的键值数组\r\n  getKeyCodeArr(key) {\r\n    let keyArr = key.split(/\\s*\\+\\s*/)\r\n    let arr = []\r\n    keyArr.forEach(item => {\r\n      arr.push(keyMap[item])\r\n    })\r\n    return arr\r\n  }\r\n\r\n  //  添加快捷键命令\r\n  /**\r\n   * Enter\r\n   * Tab | Insert\r\n   * Shift + a\r\n   */\r\n  addShortcut(key, fn) {\r\n    key.split(/\\s*\\|\\s*/).forEach(item => {\r\n      if (this.shortcutMap[item]) {\r\n        this.shortcutMap[item].push(fn)\r\n      } else {\r\n        this.shortcutMap[item] = [fn]\r\n      }\r\n    })\r\n  }\r\n\r\n  //  移除快捷键命令\r\n  removeShortcut(key, fn) {\r\n    key.split(/\\s*\\|\\s*/).forEach(item => {\r\n      if (this.shortcutMap[item]) {\r\n        if (fn) {\r\n          let index = this.shortcutMap[item].findIndex(f => {\r\n            return f === fn\r\n          })\r\n          if (index !== -1) {\r\n            this.shortcutMap[item].splice(index, 1)\r\n          }\r\n        } else {\r\n          this.shortcutMap[item] = []\r\n          delete this.shortcutMap[item]\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  //  获取指定快捷键的处理函数\r\n  getShortcutFn(key) {\r\n    let res = []\r\n    key.split(/\\s*\\|\\s*/).forEach(item => {\r\n      res = this.shortcutMap[item] || []\r\n    })\r\n    return res\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}